<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on Curious Stuff Blog by Sergio Anguita</title><link>https://curiousstuff.eu/tags/golang/</link><description>Recent content in golang on Curious Stuff Blog by Sergio Anguita</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Fri, 01 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://curiousstuff.eu/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Dec2hex: optimizing decimal to hexadecimal conversion algorithms for speed</title><link>https://curiousstuff.eu/post/dec2hex-optimizing-decimal-to-hexadecimal-conversion-algorithms-for-speed/</link><pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/dec2hex-optimizing-decimal-to-hexadecimal-conversion-algorithms-for-speed/</guid><description>Hexadecimal format Hexadecimal is the name of the numbering system that is base 16. This system, therefore, has numerals 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, and 15. That means that two-digit decimal numbers 10, 11, 12, 13, 14, and 15 must be represented by a single numeral to exist in this numbering system. To address the two-digit decimal values, the alphabetic characters A, B, C, D, E, and F are used to represent these values in hexadecimal and are treated as valid numerals.</description></item><item><title>Building a word counter efficiently</title><link>https://curiousstuff.eu/post/building-a-word-counter-efficiently/</link><pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/building-a-word-counter-efficiently/</guid><description>In this small article, I dig into some caveats that make your software development better when working with files. We talk about, how file reading can be done in Go using buffered readings to speedup data access and improve our overall programm experience.
I will show you a basic example of file reading based on real example.
A real example of file reading Most unix based systems, contains a small utility called wc with stands for word count and according to man documentation, states:</description></item><item><title>A pure Go Blazinly fast PRNG 64 bit ID generator</title><link>https://curiousstuff.eu/post/a-pure-go-blazinly-fast-prng-64-bit-id-generator/</link><pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/a-pure-go-blazinly-fast-prng-64-bit-id-generator/</guid><description>Blazinly fast PRNG 64 bit are here Sometimes, we require to have an identifier in order to store things, track behaviours etc. In this scenario, I was required to rapidly generate ID strings in order to be used as Request ID for an HTTP service. Those IDs would be included in HTTP service response X-Request-ID header and tracked in Opentracing. I did some initial implementation and saw a performance degradation that I did not like it.</description></item><item><title>Go released 1.17</title><link>https://curiousstuff.eu/post/go-released-1.17/</link><pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/go-released-1.17/</guid><description>Go 1.17 is released The 16 of August 2021, the Go Team releases the version 1.17 of Go
This release brings additional improvements to the compiler, namely a new way of passing function arguments and results. This change has shown about a 5% performance improvement in Go programs and reduction in binary sizes of around 2% for amd64 platforms. Support for more platforms will come in future releases.
Go 1.17 also adds support for the 64-bit ARM architecture on Windows, letting gophers run Go natively on more devices.</description></item><item><title>Lightning fast stock market data parsing. Get a boost of 70%</title><link>https://curiousstuff.eu/post/lightning-fast-stock-market-data-parsing.-get-a-boost-of-70/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/lightning-fast-stock-market-data-parsing.-get-a-boost-of-70/</guid><description>Con el confinamiento por el Coronavirus y esta situación tan caótica, uno tiene más tiempo para estar delante del ordenador y hacer cosas locas; o frikadas como me gusta llamarlas! Una de ellas es procesar datos de la Bolsa, y como esta es mi primera experiencia con ello, he empezado con la Bolsa española: BME, que es la que más cerca tengo, aunque técnicamente da igual cual elegir porque lo importante son los datos en sí.</description></item><item><title>Building a WASM application from scratch</title><link>https://curiousstuff.eu/post/building-a-wasm-application-from-scratch/</link><pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/building-a-wasm-application-from-scratch/</guid><description>What is WASM WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.
The official documentation of WASM can be found at https://webassembly.org/
How fast WASM is? The Wasm stack machine is designed to be encoded in a size- and load-time-efficient binary format. WebAssembly aims to execute at native speed by taking advantage of common hardware capabilities available on a wide range of platforms.</description></item><item><title>Detecting a valid IPv4 in Go like a boss</title><link>https://curiousstuff.eu/post/detecting-a-valid-ipv4-in-go-like-a-boss/</link><pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/detecting-a-valid-ipv4-in-go-like-a-boss/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>A short analysis of different alternatives to check IPv4 validity comparing complexity vs performance of their implementations.&lt;/p></description></item><item><title>Benchmarking Go Ethereum account creation in Android</title><link>https://curiousstuff.eu/post/benchmarking-go-ethereum-account-creation-in-android/</link><pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/benchmarking-go-ethereum-account-creation-in-android/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>How to run native Go code In Android and bench results!&lt;/p></description></item></channel></rss>