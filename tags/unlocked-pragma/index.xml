<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>unlocked-pragma on Curious Stuff Blog by Sergio Anguita</title><link>https://curiousstuff.eu/tags/unlocked-pragma/</link><description>Recent content in unlocked-pragma on Curious Stuff Blog by Sergio Anguita</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sun, 07 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://curiousstuff.eu/tags/unlocked-pragma/index.xml" rel="self" type="application/rss+xml"/><item><title>Autodetecting Unlocked Compiler Versions in Solidity</title><link>https://curiousstuff.eu/post/autodetecting-unlocked-compiler-versions-in-solidity/</link><pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/autodetecting-unlocked-compiler-versions-in-solidity/</guid><description>I want to show you how source code analyzers works with a simple example. Let&amp;rsquo;s build an analyzer that will check if Solidity source files contains a floating pragma declaration or not. There are some steps we need to follow, such as finding or building a good Solidity grammar file, parse the input content, build a parse tree, process the tree, and finally, find issues. All the process is explained below.</description></item></channel></rss>