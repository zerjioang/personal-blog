<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>blocks on Curious Stuff Blog by Sergio Anguita</title><link>https://curiousstuff.eu/tags/blocks/</link><description>Recent content in blocks on Curious Stuff Blog by Sergio Anguita</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sun, 19 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://curiousstuff.eu/tags/blocks/index.xml" rel="self" type="application/rss+xml"/><item><title>Part 2: Building Ethereum EVM decompiler from scratch. Getting Code Blocks</title><link>https://curiousstuff.eu/post/part-2-building-ethereum-evm-decompiler-from-scratch.-getting-code-blocks/</link><pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/part-2-building-ethereum-evm-decompiler-from-scratch.-getting-code-blocks/</guid><description>In a previous post, Part 1: Building Ethereum EVM decompiler from scratch. Getting OPCODEs, I basically explained how EVM bytecode could be decoded from hexadecimal (0x...) format to some sort of assembly instructions. To make a little recap, we were able to convert input data from
1 0x363d3d373d3d3d363d73e38f942db7a1b4213d6213f70c499b59287b01f15af43d82803e903d91602b57fd5bf3 to EVM assembly instructions like
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 0x0000 CALLDATASIZE 0x0001 RETURNDATASIZE 0x0002 RETURNDATASIZE 0x0003 CALLDATACOPY 0x0004 RETURNDATASIZE 0x0005 RETURNDATASIZE 0x0006 RETURNDATASIZE 0x0007 CALLDATASIZE 0x0008 RETURNDATASIZE 0x0009 PUSH20 0xE38F942DB7A1B4213D6213F70C499B59287B01F1 0x001E GAS 0x001F DELEGATECALL 0x0020 RETURNDATASIZE 0x0021 DUP3 0x0022 DUP1 0x0023 RETURNDATACOPY 0x0024 SWAP1 0x0025 RETURNDATASIZE 0x0026 SWAP2 0x0027 PUSH1 0x2B 0x0029 JUMPI 0x002A REVERT 0x002B JUMPDEST 0x002C RETURN Example: Proxy contract taken from Ethereum Mainnet at address 0x3cdd26204e114c17823d82180e5ca3f299f18d22.</description></item></channel></rss>