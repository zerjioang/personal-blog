<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ethereum on Curious Stuff Blog by Sergio Anguita</title><link>https://curiousstuff.eu/tags/ethereum/</link><description>Recent content in ethereum on Curious Stuff Blog by Sergio Anguita</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Fri, 18 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://curiousstuff.eu/tags/ethereum/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a tiny Ethereum EVM in Go</title><link>https://curiousstuff.eu/post/creating-a-tiny-ethereum-evm-in-go/</link><pubDate>Fri, 18 Nov 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/creating-a-tiny-ethereum-evm-in-go/</guid><description>The Ethereum Virtual Machine (EVM) The Ethereum Virtual Machine (EVM) is a vital component of the Ethereum blockchain ecosystem. It is responsible for executing smart contracts on the Ethereum network. Smart contracts are self-executing contracts with the terms of the agreement between the buyer and the seller being directly written into code.
The EVM can be thought of as a decentralized virtual computer, as it is distributed across the Ethereum network and run by all participating nodes.</description></item><item><title>Autodetecting Unlocked Compiler Versions in Solidity</title><link>https://curiousstuff.eu/post/autodetecting-unlocked-compiler-versions-in-solidity/</link><pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/autodetecting-unlocked-compiler-versions-in-solidity/</guid><description>I want to show you how source code analyzers works with a simple example. Let&amp;rsquo;s build an analyzer that will check if Solidity source files contains a floating pragma declaration or not. There are some steps we need to follow, such as finding or building a good Solidity grammar file, parse the input content, build a parse tree, process the tree, and finally, find issues. All the process is explained below.</description></item><item><title>EVM bytecode to Graph using Crytic CFG Builder</title><link>https://curiousstuff.eu/post/evm-bytecode-to-graph-using-crytic-cfg-builder/</link><pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/evm-bytecode-to-graph-using-crytic-cfg-builder/</guid><description>For this experiment, I choose to test the Crytic tool called evm_cfg_builder which is opensource and is available at https://github.com/crytic/evm_cfg_builder.
The next step, is to find a contract to analyze and see how it works. What a better way to try it out than using their own example contracts.
Finding a contract to analyze The source code is extracted from evm-cfg-builder at https://github.com/crytic/evm_cfg_builder/blob/master/examples/token.sol
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 // from https://github.</description></item><item><title>Converting EVM bytecode to OPCODES in microseconds</title><link>https://curiousstuff.eu/post/converting-evm-bytecode-to-opcodes-in-microseconds/</link><pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/converting-evm-bytecode-to-opcodes-in-microseconds/</guid><description>Decompiling EVM Bytecode The process of decompiling an ethereum application can be very expensive. When you start an analysis process, you can take as a basis the network bytecode or the source code in Solidity. Doing a white box analysis is generally less expensive and requires programming knowledge in Solidity only. A bytecode analysis, however, requires low-level knowledge, understanding the operation of opcodes, EVM instructions, the stack, memory and storage modules, etc.</description></item><item><title>Crawling Ethereum Blockchain for automated Smart Contract Extraction</title><link>https://curiousstuff.eu/post/crawling-ethereum-blockchain-for-automated-smart-contract-extraction/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/crawling-ethereum-blockchain-for-automated-smart-contract-extraction/</guid><description>In this article I&amp;rsquo;m going to show you how an automated data extraction can be dome for massive data analysis processes. The goal is to download all interesting Blockchain information as a processable file like a CSV. I&amp;rsquo;ll guide you throw the process of making it possible.
Requirements To be able to crawl the Blockchain data, we must have first a ledger peer syncronized and running. If you dont have one, you can check this guide about how to setup one.</description></item><item><title>How to install truffle, compile and run our first smart contract with Solidity</title><link>https://curiousstuff.eu/post/how-to-install-truffle-compile-and-run-our-first-smart-contract-with-solidity/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/how-to-install-truffle-compile-and-run-our-first-smart-contract-with-solidity/</guid><description>In this article I will guide you through a complete step by step guide about how to configure your machine and setup to have your first smart contract running and installed on a Blockchain.
Warning
This article was developed using Truffle v5.5.3 (core: 5.5.3), Ganache v7.0.1, Solidity - 0.8.12 (solc-js), Node v17.7.0 and Web3.js v1.5.3 Steps The steps we are going to make are listed below
Configure our environment and install required tools: truffle, ganache.</description></item><item><title>Running an Ethereum Rinkeby full node in 2022</title><link>https://curiousstuff.eu/post/running-an-ethereum-rinkeby-full-node-in-2022/</link><pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/running-an-ethereum-rinkeby-full-node-in-2022/</guid><description>What is Rinkeby Testnet Rinkeby is an Ethereum test network that allows for blockchain development testing before deployment on Mainnet, the main Ethereum network.
The Proof-of-Authority test network was established in April 2017. It uses the Clique PoA consensus protocol, and is maintained by the Geth developer team.
The network is supported by Geth, Nethermind and Hyperledger Besu.
Some features of the network are:
Testnet / Live: Test Chain ID: 4 Network ID: 4 Live Since: April 2017 Block time: 15 seconds Consensus / block proposer: PoA â€“ Proof-of-Authority Permissioned: Yes Governance / Authorities: Known developers who sign the blocks Meaning of PoA:</description></item><item><title>Understanding EVM: an introduction to Ethereum OPCODES</title><link>https://curiousstuff.eu/post/understanding-evm-an-introduction-to-ethereum-opcodes/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/understanding-evm-an-introduction-to-ethereum-opcodes/</guid><description>The Ethereum Virtual Machine or EVM The Ethereum Virtual Machine is the software platform that developers can use to create decentralized applications (DApps) on Ethereum. At any given block in the chain, Ethereum has one and only one &amp;lsquo;canonical&amp;rsquo; state, and the EVM is what defines the rules for computing a new valid state from block to block.
The EVM design simplified The EVM behaves as a mathematical function would: Given an input, it produces a deterministic output.</description></item><item><title>Benchmarking Go Ethereum account creation in Android</title><link>https://curiousstuff.eu/post/benchmarking-go-ethereum-account-creation-in-android/</link><pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/benchmarking-go-ethereum-account-creation-in-android/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>How to run native Go code In Android and bench results!&lt;/p></description></item></channel></rss>