<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on Curious Stuff Blog by Sergio Anguita</title><link>https://curiousstuff.eu/tags/go/</link><description>Recent content in go on Curious Stuff Blog by Sergio Anguita</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Fri, 18 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://curiousstuff.eu/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a tiny Ethereum EVM in Go</title><link>https://curiousstuff.eu/post/creating-a-tiny-ethereum-evm-in-go/</link><pubDate>Fri, 18 Nov 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/creating-a-tiny-ethereum-evm-in-go/</guid><description>The Ethereum Virtual Machine (EVM) The Ethereum Virtual Machine (EVM) is a vital component of the Ethereum blockchain ecosystem. It is responsible for executing smart contracts on the Ethereum network. Smart contracts are self-executing contracts with the terms of the agreement between the buyer and the seller being directly written into code.
The EVM can be thought of as a decentralized virtual computer, as it is distributed across the Ethereum network and run by all participating nodes.</description></item><item><title>EVM bytecode to Graph using Crytic CFG Builder</title><link>https://curiousstuff.eu/post/evm-bytecode-to-graph-using-crytic-cfg-builder/</link><pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/evm-bytecode-to-graph-using-crytic-cfg-builder/</guid><description>For this experiment, I choose to test the Crytic tool called evm_cfg_builder which is opensource and is available at https://github.com/crytic/evm_cfg_builder.
The next step, is to find a contract to analyze and see how it works. What a better way to try it out than using their own example contracts.
Finding a contract to analyze The source code is extracted from evm-cfg-builder at https://github.com/crytic/evm_cfg_builder/blob/master/examples/token.sol
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 // from https://github.</description></item><item><title>Dec2hex: optimizing decimal to hexadecimal conversion algorithms for speed</title><link>https://curiousstuff.eu/post/dec2hex-optimizing-decimal-to-hexadecimal-conversion-algorithms-for-speed/</link><pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/dec2hex-optimizing-decimal-to-hexadecimal-conversion-algorithms-for-speed/</guid><description>Hexadecimal format Hexadecimal is the name of the numbering system that is base 16. This system, therefore, has numerals 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, and 15. That means that two-digit decimal numbers 10, 11, 12, 13, 14, and 15 must be represented by a single numeral to exist in this numbering system. To address the two-digit decimal values, the alphabetic characters A, B, C, D, E, and F are used to represent these values in hexadecimal and are treated as valid numerals.</description></item><item><title>Converting EVM bytecode to OPCODES in microseconds</title><link>https://curiousstuff.eu/post/converting-evm-bytecode-to-opcodes-in-microseconds/</link><pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/converting-evm-bytecode-to-opcodes-in-microseconds/</guid><description>Decompiling EVM Bytecode The process of decompiling an ethereum application can be very expensive. When you start an analysis process, you can take as a basis the network bytecode or the source code in Solidity. Doing a white box analysis is generally less expensive and requires programming knowledge in Solidity only. A bytecode analysis, however, requires low-level knowledge, understanding the operation of opcodes, EVM instructions, the stack, memory and storage modules, etc.</description></item><item><title>Using Go Modules with private repositories at Github</title><link>https://curiousstuff.eu/post/using-go-modules-with-private-repositories-at-github/</link><pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/using-go-modules-with-private-repositories-at-github/</guid><description>Unlike many programming languages, Go distributes modules from repositories instead of a central package server. One benefit of this approach is that publishing a private module is very similar to publishing a public one. Instead of requiring a completely separate private package server, a Go private module is distributed via a private source code repository. Since most source code hosting options support this out of the box, thereâ€™s no need to set up an additional private server.</description></item><item><title>Building a word counter efficiently</title><link>https://curiousstuff.eu/post/building-a-word-counter-efficiently/</link><pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/building-a-word-counter-efficiently/</guid><description>In this small article, I dig into some caveats that make your software development better when working with files. We talk about, how file reading can be done in Go using buffered readings to speedup data access and improve our overall programm experience.
I will show you a basic example of file reading based on real example.
A real example of file reading Most unix based systems, contains a small utility called wc with stands for word count and according to man documentation, states:</description></item><item><title>A pure Go Blazinly fast PRNG 64 bit ID generator</title><link>https://curiousstuff.eu/post/a-pure-go-blazinly-fast-prng-64-bit-id-generator/</link><pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/a-pure-go-blazinly-fast-prng-64-bit-id-generator/</guid><description>Blazinly fast PRNG 64 bit are here Sometimes, we require to have an identifier in order to store things, track behaviours etc. In this scenario, I was required to rapidly generate ID strings in order to be used as Request ID for an HTTP service. Those IDs would be included in HTTP service response X-Request-ID header and tracked in Opentracing. I did some initial implementation and saw a performance degradation that I did not like it.</description></item><item><title>Go released 1.17</title><link>https://curiousstuff.eu/post/go-released-1.17/</link><pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/go-released-1.17/</guid><description>Go 1.17 is released The 16 of August 2021, the Go Team releases the version 1.17 of Go
This release brings additional improvements to the compiler, namely a new way of passing function arguments and results. This change has shown about a 5% performance improvement in Go programs and reduction in binary sizes of around 2% for amd64 platforms. Support for more platforms will come in future releases.
Go 1.17 also adds support for the 64-bit ARM architecture on Windows, letting gophers run Go natively on more devices.</description></item><item><title>Detecting a valid IPv4 in Go like a boss</title><link>https://curiousstuff.eu/post/detecting-a-valid-ipv4-in-go-like-a-boss/</link><pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/detecting-a-valid-ipv4-in-go-like-a-boss/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>A short analysis of different alternatives to check IPv4 validity comparing complexity vs performance of their implementations.&lt;/p></description></item><item><title>Benchmarking Go Ethereum account creation in Android</title><link>https://curiousstuff.eu/post/benchmarking-go-ethereum-account-creation-in-android/</link><pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/benchmarking-go-ethereum-account-creation-in-android/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>How to run native Go code In Android and bench results!&lt;/p></description></item></channel></rss>