<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>english on Curious Stuff Blog by Sergio Anguita</title><link>https://curiousstuff.eu/tags/english/</link><description>Recent content in english on Curious Stuff Blog by Sergio Anguita</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sat, 12 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://curiousstuff.eu/tags/english/index.xml" rel="self" type="application/rss+xml"/><item><title>How to install truffle, compile and run our first smart contract with Solidity</title><link>https://curiousstuff.eu/post/how-to-install-truffle-compile-and-run-our-first-smart-contract-with-solidity/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/how-to-install-truffle-compile-and-run-our-first-smart-contract-with-solidity/</guid><description>In this article I will guide you through a complete step by step guide about how to configure your machine and setup to have your first smart contract running and installed on a Blockchain.
Warning
This article was developed using Truffle v5.5.3 (core: 5.5.3), Ganache v7.0.1, Solidity - 0.8.12 (solc-js), Node v17.7.0 and Web3.js v1.5.3 Steps The steps we are going to make are listed below
Configure our environment and install required tools: truffle, ganache.</description></item><item><title>Fast hash decryption with rtgen and Rainbow Tables</title><link>https://curiousstuff.eu/post/fast-hash-decryption-with-rtgen-and-rainbow-tables/</link><pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/fast-hash-decryption-with-rtgen-and-rainbow-tables/</guid><description>Cracking systems Breaking any encryption system can be done with unlimited time and unlimited computing power, both of which do not exist. Anything less than that unlimited power and time will require chance and good investigative skills. Several methods to break encryption include dictionary attacks, brute-force attacks, and rainbow tables.
Rainbow Tables A note on rainbow tables first:
They do not have rainbow colors
A rainbow table is a precomputed compilation of plaintexts and matching ciphertexts (typically passwords and their matching hashes).</description></item><item><title>Easy solution to how to fix CUPS unauthorized error</title><link>https://curiousstuff.eu/post/easy-solution-to-how-to-fix-cups-unauthorized-error/</link><pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/easy-solution-to-how-to-fix-cups-unauthorized-error/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>Easy to fix solution to common Ubuntu printing CUPS error:&lt;/p></description></item><item><title>Building a WASM application from scratch</title><link>https://curiousstuff.eu/post/building-a-wasm-application-from-scratch/</link><pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/building-a-wasm-application-from-scratch/</guid><description>What is WASM WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.
The official documentation of WASM can be found at https://webassembly.org/
How fast WASM is? The Wasm stack machine is designed to be encoded in a size- and load-time-efficient binary format. WebAssembly aims to execute at native speed by taking advantage of common hardware capabilities available on a wide range of platforms.</description></item><item><title>Password cracking and how to create a bruteforce dictionary with crunch</title><link>https://curiousstuff.eu/post/password-cracking-and-how-to-create-a-bruteforce-dictionary-with-crunch/</link><pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/password-cracking-and-how-to-create-a-bruteforce-dictionary-with-crunch/</guid><description>Today I will show you the most basic password cracking attack that pentesters needs to execute when no other options are available: the password cracking with dictionary attack or bruteforce attack. This is the way that a pentester uses to generate an own wordlist for password cracking. One of the most used tools out there for this task is CRUNCH. It is included in Kali Linux of course. In Kali Linux you can easily get crunch by exploring Application &amp;gt; Password Attacks &amp;gt; Crunch</description></item><item><title>Detecting a valid IPv4 in Go like a boss</title><link>https://curiousstuff.eu/post/detecting-a-valid-ipv4-in-go-like-a-boss/</link><pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/detecting-a-valid-ipv4-in-go-like-a-boss/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>A short analysis of different alternatives to check IPv4 validity comparing complexity vs performance of their implementations.&lt;/p></description></item><item><title>Benchmarking Go Ethereum account creation in Android</title><link>https://curiousstuff.eu/post/benchmarking-go-ethereum-account-creation-in-android/</link><pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/benchmarking-go-ethereum-account-creation-in-android/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>How to run native Go code In Android and bench results!&lt;/p></description></item></channel></rss>