<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coding, Programming and Algorithms on Curious Stuff Blog by Sergio Anguita</title><link>https://curiousstuff.eu/categories/coding/</link><description>Recent content in Coding, Programming and Algorithms on Curious Stuff Blog by Sergio Anguita</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://curiousstuff.eu/categories/coding/index.xml" rel="self" type="application/rss+xml"/><item><title>Dec2hex: optimizing decimal to hexadecimal conversion algorithms for speed</title><link>https://curiousstuff.eu/post/dec2hex-optimizing-decimal-to-hexadecimal-conversion-algorithms-for-speed/</link><pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/dec2hex-optimizing-decimal-to-hexadecimal-conversion-algorithms-for-speed/</guid><description>Hexadecimal format Hexadecimal is the name of the numbering system that is base 16. This system, therefore, has numerals 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, and 15. That means that two-digit decimal numbers 10, 11, 12, 13, 14, and 15 must be represented by a single numeral to exist in this numbering system. To address the two-digit decimal values, the alphabetic characters A, B, C, D, E, and F are used to represent these values in hexadecimal and are treated as valid numerals.</description></item><item><title>How to install truffle, compile and run our first smart contract with Solidity</title><link>https://curiousstuff.eu/post/how-to-install-truffle-compile-and-run-our-first-smart-contract-with-solidity/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/how-to-install-truffle-compile-and-run-our-first-smart-contract-with-solidity/</guid><description>In this article I will guide you through a complete step by step guide about how to configure your machine and setup to have your first smart contract running and installed on a Blockchain.
Warning
This article was developed using Truffle v5.5.3 (core: 5.5.3), Ganache v7.0.1, Solidity - 0.8.12 (solc-js), Node v17.7.0 and Web3.js v1.5.3 Steps The steps we are going to make are listed below
Configure our environment and install required tools: truffle, ganache.</description></item><item><title>Installing Rust n Cargo</title><link>https://curiousstuff.eu/post/installing-rust-n-cargo/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/installing-rust-n-cargo/</guid><description>The easiest way to get Cargo is to install the current stable release of Rust by using rustup. Installing Rust using rustup will also install cargo.
Rust Installation On Linux and macOS systems, this is done as follows:
1 curl https://sh.rustup.rs -sSf | sh After request the installation, you should see the script downloading all required tools
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 info: downloading installer Welcome to Rust!</description></item><item><title>Using Go Modules with private repositories at Github</title><link>https://curiousstuff.eu/post/using-go-modules-with-private-repositories-at-github/</link><pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/using-go-modules-with-private-repositories-at-github/</guid><description>Unlike many programming languages, Go distributes modules from repositories instead of a central package server. One benefit of this approach is that publishing a private module is very similar to publishing a public one. Instead of requiring a completely separate private package server, a Go private module is distributed via a private source code repository. Since most source code hosting options support this out of the box, there’s no need to set up an additional private server.</description></item><item><title>Conociendo el mundo del opendata con un caso real: Bilbobus</title><link>https://curiousstuff.eu/post/conociendo-el-mundo-del-opendata-con-un-caso-real-bilbobus/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/conociendo-el-mundo-del-opendata-con-un-caso-real-bilbobus/</guid><description>Que son los datos abiertos u opendata? Los datos abiertos son datos que pueden ser utilizados, reutilizados y redistribuidos libremente por cualquier persona, y que se encuentran sujetos, cuando más, al requerimiento de atribución y de compartirse de la misma manera en que aparecen.
Dicha atribución, normalmente esta ligada a una licencia de uso o explotación que define que cosas puedes hacer con ellos y si tienes que dar algun tipo de autoria.</description></item><item><title>Building a word counter efficiently</title><link>https://curiousstuff.eu/post/building-a-word-counter-efficiently/</link><pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/building-a-word-counter-efficiently/</guid><description>In this small article, I dig into some caveats that make your software development better when working with files. We talk about, how file reading can be done in Go using buffered readings to speedup data access and improve our overall programm experience.
I will show you a basic example of file reading based on real example.
A real example of file reading Most unix based systems, contains a small utility called wc with stands for word count and according to man documentation, states:</description></item><item><title>How to build a markov chain in Python</title><link>https://curiousstuff.eu/post/how-to-build-a-markov-chain-in-python/</link><pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/how-to-build-a-markov-chain-in-python/</guid><description>Introducing markov chains in Python So far, we read about how a Markov Chain works, the concept of transition matrix and how we can calculate a future state probability. However, we need to be able to create our own Markov Chains from our input data. This post will show you, how you can create your own markov chain using Python 3+
Working with Markov Chains, our first approach So, what markov chain implementation should I use to build my own chain?</description></item><item><title>Introduction to Markov chains</title><link>https://curiousstuff.eu/post/introduction-to-markov-chains/</link><pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/introduction-to-markov-chains/</guid><description>What is a markov chain A Markov chain is a stochastic model describing a sequence of possible events in which the probability of each event depends only on the state attained in the previous event. A countably infinite sequence, in which the chain moves state at discrete time steps, gives a discrete-time Markov chain (DTMC). It is named after the Russian mathematician Andrei Markov (1856-1922), who introduced it in 1906.</description></item><item><title>A pure Go Blazinly fast PRNG 64 bit ID generator</title><link>https://curiousstuff.eu/post/a-pure-go-blazinly-fast-prng-64-bit-id-generator/</link><pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/a-pure-go-blazinly-fast-prng-64-bit-id-generator/</guid><description>Blazinly fast PRNG 64 bit are here Sometimes, we require to have an identifier in order to store things, track behaviours etc. In this scenario, I was required to rapidly generate ID strings in order to be used as Request ID for an HTTP service. Those IDs would be included in HTTP service response X-Request-ID header and tracked in Opentracing. I did some initial implementation and saw a performance degradation that I did not like it.</description></item><item><title>Fast hash decryption with rtgen and Rainbow Tables</title><link>https://curiousstuff.eu/post/fast-hash-decryption-with-rtgen-and-rainbow-tables/</link><pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/fast-hash-decryption-with-rtgen-and-rainbow-tables/</guid><description>Cracking systems Breaking any encryption system can be done with unlimited time and unlimited computing power, both of which do not exist. Anything less than that unlimited power and time will require chance and good investigative skills. Several methods to break encryption include dictionary attacks, brute-force attacks, and rainbow tables.
Rainbow Tables A note on rainbow tables first:
They do not have rainbow colors
A rainbow table is a precomputed compilation of plaintexts and matching ciphertexts (typically passwords and their matching hashes).</description></item><item><title>Lightning fast stock market data parsing. Get a boost of 70%</title><link>https://curiousstuff.eu/post/lightning-fast-stock-market-data-parsing.-get-a-boost-of-70/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/lightning-fast-stock-market-data-parsing.-get-a-boost-of-70/</guid><description>Con el confinamiento por el Coronavirus y esta situación tan caótica, uno tiene más tiempo para estar delante del ordenador y hacer cosas locas; o frikadas como me gusta llamarlas! Una de ellas es procesar datos de la Bolsa, y como esta es mi primera experiencia con ello, he empezado con la Bolsa española: BME, que es la que más cerca tengo, aunque técnicamente da igual cual elegir porque lo importante son los datos en sí.</description></item><item><title>Building a WASM application from scratch</title><link>https://curiousstuff.eu/post/building-a-wasm-application-from-scratch/</link><pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/building-a-wasm-application-from-scratch/</guid><description>What is WASM WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.
The official documentation of WASM can be found at https://webassembly.org/
How fast WASM is? The Wasm stack machine is designed to be encoded in a size- and load-time-efficient binary format. WebAssembly aims to execute at native speed by taking advantage of common hardware capabilities available on a wide range of platforms.</description></item><item><title>Detecting a valid IPv4 in Go like a boss</title><link>https://curiousstuff.eu/post/detecting-a-valid-ipv4-in-go-like-a-boss/</link><pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/detecting-a-valid-ipv4-in-go-like-a-boss/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>A short analysis of different alternatives to check IPv4 validity comparing complexity vs performance of their implementations.&lt;/p></description></item><item><title>Benchmarking Go Ethereum account creation in Android</title><link>https://curiousstuff.eu/post/benchmarking-go-ethereum-account-creation-in-android/</link><pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/benchmarking-go-ethereum-account-creation-in-android/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>How to run native Go code In Android and bench results!&lt;/p></description></item><item><title>Tu primera wallet personal</title><link>https://curiousstuff.eu/post/tu-primera-wallet-personal/</link><pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/tu-primera-wallet-personal/</guid><description>Estamos inmersos en pleno siglo XXI y al igual que sufrimos una revolución con Internet desde la mano de DARPA y la creación de la web gracias a Tim Berners Lee y compañía, es hora de asimilar que está volviendo a pasar. Y lo queramos o no, los datos son el nuevo petróleo.
Hacen ricos a unos cuantos, a costa de todas las personas que sin interés y con desgana, aceptan las condiciones de uso de cualquier aplicación.</description></item></channel></rss>