[{"content":"The Ethereum Virtual Machine (EVM) The Ethereum Virtual Machine (EVM) is a vital component of the Ethereum blockchain ecosystem. It is responsible for executing smart contracts on the Ethereum network. Smart contracts are self-executing contracts with the terms of the agreement between the buyer and the seller being directly written into code.\nThe EVM can be thought of as a decentralized virtual computer, as it is distributed across the Ethereum network and run by all participating nodes. It is designed to be Turing-complete, meaning that any computable algorithm can be implemented within it.\nArchitecture The EVM is a stack-based architecture, meaning that data is stored and retrieved from a stack, which is a last-in, first-out (LIFO) data structure. The EVM operates on a bytecode format, which is generated from high-level programming languages such as Solidity.\nThe EVM has a total of 256 opcodes that allow for various operations such as arithmetic, logic, and memory manipulation. The EVM also has its own gas cost associated with each opcode, which is used to incentivize efficient use of resources on the network.\nInternal Configuration The EVM is configured with a number of system parameters that govern its behavior. These parameters can be set at the genesis block of the Ethereum blockchain and include items such as the block gas limit, the difficulty target, and the EVM version.\nOne of the most critical parameters is the block gas limit, which is the maximum amount of gas that can be used in a single block. Gas is a unit of measurement used to calculate the computational cost of running a smart contract on the Ethereum network.\nMemory Layout The EVM has a 256-bit word size and a maximum memory size of 2^256 bytes. The memory is used to store data and can be accessed through the stack or through memory instructions.\nThe EVM also has several special-purpose registers that are used to store data such as the program counter, which keeps track of the current opcode being executed, and the stack pointer, which keeps track of the top of the stack. The Ethereum Virtual Machine is a critical component of the Ethereum blockchain ecosystem, responsible for executing smart contracts on the network. It is designed to be a Turing-complete, stack-based architecture, with a total of 256 opcodes that allow for various operations such as arithmetic, logic, and memory manipulation. Its internal configuration includes system parameters, and its memory layout is used to store data and can be accessed through the stack or through memory instructions.\nEVM Opcodes Opcodes are the basic instructions that are sent to the EVM to execute operations. These opcodes are grouped into several categories based on their functionality.\nStack Operations Stack operations include pushing data onto the stack and popping data from the stack. Here are a few examples of stack operations:\nPUSH: Pushes a byte or a series of bytes onto the stack. For example, the opcode PUSH1 0x60 pushes the value 0x60 onto the stack. POP: Removes the top item from the stack. For example, the opcode POP removes the top item from the stack. DUP: Duplicates the top item on the stack. For example, the opcode DUP1 duplicates the top item on the stack. Arithmetic Operations Arithmetic operations include addition, subtraction, multiplication, division, and bitwise operations. Here are a few examples of arithmetic operations:\nADD: Adds the top two items on the stack and pushes the result onto the stack. For example, the opcode ADD adds the top two items on the stack. SUB: Subtracts the top two items on the stack and pushes the result onto the stack. For example, the opcode SUB subtracts the top two items on the stack. MUL: Multiplies the top two items on the stack and pushes the result onto the stack. For example, the opcode MUL multiplies the top two items on the stack. Memory Operations Memory operations allow for accessing and manipulating the memory in the EVM. Here are a few examples of memory operations:\nMLOAD: Loads a 32-byte value from memory and pushes it onto the stack. For example, the opcode MLOAD loads a 32-byte value from memory and pushes it onto the stack. MSTORE: Stores a 32-byte value to memory. For example, the opcode MSTORE stores a 32-byte value to memory. MSTORE8: Stores a single byte to memory. For example, the opcode MSTORE8 stores a single byte to memory. Control Flow Operations Control flow operations allow for controlling the flow of the program execution. Here are a few examples of control flow operations:\nJUMP: Jumps to a specific location in the code. For example, the opcode JUMP jumps to a specific location in the code. JUMPI: Jumps to a specific location in the code if the top item on the stack is non-zero. For example, the opcode JUMPI jumps to a specific location in the code if the top item on the stack is non-zero. JUMPDEST: Marks a destination for a jump instruction. For example, the opcode JUMPDEST marks a destination for a jump instruction. Assembly Example Let\u0026rsquo;s look at an example of how these opcodes can be used in assembly code:\n1 2 3 PUSH1 0x02 PUSH1 0x03 ADD In this example, we push the values 0x02 and 0x03 onto the stack using the PUSH1 opcode. We then use the ADD opcode to add the top two items on the stack and push the result onto the stack. The final result on the stack will be 0x05.\nIn conclusion, the Ethereum Virtual Machine (EVM) has a total of 256 opcodes that allow for various operations such as arithmetic, logic, and memory manipulation. These opcodes can be grouped into several categories based on\nWriting a toy EVM like virtual machine 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;math/big\u0026#34; ) type opcode byte const ( opPush1 opcode = iota opPush2 opAdd ) type vm struct { code []opcode pc int stack []*big.Int } func (v *vm) push(i *big.Int) { v.stack = append(v.stack, i) } func (v *vm) pop() *big.Int { if len(v.stack) == 0 { panic(\u0026#34;stack underflow\u0026#34;) } i := v.stack[len(v.stack)-1] v.stack = v.stack[:len(v.stack)-1] return i } func (v *vm) run() { for v.pc \u0026lt; len(v.code) { op := v.code[v.pc] v.pc++ switch op { case opPush1: // Read next byte as argument arg := new(big.Int).SetInt64(int64(v.code[v.pc])) v.pc++ v.push(arg) case opPush2: // Read next 2 bytes as argument arg := new(big.Int).SetUint64(uint64(v.code[v.pc])\u0026lt;\u0026lt;8 | uint64(v.code[v.pc+1])) v.pc += 2 v.push(arg) case opAdd: a := v.pop() b := v.pop() c := new(big.Int).Add(a, b) v.push(c) default: panic(fmt.Sprintf(\u0026#34;unknown opcode: %d\u0026#34;, op)) } } } func main() { // Push 1 and 2 onto the stack, then add them together code := []opcode{opPush1, 0x01, opPush2, 0x00, 0x02, opAdd} v := \u0026amp;vm{code: code} v.run() result := v.pop() fmt.Println(result.String()) // Output: 3 } Conclusion In this implementation, we define an opcode type to represent the different opcodes that our virtual machine can execute. We also define a vm struct to represent the state of the virtual machine, which includes the bytecode to be executed, the program counter (pc), and the stack.\nThe push and pop methods are used to manipulate the stack, while the run method executes the bytecode by iterating over the code and performing the appropriate operations for each opcode. In this example, we have implemented three opcodes: opPush1 and opPush2 for pushing one and two-byte arguments onto the stack, and opAdd for adding the top two items on the stack.\nFinally, we create a vm instance with some sample bytecode that pushes the values 1 and 2 onto the stack, and then adds them together. We then execute the bytecode using the run method and print the result, which should be 3.\nReferences https://ethereum.github.io/yellowpaper/paper.pdf https://github.com/crytic/evm-opcodes Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2022-11-18T00:00:00Z","image":"https://curiousstuff.eu/post/creating-a-tiny-ethereum-evm-in-go/markus-spiske-cvBBO4PzWPg-unsplash_hu8f621aa8ee10e1d64391cb3305ec689a_622039_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/creating-a-tiny-ethereum-evm-in-go/","title":"Creating a tiny Ethereum EVM in Go"},{"content":"I want to show you how source code analyzers works with a simple example. Let\u0026rsquo;s build an analyzer that will check if Solidity source files contains a floating pragma declaration or not. There are some steps we need to follow, such as finding or building a good Solidity grammar file, parse the input content, build a parse tree, process the tree, and finally, find issues. All the process is explained below.\nSolidity Language Grammar definition I will be using Solidity provided ANTLR grammar file, but you can use any other grammar file, like this one.\nopyright 2016-2019 Federico Bond \u0026lt;federicobond@gmail.com\u0026gt; // Licensed under the MIT license. See LICENSE file in the project root for details. grammar Solidity; sourceUnit : (pragmaDirective | importDirective | contractDefinition)* EOF ; pragmaDirective : \u0026#39;pragma\u0026#39; pragmaName pragmaValue \u0026#39;;\u0026#39; ; pragmaName : identifier ; pragmaValue : version | expression ; version : versionConstraint versionConstraint? ; versionOperator : \u0026#39;^\u0026#39; | \u0026#39;~\u0026#39; | \u0026#39;\u0026gt;=\u0026#39; | \u0026#39;\u0026gt;\u0026#39; | \u0026#39;\u0026lt;\u0026#39; | \u0026#39;\u0026lt;=\u0026#39; | \u0026#39;=\u0026#39; ; versionConstraint : versionOperator? VersionLiteral ; importDeclaration : identifier (\u0026#39;as\u0026#39; identifier)? ; importDirective : \u0026#39;import\u0026#39; StringLiteral (\u0026#39;as\u0026#39; identifier)? \u0026#39;;\u0026#39; | \u0026#39;import\u0026#39; (\u0026#39;*\u0026#39; | identifier) (\u0026#39;as\u0026#39; identifier)? \u0026#39;from\u0026#39; StringLiteral \u0026#39;;\u0026#39; | \u0026#39;import\u0026#39; \u0026#39;{\u0026#39; importDeclaration ( \u0026#39;,\u0026#39; importDeclaration )* \u0026#39;}\u0026#39; \u0026#39;from\u0026#39; StringLiteral \u0026#39;;\u0026#39; ; NatSpecSingleLine : (\u0026#39;///\u0026#39; .*? [\\r\\n]) + ; NatSpecMultiLine : \u0026#39;/**\u0026#39; .*? \u0026#39;*/\u0026#39; ; natSpec : NatSpecSingleLine | NatSpecMultiLine ; contractDefinition : natSpec? ( \u0026#39;contract\u0026#39; | \u0026#39;interface\u0026#39; | \u0026#39;library\u0026#39; ) identifier ( \u0026#39;is\u0026#39; inheritanceSpecifier (\u0026#39;,\u0026#39; inheritanceSpecifier )* )? \u0026#39;{\u0026#39; contractPart* \u0026#39;}\u0026#39; ; inheritanceSpecifier : userDefinedTypeName ( \u0026#39;(\u0026#39; expressionList? \u0026#39;)\u0026#39; )? ; contractPart : stateVariableDeclaration | usingForDeclaration | structDefinition | constructorDefinition | modifierDefinition | functionDefinition | eventDefinition | enumDefinition ; stateVariableDeclaration : typeName ( PublicKeyword | InternalKeyword | PrivateKeyword | ConstantKeyword )* identifier (\u0026#39;=\u0026#39; expression)? \u0026#39;;\u0026#39; ; usingForDeclaration : \u0026#39;using\u0026#39; identifier \u0026#39;for\u0026#39; (\u0026#39;*\u0026#39; | typeName) \u0026#39;;\u0026#39; ; structDefinition : \u0026#39;struct\u0026#39; identifier \u0026#39;{\u0026#39; ( variableDeclaration \u0026#39;;\u0026#39; (variableDeclaration \u0026#39;;\u0026#39;)* )? \u0026#39;}\u0026#39; ; constructorDefinition : \u0026#39;constructor\u0026#39; parameterList modifierList block ; modifierDefinition : \u0026#39;modifier\u0026#39; identifier parameterList? block ; modifierInvocation : identifier ( \u0026#39;(\u0026#39; expressionList? \u0026#39;)\u0026#39; )? ; functionDefinition : natSpec? \u0026#39;function\u0026#39; identifier? parameterList modifierList returnParameters? ( \u0026#39;;\u0026#39; | block ) ; returnParameters : \u0026#39;returns\u0026#39; parameterList ; modifierList : ( modifierInvocation | stateMutability | ExternalKeyword | PublicKeyword | InternalKeyword | PrivateKeyword )* ; eventDefinition : natSpec? \u0026#39;event\u0026#39; identifier eventParameterList AnonymousKeyword? \u0026#39;;\u0026#39; ; enumValue : identifier ; enumDefinition : \u0026#39;enum\u0026#39; identifier \u0026#39;{\u0026#39; enumValue? (\u0026#39;,\u0026#39; enumValue)* \u0026#39;}\u0026#39; ; parameterList : \u0026#39;(\u0026#39; ( parameter (\u0026#39;,\u0026#39; parameter)* )? \u0026#39;)\u0026#39; ; parameter : typeName storageLocation? identifier? ; eventParameterList : \u0026#39;(\u0026#39; ( eventParameter (\u0026#39;,\u0026#39; eventParameter)* )? \u0026#39;)\u0026#39; ; eventParameter : typeName IndexedKeyword? identifier? ; functionTypeParameterList : \u0026#39;(\u0026#39; ( functionTypeParameter (\u0026#39;,\u0026#39; functionTypeParameter)* )? \u0026#39;)\u0026#39; ; functionTypeParameter : typeName storageLocation? ; variableDeclaration : typeName storageLocation? identifier ; typeName : elementaryTypeName | userDefinedTypeName | mapping | typeName \u0026#39;[\u0026#39; expression? \u0026#39;]\u0026#39; | functionTypeName | \u0026#39;address\u0026#39; \u0026#39;payable\u0026#39; ; userDefinedTypeName : identifier ( \u0026#39;.\u0026#39; identifier )* ; mapping : \u0026#39;mapping\u0026#39; \u0026#39;(\u0026#39; elementaryTypeName \u0026#39;=\u0026gt;\u0026#39; typeName \u0026#39;)\u0026#39; ; functionTypeName : \u0026#39;function\u0026#39; functionTypeParameterList ( InternalKeyword | ExternalKeyword | stateMutability )* ( \u0026#39;returns\u0026#39; functionTypeParameterList )? ; storageLocation : \u0026#39;memory\u0026#39; | \u0026#39;storage\u0026#39; | \u0026#39;calldata\u0026#39;; stateMutability : PureKeyword | ConstantKeyword | ViewKeyword | PayableKeyword ; block : \u0026#39;{\u0026#39; statement* \u0026#39;}\u0026#39; ; statement : ifStatement | whileStatement | forStatement | block | inlineAssemblyStatement | doWhileStatement | continueStatement | breakStatement | returnStatement | throwStatement | emitStatement | simpleStatement ; expressionStatement : expression \u0026#39;;\u0026#39; ; ifStatement : \u0026#39;if\u0026#39; \u0026#39;(\u0026#39; expression \u0026#39;)\u0026#39; statement ( \u0026#39;else\u0026#39; statement )? ; whileStatement : \u0026#39;while\u0026#39; \u0026#39;(\u0026#39; expression \u0026#39;)\u0026#39; statement ; simpleStatement : ( variableDeclarationStatement | expressionStatement ) ; forStatement : \u0026#39;for\u0026#39; \u0026#39;(\u0026#39; ( simpleStatement | \u0026#39;;\u0026#39; ) ( expressionStatement | \u0026#39;;\u0026#39; ) expression? \u0026#39;)\u0026#39; statement ; inlineAssemblyStatement : \u0026#39;assembly\u0026#39; StringLiteral? assemblyBlock ; doWhileStatement : \u0026#39;do\u0026#39; statement \u0026#39;while\u0026#39; \u0026#39;(\u0026#39; expression \u0026#39;)\u0026#39; \u0026#39;;\u0026#39; ; continueStatement : \u0026#39;continue\u0026#39; \u0026#39;;\u0026#39; ; breakStatement : \u0026#39;break\u0026#39; \u0026#39;;\u0026#39; ; returnStatement : \u0026#39;return\u0026#39; expression? \u0026#39;;\u0026#39; ; throwStatement : \u0026#39;throw\u0026#39; \u0026#39;;\u0026#39; ; emitStatement : \u0026#39;emit\u0026#39; functionCall \u0026#39;;\u0026#39; ; variableDeclarationStatement : ( \u0026#39;var\u0026#39; identifierList | variableDeclaration | \u0026#39;(\u0026#39; variableDeclarationList \u0026#39;)\u0026#39; ) ( \u0026#39;=\u0026#39; expression )? \u0026#39;;\u0026#39;; variableDeclarationList : variableDeclaration? (\u0026#39;,\u0026#39; variableDeclaration? )* ; identifierList : \u0026#39;(\u0026#39; ( identifier? \u0026#39;,\u0026#39; )* identifier? \u0026#39;)\u0026#39; ; elementaryTypeName : \u0026#39;address\u0026#39; | \u0026#39;bool\u0026#39; | \u0026#39;string\u0026#39; | \u0026#39;var\u0026#39; | Int | Uint | \u0026#39;byte\u0026#39; | Byte | Fixed | Ufixed ; Int : \u0026#39;int\u0026#39; | \u0026#39;int8\u0026#39; | \u0026#39;int16\u0026#39; | \u0026#39;int24\u0026#39; | \u0026#39;int32\u0026#39; | \u0026#39;int40\u0026#39; | \u0026#39;int48\u0026#39; | \u0026#39;int56\u0026#39; | \u0026#39;int64\u0026#39; | \u0026#39;int72\u0026#39; | \u0026#39;int80\u0026#39; | \u0026#39;int88\u0026#39; | \u0026#39;int96\u0026#39; | \u0026#39;int104\u0026#39; | \u0026#39;int112\u0026#39; | \u0026#39;int120\u0026#39; | \u0026#39;int128\u0026#39; | \u0026#39;int136\u0026#39; | \u0026#39;int144\u0026#39; | \u0026#39;int152\u0026#39; | \u0026#39;int160\u0026#39; | \u0026#39;int168\u0026#39; | \u0026#39;int176\u0026#39; | \u0026#39;int184\u0026#39; | \u0026#39;int192\u0026#39; | \u0026#39;int200\u0026#39; | \u0026#39;int208\u0026#39; | \u0026#39;int216\u0026#39; | \u0026#39;int224\u0026#39; | \u0026#39;int232\u0026#39; | \u0026#39;int240\u0026#39; | \u0026#39;int248\u0026#39; | \u0026#39;int256\u0026#39; ; Uint : \u0026#39;uint\u0026#39; | \u0026#39;uint8\u0026#39; | \u0026#39;uint16\u0026#39; | \u0026#39;uint24\u0026#39; | \u0026#39;uint32\u0026#39; | \u0026#39;uint40\u0026#39; | \u0026#39;uint48\u0026#39; | \u0026#39;uint56\u0026#39; | \u0026#39;uint64\u0026#39; | \u0026#39;uint72\u0026#39; | \u0026#39;uint80\u0026#39; | \u0026#39;uint88\u0026#39; | \u0026#39;uint96\u0026#39; | \u0026#39;uint104\u0026#39; | \u0026#39;uint112\u0026#39; | \u0026#39;uint120\u0026#39; | \u0026#39;uint128\u0026#39; | \u0026#39;uint136\u0026#39; | \u0026#39;uint144\u0026#39; | \u0026#39;uint152\u0026#39; | \u0026#39;uint160\u0026#39; | \u0026#39;uint168\u0026#39; | \u0026#39;uint176\u0026#39; | \u0026#39;uint184\u0026#39; | \u0026#39;uint192\u0026#39; | \u0026#39;uint200\u0026#39; | \u0026#39;uint208\u0026#39; | \u0026#39;uint216\u0026#39; | \u0026#39;uint224\u0026#39; | \u0026#39;uint232\u0026#39; | \u0026#39;uint240\u0026#39; | \u0026#39;uint248\u0026#39; | \u0026#39;uint256\u0026#39; ; Byte : \u0026#39;bytes\u0026#39; | \u0026#39;bytes1\u0026#39; | \u0026#39;bytes2\u0026#39; | \u0026#39;bytes3\u0026#39; | \u0026#39;bytes4\u0026#39; | \u0026#39;bytes5\u0026#39; | \u0026#39;bytes6\u0026#39; | \u0026#39;bytes7\u0026#39; | \u0026#39;bytes8\u0026#39; | \u0026#39;bytes9\u0026#39; | \u0026#39;bytes10\u0026#39; | \u0026#39;bytes11\u0026#39; | \u0026#39;bytes12\u0026#39; | \u0026#39;bytes13\u0026#39; | \u0026#39;bytes14\u0026#39; | \u0026#39;bytes15\u0026#39; | \u0026#39;bytes16\u0026#39; | \u0026#39;bytes17\u0026#39; | \u0026#39;bytes18\u0026#39; | \u0026#39;bytes19\u0026#39; | \u0026#39;bytes20\u0026#39; | \u0026#39;bytes21\u0026#39; | \u0026#39;bytes22\u0026#39; | \u0026#39;bytes23\u0026#39; | \u0026#39;bytes24\u0026#39; | \u0026#39;bytes25\u0026#39; | \u0026#39;bytes26\u0026#39; | \u0026#39;bytes27\u0026#39; | \u0026#39;bytes28\u0026#39; | \u0026#39;bytes29\u0026#39; | \u0026#39;bytes30\u0026#39; | \u0026#39;bytes31\u0026#39; | \u0026#39;bytes32\u0026#39; ; Fixed : \u0026#39;fixed\u0026#39; | ( \u0026#39;fixed\u0026#39; [0-9]+ \u0026#39;x\u0026#39; [0-9]+ ) ; Ufixed : \u0026#39;ufixed\u0026#39; | ( \u0026#39;ufixed\u0026#39; [0-9]+ \u0026#39;x\u0026#39; [0-9]+ ) ; expression : expression (\u0026#39;++\u0026#39; | \u0026#39;--\u0026#39;) | \u0026#39;new\u0026#39; typeName | expression \u0026#39;[\u0026#39; expression \u0026#39;]\u0026#39; | expression \u0026#39;(\u0026#39; functionCallArguments \u0026#39;)\u0026#39; | expression \u0026#39;.\u0026#39; identifier | \u0026#39;(\u0026#39; expression \u0026#39;)\u0026#39; | (\u0026#39;++\u0026#39; | \u0026#39;--\u0026#39;) expression | (\u0026#39;+\u0026#39; | \u0026#39;-\u0026#39;) expression | (\u0026#39;after\u0026#39; | \u0026#39;delete\u0026#39;) expression | \u0026#39;!\u0026#39; expression | \u0026#39;~\u0026#39; expression | expression \u0026#39;**\u0026#39; expression | expression (\u0026#39;*\u0026#39; | \u0026#39;/\u0026#39; | \u0026#39;%\u0026#39;) expression | expression (\u0026#39;+\u0026#39; | \u0026#39;-\u0026#39;) expression | expression (\u0026#39;\u0026lt;\u0026lt;\u0026#39; | \u0026#39;\u0026gt;\u0026gt;\u0026#39;) expression | expression \u0026#39;\u0026amp;\u0026#39; expression | expression \u0026#39;^\u0026#39; expression | expression \u0026#39;|\u0026#39; expression | expression (\u0026#39;\u0026lt;\u0026#39; | \u0026#39;\u0026gt;\u0026#39; | \u0026#39;\u0026lt;=\u0026#39; | \u0026#39;\u0026gt;=\u0026#39;) expression | expression (\u0026#39;==\u0026#39; | \u0026#39;!=\u0026#39;) expression | expression \u0026#39;\u0026amp;\u0026amp;\u0026#39; expression | expression \u0026#39;||\u0026#39; expression | expression \u0026#39;?\u0026#39; expression \u0026#39;:\u0026#39; expression | expression (\u0026#39;=\u0026#39; | \u0026#39;|=\u0026#39; | \u0026#39;^=\u0026#39; | \u0026#39;\u0026amp;=\u0026#39; | \u0026#39;\u0026lt;\u0026lt;=\u0026#39; | \u0026#39;\u0026gt;\u0026gt;=\u0026#39; | \u0026#39;+=\u0026#39; | \u0026#39;-=\u0026#39; | \u0026#39;*=\u0026#39; | \u0026#39;/=\u0026#39; | \u0026#39;%=\u0026#39;) expression | primaryExpression ; primaryExpression : BooleanLiteral | numberLiteral | HexLiteral | StringLiteral | identifier (\u0026#39;[\u0026#39; \u0026#39;]\u0026#39;)? | TypeKeyword | tupleExpression | typeNameExpression (\u0026#39;[\u0026#39; \u0026#39;]\u0026#39;)? ; expressionList : expression (\u0026#39;,\u0026#39; expression)* ; nameValueList : nameValue (\u0026#39;,\u0026#39; nameValue)* \u0026#39;,\u0026#39;? ; nameValue : identifier \u0026#39;:\u0026#39; expression ; functionCallArguments : \u0026#39;{\u0026#39; nameValueList? \u0026#39;}\u0026#39; | expressionList? ; functionCall : expression \u0026#39;(\u0026#39; functionCallArguments \u0026#39;)\u0026#39; ; assemblyBlock : \u0026#39;{\u0026#39; assemblyItem* \u0026#39;}\u0026#39; ; assemblyItem : identifier | assemblyBlock | assemblyExpression | assemblyLocalDefinition | assemblyAssignment | assemblyStackAssignment | labelDefinition | assemblySwitch | assemblyFunctionDefinition | assemblyFor | assemblyIf | BreakKeyword | ContinueKeyword | subAssembly | numberLiteral | StringLiteral | HexLiteral ; assemblyExpression : assemblyCall | assemblyLiteral ; assemblyCall : ( \u0026#39;return\u0026#39; | \u0026#39;address\u0026#39; | \u0026#39;byte\u0026#39; | identifier ) ( \u0026#39;(\u0026#39; assemblyExpression? ( \u0026#39;,\u0026#39; assemblyExpression )* \u0026#39;)\u0026#39; )? ; assemblyLocalDefinition : \u0026#39;let\u0026#39; assemblyIdentifierOrList ( \u0026#39;:=\u0026#39; assemblyExpression )? ; assemblyAssignment : assemblyIdentifierOrList \u0026#39;:=\u0026#39; assemblyExpression ; assemblyIdentifierOrList : identifier | \u0026#39;(\u0026#39; assemblyIdentifierList \u0026#39;)\u0026#39; ; assemblyIdentifierList : identifier ( \u0026#39;,\u0026#39; identifier )* ; assemblyStackAssignment : \u0026#39;=:\u0026#39; identifier ; labelDefinition : identifier \u0026#39;:\u0026#39; ; assemblySwitch : \u0026#39;switch\u0026#39; assemblyExpression assemblyCase* ; assemblyCase : \u0026#39;case\u0026#39; assemblyLiteral assemblyBlock | \u0026#39;default\u0026#39; assemblyBlock ; assemblyFunctionDefinition : \u0026#39;function\u0026#39; identifier \u0026#39;(\u0026#39; assemblyIdentifierList? \u0026#39;)\u0026#39; assemblyFunctionReturns? assemblyBlock ; assemblyFunctionReturns : ( \u0026#39;-\u0026gt;\u0026#39; assemblyIdentifierList ) ; assemblyFor : \u0026#39;for\u0026#39; ( assemblyBlock | assemblyExpression ) assemblyExpression ( assemblyBlock | assemblyExpression ) assemblyBlock ; assemblyIf : \u0026#39;if\u0026#39; assemblyExpression assemblyBlock ; assemblyLiteral : StringLiteral | DecimalNumber | HexNumber | HexLiteral ; subAssembly : \u0026#39;assembly\u0026#39; identifier assemblyBlock ; tupleExpression : \u0026#39;(\u0026#39; ( expression? ( \u0026#39;,\u0026#39; expression? )* ) \u0026#39;)\u0026#39; | \u0026#39;[\u0026#39; ( expression ( \u0026#39;,\u0026#39; expression )* )? \u0026#39;]\u0026#39; ; typeNameExpression : elementaryTypeName | userDefinedTypeName ; numberLiteral : (DecimalNumber | HexNumber) NumberUnit? ; identifier : (\u0026#39;from\u0026#39; | \u0026#39;calldata\u0026#39; | Identifier) ; VersionLiteral : [0-9]+ \u0026#39;.\u0026#39; [0-9]+ \u0026#39;.\u0026#39; [0-9]+ ; BooleanLiteral : \u0026#39;true\u0026#39; | \u0026#39;false\u0026#39; ; DecimalNumber : ( DecimalDigits | (DecimalDigits? \u0026#39;.\u0026#39; DecimalDigits) ) ( [eE] DecimalDigits )? ; fragment DecimalDigits : [0-9] ( \u0026#39;_\u0026#39;? [0-9] )* ; HexNumber : \u0026#39;0\u0026#39; [xX] HexDigits ; fragment HexDigits : HexCharacter ( \u0026#39;_\u0026#39;? HexCharacter )* ; NumberUnit : \u0026#39;wei\u0026#39; | \u0026#39;szabo\u0026#39; | \u0026#39;finney\u0026#39; | \u0026#39;ether\u0026#39; | \u0026#39;seconds\u0026#39; | \u0026#39;minutes\u0026#39; | \u0026#39;hours\u0026#39; | \u0026#39;days\u0026#39; | \u0026#39;weeks\u0026#39; | \u0026#39;years\u0026#39; ; HexLiteral : \u0026#39;hex\u0026#39; (\u0026#39;\u0026#34;\u0026#39; HexPair* \u0026#39;\u0026#34;\u0026#39; | \u0026#39;\\\u0026#39;\u0026#39; HexPair* \u0026#39;\\\u0026#39;\u0026#39;) ; fragment HexPair : HexCharacter HexCharacter ; fragment HexCharacter : [0-9A-Fa-f] ; ReservedKeyword : \u0026#39;abstract\u0026#39; | \u0026#39;after\u0026#39; | \u0026#39;case\u0026#39; | \u0026#39;catch\u0026#39; | \u0026#39;default\u0026#39; | \u0026#39;final\u0026#39; | \u0026#39;in\u0026#39; | \u0026#39;inline\u0026#39; | \u0026#39;let\u0026#39; | \u0026#39;match\u0026#39; | \u0026#39;null\u0026#39; | \u0026#39;of\u0026#39; | \u0026#39;relocatable\u0026#39; | \u0026#39;static\u0026#39; | \u0026#39;switch\u0026#39; | \u0026#39;try\u0026#39; | \u0026#39;typeof\u0026#39; ; AnonymousKeyword : \u0026#39;anonymous\u0026#39; ; BreakKeyword : \u0026#39;break\u0026#39; ; ConstantKeyword : \u0026#39;constant\u0026#39; ; ContinueKeyword : \u0026#39;continue\u0026#39; ; ExternalKeyword : \u0026#39;external\u0026#39; ; IndexedKeyword : \u0026#39;indexed\u0026#39; ; InternalKeyword : \u0026#39;internal\u0026#39; ; PayableKeyword : \u0026#39;payable\u0026#39; ; PrivateKeyword : \u0026#39;private\u0026#39; ; PublicKeyword : \u0026#39;public\u0026#39; ; PureKeyword : \u0026#39;pure\u0026#39; ; TypeKeyword : \u0026#39;type\u0026#39; ; ViewKeyword : \u0026#39;view\u0026#39; ; Identifier : IdentifierStart IdentifierPart* ; fragment IdentifierStart : [a-zA-Z$_] ; fragment IdentifierPart : [a-zA-Z0-9$_] ; StringLiteral : \u0026#39;\u0026#34;\u0026#39; DoubleQuotedStringCharacter* \u0026#39;\u0026#34;\u0026#39; | \u0026#39;\\\u0026#39;\u0026#39; SingleQuotedStringCharacter* \u0026#39;\\\u0026#39;\u0026#39; ; fragment DoubleQuotedStringCharacter : ~[\u0026#34;\\r\\n\\\\] | (\u0026#39;\\\\\u0026#39; .) ; fragment SingleQuotedStringCharacter : ~[\u0026#39;\\r\\n\\\\] | (\u0026#39;\\\\\u0026#39; .) ; WS : [ \\t\\r\\n\\u000C]+ -\u0026gt; skip ; COMMENT : \u0026#39;/*\u0026#39; .*? \u0026#39;*/\u0026#39; -\u0026gt; channel(HIDDEN) ; LINE_COMMENT : \u0026#39;//\u0026#39; ~[\\r\\n]* -\u0026gt; channel(HIDDEN) ; Once we have the grammar file, the next step is to build the code for Go. You can find a grammar file I used at https://github.com/ethereum/solidity/tree/develop/docs/grammar\nBuilding the grammar To build the grammar you need to download antlr-4.9.3-complete.jar tool and have JRE installed in your computer.\n1 java -jar \u0026#39;antlr-4.9.3-complete.jar\u0026#39; -Dlanguage=Go -listener -visitor -o parser ./SolidityLexer.g4 1 java -jar \u0026#39;antlr-4.9.3-complete.jar\u0026#39; -Dlanguage=Go -listener -visitor -o parser ./Solidity.g4 NOTE: it is required to do following replacements in autogenerated grammar go code:\nreplace: type=typeName with varType=typeName replace: String with StringLiteral Adding test data To include some test data to evaluate the detector, we need to define some Solidity code examples. The easiest way is to download some opensource solidity project from Github. In this case, I choose to use code snippets from https://solidity-by-example.org/first-app/. Our test example will be:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // SPDX-License-Identifier: MIT pragma solidity ^0.8.13; contract Counter { uint public count; // Function to get the current count function get() public view returns (uint) { return count; } // Function to increment count by 1 function inc() public { count += 1; } // Function to decrement count by 1 function dec() public { // This function will fail if count = 0 count -= 1; } } We copy the content to a local first-app.sol file and store the content in our project ./testdata dir.\nBuilding our Test before the implementation. This is something known as TDD or Test Driven Development, in where one of the foundations is to build your code based on test collection data. In this scenarios, some test are required to be designed first, and then, the code is developed so they are all passed successfully.\nIn my case, I write the following test and basic empty function CheckVersion that will hold all the complexity.\n1 2 3 4 5 6 7 8 9 10 11 func TestDetector(t *testing.T) { t.Run(\u0026#34;first-app-example\u0026#34;, func(t *testing.T) { data, err := ioutil.ReadFile(\u0026#34;testdata/first-app.sol\u0026#34;) assert.NoError(t, err) assert.NotNil(t, data) result, err2 := CheckVersion(data) assert.NoError(t, err2) assert.NotNil(t, result) assert.True(t, result.Errored) }) } 1 2 3 4 func CheckVersion(code []byte) (VersionStatus, error) { var v VersionStatus return v, nil } If we run the test with go test, it should fail since we don\u0026rsquo;t have any valid code yet.\n1 2 3 4 5 6 7 8 9 --- FAIL: TestDetector (0.00s) --- FAIL: TestDetector/first-app-example (0.00s) detector_test.go:19: Error Trace: /home/r00t/go/src/github.com/zerjioang/solidity-version-check/detector_test.go:19 Error: Should be true Test: TestDetector/first-app-example FAIL exit status 1 FAIL github.com/zerjioang/solidity-version-check 0.010s Building our result data model After the execution of the algorithm, the function CheckVersion should return some information about detection process. That information will be handled by struct VersionStatus defined as\n1 2 3 type VersionStatus struct { Errored bool `json:\u0026#34;errored,omitempty\u0026#34;` } Adding basic ANTLR code to our function Now that we have already defined the function input and output parameters as\n1 func CheckVersion(code []byte) (VersionStatus, error) is time to build the body. According to ANTLR documentation and some visited blogs out there like GopherAcademy, the basic steps to include are:\nRead input file content Build the lexer Build the token stream for lexer data Build a parser for token stream data Build a event listener for the parser Walk the parser tree Previous steps, in code, are:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 func CheckVersion(code []byte) (VersionStatus, error) { var v VersionStatus // Setup the input is := antlr.NewInputStream(string(code)) // Create the Lexer lexer := solidity.NewSolidityLexer(is) stream := antlr.NewCommonTokenStream(lexer, antlr.TokenDefaultChannel) // Create the Parser p := solidity.NewSolidityParser(stream) // Finally parse the expression var listener solidity.CustomSolidityListener antlr.ParseTreeWalkerDefault.Walk(\u0026amp;listener, p.SourceUnit()) return v, nil } So, at this point the function CheckVersion has support to read and parse the input data according to Solidity provided grammar and walk the parse tree. But still, this is not enough to pass the test\n1 2 3 4 5 6 detector_test.go:19: Error Trace: /home/r00t/go/src/github.com/zerjioang/solidity-version-check/detector_test.go:19 Error: Should be true Test: TestDetector/first-app-example --- FAIL: TestDetector (0.01s) --- FAIL: TestDetector/first-app-example (0.01s) Detecting Unlocked Compiler Versions Programmatically This is where all our logic needs to be implemented. We need to find the right spot in the listener to implement this feature so that the algorithm is able to implement a detection mechanism and trigger some alarms. This steps requires to review and understand the grammar file. After some digging, we found that best point for our detection is this rule: the pragmaDirective.\n1 pragmaDirective: Pragma PragmaToken+ PragmaSemicolon; For this purpose, we implement a custom event logic in the pragmaDirective rule.\n1 2 3 4 5 6 // EnterPragmaDirective is called when production pragmaDirective is entered. func (s *CustomSolidityListener) EnterPragmaDirective(ctx *PragmaDirectiveContext) { // 1 read the content of the pragma // 2 check if its unlocked // 3 trigger an alert } Depending on the information we need to read, we need to call one method or another. For example:\nctx.GetText(): returns pragma solidity ^0.8.13; ctx.PragmaToken(0): returns the first child of type PragmaToken ctx.PragmaToken(0).GetText(): returns solidity ^0.8.13; So with these tips in mind, you can now build your own simple if-else conditional to trigger an alert when ^solidity is found in the pragma declaration.\nUnlocked compiler version alert reporting After implementing the alert detection for unlocked pragmas, we can now report to the user. I choose to report via stdout as follows, but you can choose whatever method you want, for example: encoding result as JSON and exposing it to an API, sending an automated email notification, telegram message, etc.\n1 2 3 4 5 6 Unlocked Compiler Version Detected ---------------------------------- Affected line (L2) : pragma solidity ^0.8.13; Suggested fix : pragma solidity 0.8.13; Confidence : Very High Impact : Informational As you see, I also added a fix suggestion for the detected alert, which can help newcomers to solve the issue rapidly. Finally, we need to run the test again to see if it pass.\n1 2 3 4 5 6 7 8 9 Unlocked Compiler Version Detected ---------------------------------- Affected line (L2) : pragma solidity ^0.8.13; Suggested fix : pragma solidity 0.8.13; Confidence : Very High Impact : Informational PASS ok github.com/zerjioang/solidity-version-check 0.026s And as always, the process needs to be fast. In this case, only 0.026 seconds were required for whole process.\nConclusion I introduced you an easy workflow to start detecting issues in any programming language by just inspecing the source code structure by means of a parse tree evaluation. Obviously, this educational example has low complexity but in the same way, more complex detectors or source code analyzers can be built to trigger alarms on more complex bugs.\nReferences https://www.antlr.org/ https://blog.gopheracademy.com/advent-2017/parsing-with-antlr4-and-go/ Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2022-08-07T00:00:00Z","image":"https://curiousstuff.eu/post/autodetecting-unlocked-compiler-versions-in-solidity/amador-loureiro-BVyNlchWqzs-unsplash_hu4fe5605a3e711faaadae5e66be26e222_603197_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/autodetecting-unlocked-compiler-versions-in-solidity/","title":"Autodetecting Unlocked Compiler Versions in Solidity"},{"content":"For this experiment, I choose to test the Crytic tool called evm_cfg_builder which is opensource and is available at https://github.com/crytic/evm_cfg_builder.\nThe next step, is to find a contract to analyze and see how it works. What a better way to try it out than using their own example contracts.\nFinding a contract to analyze The source code is extracted from evm-cfg-builder at https://github.com/crytic/evm_cfg_builder/blob/master/examples/token.sol\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 // from https://github.com/ConsenSys/Tokens/blob/fdf687c69d998266a95f15216b1955a4965a0a6d/contracts/eip20/ pragma solidity ^0.4.25; contract EIP20Interface { /* This is a slight change to the ERC20 base standard. function totalSupply() constant returns (uint256 supply); is replaced with: uint256 public totalSupply; This automatically creates a getter function for the totalSupply. This is moved to the base contract since public getter functions are not currently recognised as an implementation of the matching abstract function by the compiler. */ /// total amount of tokens uint256 public totalSupply; /// @param _owner The address from which the balance will be retrieved /// @return The balance function balanceOf(address _owner) public view returns (uint256 balance); /// @notice send `_value` token to `_to` from `msg.sender` /// @param _to The address of the recipient /// @param _value The amount of token to be transferred /// @return Whether the transfer was successful or not function transfer(address _to, uint256 _value) public returns (bool success); /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from` /// @param _from The address of the sender /// @param _to The address of the recipient /// @param _value The amount of token to be transferred /// @return Whether the transfer was successful or not function transferFrom(address _from, address _to, uint256 _value) public returns (bool success); /// @notice `msg.sender` approves `_spender` to spend `_value` tokens /// @param _spender The address of the account able to transfer the tokens /// @param _value The amount of tokens to be approved for transfer /// @return Whether the approval was successful or not function approve(address _spender, uint256 _value) public returns (bool success); /// @param _owner The address of the account owning tokens /// @param _spender The address of the account able to transfer the tokens /// @return Amount of remaining tokens allowed to spent function allowance(address _owner, address _spender) public view returns (uint256 remaining); // solhint-disable-next-line no-simple-event-func-name event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); } contract EIP20 is EIP20Interface { uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address =\u0026gt; uint256) public balances; mapping (address =\u0026gt; mapping (address =\u0026gt; uint256)) public allowed; /* NOTE: The following variables are OPTIONAL vanities. One does not have to include them. They allow one to customise the token contract \u0026amp; in no way influences the core functionality. Some wallets/interfaces might not even bother to look at this information. */ string public name; //fancy name: eg Simon Bucks uint8 public decimals; //How many decimals to show. string public symbol; //An identifier: eg SBX function EIP20( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { balances[msg.sender] = _initialAmount; // Give the creator all initial tokens totalSupply = _initialAmount; // Update total supply name = _tokenName; // Set the name for display purposes decimals = _decimalUnits; // Amount of decimals for display purposes symbol = _tokenSymbol; // Set the symbol for display purposes } function transfer(address _to, uint256 _value) public returns (bool success) { require(balances[msg.sender] \u0026gt;= _value); balances[msg.sender] -= _value; balances[_to] += _value; emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars return true; } function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { uint256 allowance = allowed[_from][msg.sender]; require(balances[_from] \u0026gt;= _value \u0026amp;\u0026amp; allowance \u0026gt;= _value); balances[_to] += _value; balances[_from] -= _value; if (allowance \u0026lt; MAX_UINT256) { allowed[_from][msg.sender] -= _value; } emit Transfer(_from, _to, _value); //solhint-disable-line indent, no-unused-vars return true; } function balanceOf(address _owner) public view returns (uint256 balance) { return balances[_owner]; } function approve(address _spender, uint256 _value) public returns (bool success) { allowed[msg.sender][_spender] = _value; emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars return true; } function allowance(address _owner, address _spender) public view returns (uint256 remaining) { return allowed[_owner][_spender]; } } Getting the compiled code version The source code is based on previous example and it is based on https://github.com/crytic/evm_cfg_builder/blob/master/examples/token-runtime.evm\n1 0x6080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100b4578063095ea7b31461014457806318160ddd146101a957806323b872dd146101d457806327e235e314610259578063313ce567146102b05780635c658165146102e157806370a082311461035857806395d89b41146103af578063a9059cbb1461043f578063dd62ed3e146104a4575b600080fd5b3480156100c057600080fd5b506100c961051b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101095780820151818401526020810190506100ee565b50505050905090810190601f1680156101365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015057600080fd5b5061018f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105b9565b604051808215151515815260200191505060405180910390f35b3480156101b557600080fd5b506101be6106ab565b6040518082815260200191505060405180910390f35b3480156101e057600080fd5b5061023f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106b1565b604051808215151515815260200191505060405180910390f35b34801561026557600080fd5b5061029a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061094b565b6040518082815260200191505060405180910390f35b3480156102bc57600080fd5b506102c5610963565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102ed57600080fd5b50610342600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610976565b6040518082815260200191505060405180910390f35b34801561036457600080fd5b50610399600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061099b565b6040518082815260200191505060405180910390f35b3480156103bb57600080fd5b506103c46109e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104045780820151818401526020810190506103e9565b50505050905090810190601f1680156104315780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561044b57600080fd5b5061048a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a82565b604051808215151515815260200191505060405180910390f35b3480156104b057600080fd5b50610505600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bdb565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105b15780601f10610586576101008083540402835291602001916105b1565b820191906000526020600020905b81548152906001019060200180831161059457829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b600080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156107825750828110155b151561078d57600080fd5b82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110156108da5782600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60016020528060005260406000206000915090505481565b600460009054906101000a900460ff1681565b6002602052816000526040600020602052806000526040600020600091509150505481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a7a5780601f10610a4f57610100808354040283529160200191610a7a565b820191906000526020600020905b815481529060010190602001808311610a5d57829003601f168201915b505050505081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610ad257600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050929150505600a165627a7a7230582076ce5edca0cb79a34f44093c5ee1fcd5fadde8c358ba33d53c447da4f1d4e7ef0029 Setting up the context Before running the evm_cfg_builder tool, we have some requirements to met.\n1 virtualenv -p /usr/bin/python3.6 venv 1 2 3 4 5 Running virtualenv with interpreter /usr/bin/python3.6 Using base prefix \u0026#39;/usr\u0026#39; New python executable in /tmp/cfg_test/evm_cfg_builder/examples/venv/bin/python3.6 Also creating executable in /tmp/cfg_test/evm_cfg_builder/examples/venv/bin/python Installing setuptools, pip, wheel...done. Activate the virtualenv 1 source venv/bin/activate Installing EVM CFG Builder With the virtualenv activated, install the crytic evm-cfg-builder tool\n1 pip3 install evm-cfg-builder A success installation process will download and setup the required dependencies of the toolkit\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 WARNING: pip is being invoked by an old script wrapper. This will fail in a future version of pip. Please see https://github.com/pypa/pip/issues/5599 for advice on fixing the underlying issue. To avoid this problem you can invoke Python with \u0026#39;-m pip\u0026#39; instead of running pip directly. Defaulting to user installation because normal site-packages is not writeable Collecting evm-cfg-builder Downloading evm-cfg-builder-0.3.1.tar.gz (1.3 MB) |████████████████████████████████| 1.3 MB 1.3 MB/s Preparing metadata (setup.py) ... done Collecting crytic-compile\u0026gt;=0.1.13 Downloading crytic_compile-0.2.3-py3-none-any.whl (87 kB) |████████████████████████████████| 87 kB 3.8 MB/s Collecting pyevmasm\u0026gt;=0.1.1 Downloading pyevmasm-0.2.3-py3-none-any.whl (15 kB) Collecting pysha3\u0026gt;=1.0.2 Downloading pysha3-1.0.2-cp36-cp36m-manylinux1_x86_64.whl (127 kB) |████████████████████████████████| 127 kB 2.9 MB/s Collecting future Downloading future-0.18.2.tar.gz (829 kB) |████████████████████████████████| 829 kB 3.0 MB/s Preparing metadata (setup.py) ... done Building wheels for collected packages: evm-cfg-builder, future Building wheel for evm-cfg-builder (setup.py) ... done Created wheel for evm-cfg-builder: filename=evm_cfg_builder-0.3.1-py3-none-any.whl size=1266352 sha256=728c18abb3c9bc88187114ee252bc2083171fd0c89b354497c27f893e7e6214d Stored in directory: /home/r00t/.cache/pip/wheels/79/61/a6/44d291f111ea801eb83cd667d0c049f605d054c8ad8c065aa4 Building wheel for future (setup.py) ... done Created wheel for future: filename=future-0.18.2-py3-none-any.whl size=493275 sha256=fd0110fe805d02f9ce1c0c91312dbaced731711b64f1c24245794d5cc667bd7e Stored in directory: /home/r00t/.cache/pip/wheels/6e/9c/ed/4499c9865ac1002697793e0ae05ba6be33553d098f3347fb94 Successfully built evm-cfg-builder future Installing collected packages: pysha3, future, pyevmasm, crytic-compile, evm-cfg-builder WARNING: The scripts futurize and pasteurize are installed in \u0026#39;/home/r00t/.local/bin\u0026#39; which is not on PATH. Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location. WARNING: The script evmasm is installed in \u0026#39;/home/r00t/.local/bin\u0026#39; which is not on PATH. Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location. WARNING: The script crytic-compile is installed in \u0026#39;/home/r00t/.local/bin\u0026#39; which is not on PATH. Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location. WARNING: The script evm-cfg-builder is installed in \u0026#39;/home/r00t/.local/bin\u0026#39; which is not on PATH. Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location. Successfully installed crytic-compile-0.2.3 evm-cfg-builder-0.3.1 future-0.18.2 pyevmasm-0.2.3 pysha3-1.0.2 Run the crytic evm-cfg-builder To launch the evm-cfg-builder tool, a one line command is needed.\n1 evm-cfg-builder --export-dot . token-runtime.evm The crytic evm-cfg-builder output in this analysis is shown below\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 INFO:evm-cfg-builder:Analyze token-runtime.evm INFO:evm-cfg-builder:_fallback, 1 #bbs , payable,view,pure INFO:evm-cfg-builder:name(), 10 #bbs , view INFO:evm-cfg-builder:approve(address,uint256), 4 #bbs INFO:evm-cfg-builder:totalSupply(), 4 #bbs , view INFO:evm-cfg-builder:transferFrom(address,address,uint256), 10 #bbs INFO:evm-cfg-builder:balances(address), 4 #bbs , view INFO:evm-cfg-builder:decimals(), 4 #bbs , view INFO:evm-cfg-builder:allowed(address,address), 4 #bbs , view INFO:evm-cfg-builder:balanceOf(address), 4 #bbs , view INFO:evm-cfg-builder:symbol(), 10 #bbs , view INFO:evm-cfg-builder:transfer(address,uint256), 6 #bbs INFO:evm-cfg-builder:allowance(address,address), 4 #bbs , view INFO:evm-cfg-builder:_dispatcher, 12 #bbs ERROR:evm-cfg-builder:Missing branches name():0x5b8 ERROR:evm-cfg-builder:Missing branches approve(address,uint256):0x6aa ERROR:evm-cfg-builder:Missing branches totalSupply():0x6b0 ERROR:evm-cfg-builder:Missing branches transferFrom(address,address,uint256):0x94a ERROR:evm-cfg-builder:Missing branches balances(address):0x962 ERROR:evm-cfg-builder:Missing branches decimals():0x975 ERROR:evm-cfg-builder:Missing branches allowed(address,address):0x99a ERROR:evm-cfg-builder:Missing branches balanceOf(address):0x9e3 ERROR:evm-cfg-builder:Missing branches symbol():0xa81 ERROR:evm-cfg-builder:Missing branches transfer(address,uint256):0xbda ERROR:evm-cfg-builder:Missing branches allowance(address,address):0xc61 Output analysis Since we configure evm-cfg-builder analysis to generate Graphviz .dot file with the option --export-dot, the files are created in the same directory as our source code. We can find the FULL graph and a file representing each function in the code\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 -rw-rw-r-- 1 r00t r00t 1,5K jul 16 16:34 \u0026#39;token-runtime.evm_allowance(address,address).dot\u0026#39; -rw-rw-r-- 1 r00t r00t 1,2K jul 16 16:34 \u0026#39;token-runtime.evm_allowed(address,address).dot\u0026#39; -rw-rw-r-- 1 r00t r00t 2,0K jul 16 16:34 \u0026#39;token-runtime.evm_approve(address,uint256).dot\u0026#39; -rw-rw-r-- 1 r00t r00t 1,1K jul 16 16:34 \u0026#39;token-runtime.evm_balanceOf(address).dot\u0026#39; -rw-rw-r-- 1 r00t r00t 847 jul 16 16:34 \u0026#39;token-runtime.evm_balances(address).dot\u0026#39; -rw-rw-r-- 1 r00t r00t 477 jul 16 16:34 \u0026#39;token-runtime.evm_decimals().dot\u0026#39; -rw-rw-r-- 1 r00t r00t 1,9K jul 16 16:34 token-runtime.evm__dispatcher.dot -rw-rw-r-- 1 r00t r00t 75 jul 16 16:34 token-runtime.evm__fallback.dot -rw-rw-r-- 1 r00t r00t 25K jul 16 16:34 token-runtime.evm_FULL_GRAPH.dot -rw-rw-r-- 1 r00t r00t 2,0K jul 16 16:34 \u0026#39;token-runtime.evm_name().dot\u0026#39; -rw-rw-r-- 1 r00t r00t 2,0K jul 16 16:34 \u0026#39;token-runtime.evm_symbol().dot\u0026#39; -rw-rw-r-- 1 r00t r00t 360 jul 16 16:34 \u0026#39;token-runtime.evm_totalSupply().dot\u0026#39; -rw-rw-r-- 1 r00t r00t 2,8K jul 16 16:34 \u0026#39;token-runtime.evm_transfer(address,uint256).dot\u0026#39; -rw-rw-r-- 1 r00t r00t 4,8K jul 16 16:34 \u0026#39;token-runtime.evm_transferFrom(address,address,uint256).dot\u0026#39; Measure the time In this example, for a contract with 112 source code lines and 6431 bytes in compiled code, the output analysis time is 0.81s. Quite fast!\n1 evm-cfg-builder --export-dot . token-runtime.evm 0,75s user 0,06s system 100% cpu 0,811 total Sample views of created graphs Some images of the output analysis. Enjoy.\nGraph of the allowance() function Graph of allowance function Graph of the balanceof(address) function Graph of balanceOf function Graph of the decimals() function Graph of decimals function Graph of the dispatcher() function Graph of built-in dispatcher function Graph of the fallback() function Graph of fallback function Graph of the totalSupply() function Graph of totalSupply function Graph of the transferFrom() function Graph of transferFrom function Conclusion The Crytic evm-cfg-builder tool is one of the available ways to convert the compiled code into a visual representation. However, it still provides a very basic overview of the smart contract code blocks without applying any of the available optimizations to final graph result. As a consecuence, the final graph contains more edges, nodes and overall complexity is increased.\nReferences https://pypi.org/project/evm-cfg-builder https://github.com/crytic/evm_cfg_builder https://docs.python.org/3/library/venv.html http://viz-js.com Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2022-08-06T00:00:00Z","image":"https://curiousstuff.eu/post/evm-bytecode-to-graph-using-crytic-cfg-builder/9ac41e80-292e-11ea-8857-b2e749a2d588_hu5020b9175096663a4557e5a5d9466ba1_1009103_120x120_fill_box_smart1_3.png","permalink":"https://curiousstuff.eu/post/evm-bytecode-to-graph-using-crytic-cfg-builder/","title":"EVM bytecode to Graph using Crytic CFG Builder"},{"content":"In a previous post, Part 1: Building Ethereum EVM decompiler from scratch. Getting OPCODEs, I basically explained how EVM bytecode could be decoded from hexadecimal (0x...) format to some sort of assembly instructions. To make a little recap, we were able to convert input data from\n1 0x363d3d373d3d3d363d73e38f942db7a1b4213d6213f70c499b59287b01f15af43d82803e903d91602b57fd5bf3 to EVM assembly instructions like\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 0x0000 CALLDATASIZE 0x0001 RETURNDATASIZE 0x0002 RETURNDATASIZE 0x0003 CALLDATACOPY 0x0004 RETURNDATASIZE 0x0005 RETURNDATASIZE 0x0006 RETURNDATASIZE 0x0007 CALLDATASIZE 0x0008 RETURNDATASIZE 0x0009 PUSH20 0xE38F942DB7A1B4213D6213F70C499B59287B01F1 0x001E GAS 0x001F DELEGATECALL 0x0020 RETURNDATASIZE 0x0021 DUP3 0x0022 DUP1 0x0023 RETURNDATACOPY 0x0024 SWAP1 0x0025 RETURNDATASIZE 0x0026 SWAP2 0x0027 PUSH1 0x2B 0x0029 JUMPI 0x002A REVERT 0x002B JUMPDEST 0x002C RETURN Example: Proxy contract taken from Ethereum Mainnet at address 0x3cdd26204e114c17823d82180e5ca3f299f18d22. View at Etherscan\nBasic Code Block identification in EVM bytecode According to Ethersolve paper, code blocks is defined as:\nA basic block is a sequence of opcodes which are executed consecutively between a jump target and a jump instruction, without any other instruction that alters the flow of control. Thus, opcodes that alter the control flow of the program divide the code into basic blocks. Opcodes JUMP, JUMPI, STOP, REVERT, RETURN, INVALID, SELFDESTRUCT mark the end of a basic block, whereas JUMPDEST marks the beginning of a new basic block.\nSo, the code block identification algorithm should be as simpler as the one described below.\nPseudocode alert\nDo not copy and paste following Go snippet, its just a pseudocode displayed as reference. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 blocks []Block var currentBlock Block for { opcode := readOpcode() // append instruction to code block currentBlock.Add(opcode) switch opcode { case JUMP, JUMPI, STOP, REVERT, RETURN, INVALID, SELFDESTRUCT: // code block ends blocks = append(blocks, currentBlock) case JUMPDEST: // code block starts currentBlock = Block{} } } Sadly, this paper implementation fails on contract bytecodes that do not contain flow alteration instructions, and thus, no JUMPDEST instructions are required. For example, minimal contracts, proxy contracts, etc.\nTesting the code block identification algorithm For testing purposes, we will evaluate our Code Block Identification algorithm with the previous proxy contract and with some random top 10 ERC20 contract.\nProxy contract code blocks Total Blocks: 3 Extraction time: 80.764µs (including sending data to stdout for printing) Extraction time with no stdout: 17.33µs Result 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 label_0x0000 [0x0000] CALLDATASIZE [0x0001] RETURNDATASIZE [0x0002] RETURNDATASIZE [0x0003] CALLDATACOPY [0x0004] RETURNDATASIZE [0x0005] RETURNDATASIZE [0x0006] RETURNDATASIZE [0x0007] CALLDATASIZE [0x0008] RETURNDATASIZE [0x0009] PUSH20 0xE38F942DB7A1B4213D6213F70C499B59287B01F1 [0x001E] GAS [0x001F] DELEGATECALL [0x0020] RETURNDATASIZE [0x0021] DUP3 [0x0022] DUP1 [0x0023] RETURNDATACOPY [0x0024] SWAP1 [0x0025] RETURNDATASIZE [0x0026] SWAP2 [0x0027] PUSH1 0x2B [0x0029] JUMPI label_0x002A [0x002A] REVERT label_0x002B [0x002B] JUMPDEST [0x002C] RETURN DAI ERC20 contract code blocks Total Blocks: 187 Extraction time: 5.257476ms (including sending data to stdout for printing) Extraction time with no stdout: 472.388µs Note that constructor bytecode is not considered for code block extraction. The contructor code below was removed before running the algorithm. 608060405234801561001057600080fd5b506040516120d33803806120d38339818101604052602081101561003357600080fd5b810190808051906020019092919050505060016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550604051808061208160529139605201905060405180910390206040518060400160405280600e81526020017f44616920537461626c65636f696e000000000000000000000000000000000000815250805190602001206040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250805190602001208330604051602001808681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001955050505050506040516020818303038152906040528051906020012060058190555050611ee0806101a16000396000f3fe\nResultlabel_0x0405 [0x0405] JUMPDEST [0x0406] PUSH2 0x0447 [0x0409] PUSH1 0x04 [0x040B] DUP1 [0x040C] CALLDATASIZE [0x040D] SUB [0x040E] PUSH1 0x20 [0x0410] DUP2 [0x0411] LT [0x0412] ISZERO [0x0413] PUSH2 0x041B [0x0416] JUMPI label_0x18E7 [0x18E7] JUMPDEST [0x18E8] PUSH1 0x00 [0x18EA] DUP1 [0x18EB] PUSH1 0x00 [0x18ED] DUP4 [0x18EE] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1903] AND [0x1904] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1919] AND [0x191A] DUP2 [0x191B] MSTORE [0x191C] PUSH1 0x20 [0x191E] ADD [0x191F] SWAP1 [0x1920] DUP2 [0x1921] MSTORE [0x1922] PUSH1 0x20 [0x1924] ADD [0x1925] PUSH1 0x00 [0x1927] SHA3 [0x1928] DUP2 [0x1929] SWAP1 [0x192A] SSTORE [0x192B] POP [0x192C] MSIZE [0x192D] PUSH2 0x0120 [0x1930] DUP2 [0x1931] ADD [0x1932] PUSH1 0x40 [0x1934] MSTORE [0x1935] PUSH1 0x20 [0x1937] DUP2 [0x1938] MSTORE [0x1939] PUSH1 0xE0 [0x193B] PUSH1 0x20 [0x193D] DUP3 [0x193E] ADD [0x193F] MSTORE [0x1940] PUSH1 0xE0 [0x1942] PUSH1 0x00 [0x1944] PUSH1 0x40 [0x1946] DUP4 [0x1947] ADD [0x1948] CALLDATACOPY [0x1949] PUSH1 0x24 [0x194B] CALLDATALOAD [0x194C] PUSH1 0x04 [0x194E] CALLDATALOAD [0x194F] CALLER [0x1950] PUSH1 0x00 [0x1952] CALLDATALOAD [0x1953] PUSH1 0xE0 [0x1955] SHR [0x1956] PUSH1 0xE0 [0x1958] SHL [0x1959] PUSH2 0x0120 [0x195C] DUP6 [0x195D] LOG4 [0x195E] POP [0x195F] POP [0x1960] JUMP label_0x1961 [0x1961] JUMPDEST [0x1962] DUP1 [0x1963] PUSH1 0x02 [0x1965] PUSH1 0x00 [0x1967] DUP5 [0x1968] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x197D] AND [0x197E] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1993] AND [0x1994] DUP2 [0x1995] MSTORE [0x1996] PUSH1 0x20 [0x1998] ADD [0x1999] SWAP1 [0x199A] DUP2 [0x199B] MSTORE [0x199C] PUSH1 0x20 [0x199E] ADD [0x199F] PUSH1 0x00 [0x19A1] SHA3 [0x19A2] SLOAD [0x19A3] LT [0x19A4] ISZERO [0x19A5] PUSH2 0x1A16 [0x19A8] JUMPI label_0x1E72 [0x1E72] JUMPDEST [0x1E73] POP [0x1E74] POP [0x1E75] POP [0x1E76] JUMP label_0x00A9 [0x00A9] DUP1 [0x00AA] PUSH4 0x9DC29FAC [0x00AF] EQ [0x00B0] PUSH2 0x0666 [0x00B3] JUMPI label_0x02DC [0x02DC] JUMPDEST [0x02DD] PUSH1 0x40 [0x02DF] MLOAD [0x02E0] DUP1 [0x02E1] DUP3 [0x02E2] DUP2 [0x02E3] MSTORE [0x02E4] PUSH1 0x20 [0x02E6] ADD [0x02E7] SWAP2 [0x02E8] POP [0x02E9] POP [0x02EA] PUSH1 0x40 [0x02EC] MLOAD [0x02ED] DUP1 [0x02EE] SWAP2 [0x02EF] SUB [0x02F0] SWAP1 [0x02F1] RETURN label_0x050C [0x050C] PUSH1 0x00 [0x050E] DUP1 [0x050F] REVERT label_0x0A25 [0x0A25] JUMPDEST [0x0A26] PUSH1 0x00 [0x0A28] DUP2 [0x0A29] PUSH1 0x02 [0x0A2B] PUSH1 0x00 [0x0A2D] DUP7 [0x0A2E] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0A43] AND [0x0A44] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0A59] AND [0x0A5A] DUP2 [0x0A5B] MSTORE [0x0A5C] PUSH1 0x20 [0x0A5E] ADD [0x0A5F] SWAP1 [0x0A60] DUP2 [0x0A61] MSTORE [0x0A62] PUSH1 0x20 [0x0A64] ADD [0x0A65] PUSH1 0x00 [0x0A67] SHA3 [0x0A68] SLOAD [0x0A69] LT [0x0A6A] ISZERO [0x0A6B] PUSH2 0x0ADC [0x0A6E] JUMPI label_0x187A [0x187A] PUSH1 0x40 [0x187C] MLOAD [0x187D] PUSH32 0x08C379A000000000000000000000000000000000000000000000000000000000 [0x189E] DUP2 [0x189F] MSTORE [0x18A0] PUSH1 0x04 [0x18A2] ADD [0x18A3] DUP1 [0x18A4] DUP1 [0x18A5] PUSH1 0x20 [0x18A7] ADD [0x18A8] DUP3 [0x18A9] DUP2 [0x18AA] SUB [0x18AB] DUP3 [0x18AC] MSTORE [0x18AD] PUSH1 0x12 [0x18AF] DUP2 [0x18B0] MSTORE [0x18B1] PUSH1 0x20 [0x18B3] ADD [0x18B4] DUP1 [0x18B5] PUSH32 0x4461692F6E6F742D617574686F72697A65640000000000000000000000000000 [0x18D6] DUP2 [0x18D7] MSTORE [0x18D8] POP [0x18D9] PUSH1 0x20 [0x18DB] ADD [0x18DC] SWAP2 [0x18DD] POP [0x18DE] POP [0x18DF] PUSH1 0x40 [0x18E1] MLOAD [0x18E2] DUP1 [0x18E3] SWAP2 [0x18E4] SUB [0x18E5] SWAP1 [0x18E6] REVERT label_0x1B78 [0x1B78] PUSH1 0x40 [0x1B7A] MLOAD [0x1B7B] PUSH32 0x08C379A000000000000000000000000000000000000000000000000000000000 [0x1B9C] DUP2 [0x1B9D] MSTORE [0x1B9E] PUSH1 0x04 [0x1BA0] ADD [0x1BA1] DUP1 [0x1BA2] DUP1 [0x1BA3] PUSH1 0x20 [0x1BA5] ADD [0x1BA6] DUP3 [0x1BA7] DUP2 [0x1BA8] SUB [0x1BA9] DUP3 [0x1BAA] MSTORE [0x1BAB] PUSH1 0x1A [0x1BAD] DUP2 [0x1BAE] MSTORE [0x1BAF] PUSH1 0x20 [0x1BB1] ADD [0x1BB2] DUP1 [0x1BB3] PUSH32 0x4461692F696E73756666696369656E742D616C6C6F77616E6365000000000000 [0x1BD4] DUP2 [0x1BD5] MSTORE [0x1BD6] POP [0x1BD7] PUSH1 0x20 [0x1BD9] ADD [0x1BDA] SWAP2 [0x1BDB] POP [0x1BDC] POP [0x1BDD] PUSH1 0x40 [0x1BDF] MLOAD [0x1BE0] DUP1 [0x1BE1] SWAP2 [0x1BE2] SUB [0x1BE3] SWAP1 [0x1BE4] REVERT label_0x00B8 [0x00B8] JUMPDEST [0x00B9] DUP1 [0x00BA] PUSH4 0x313CE567 [0x00BF] GT [0x00C0] PUSH2 0x010A [0x00C3] JUMPI label_0x0316 [0x0316] JUMPDEST [0x0317] PUSH2 0x031E [0x031A] PUSH2 0x0F66 [0x031D] JUMP label_0x08B8 [0x08B8] PUSH1 0x00 [0x08BA] DUP1 [0x08BB] REVERT label_0x14E9 [0x14E9] JUMPDEST [0x14EA] POP [0x14EB] POP [0x14EC] POP [0x14ED] PUSH1 0x20 [0x14EF] PUSH1 0x40 [0x14F1] MLOAD [0x14F2] SUB [0x14F3] MLOAD [0x14F4] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1509] AND [0x150A] DUP10 [0x150B] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1520] AND [0x1521] EQ [0x1522] PUSH2 0x1593 [0x1525] JUMPI label_0x0449 [0x0449] JUMPDEST [0x044A] PUSH2 0x048B [0x044D] PUSH1 0x04 [0x044F] DUP1 [0x0450] CALLDATASIZE [0x0451] SUB [0x0452] PUSH1 0x20 [0x0454] DUP2 [0x0455] LT [0x0456] ISZERO [0x0457] PUSH2 0x045F [0x045A] JUMPI label_0x05FB [0x05FB] DUP1 [0x05FC] DUP3 [0x05FD] SUB [0x05FE] DUP1 [0x05FF] MLOAD [0x0600] PUSH1 0x01 [0x0602] DUP4 [0x0603] PUSH1 0x20 [0x0605] SUB [0x0606] PUSH2 0x0100 [0x0609] EXP [0x060A] SUB [0x060B] NOT [0x060C] AND [0x060D] DUP2 [0x060E] MSTORE [0x060F] PUSH1 0x20 [0x0611] ADD [0x0612] SWAP2 [0x0613] POP [0x0614] JUMPDEST [0x0615] POP [0x0616] SWAP3 [0x0617] POP [0x0618] POP [0x0619] POP [0x061A] PUSH1 0x40 [0x061C] MLOAD [0x061D] DUP1 [0x061E] SWAP2 [0x061F] SUB [0x0620] SWAP1 [0x0621] RETURN label_0x0678 [0x0678] PUSH1 0x00 [0x067A] DUP1 [0x067B] REVERT label_0x0A6F [0x0A6F] PUSH1 0x40 [0x0A71] MLOAD [0x0A72] PUSH32 0x08C379A000000000000000000000000000000000000000000000000000000000 [0x0A93] DUP2 [0x0A94] MSTORE [0x0A95] PUSH1 0x04 [0x0A97] ADD [0x0A98] DUP1 [0x0A99] DUP1 [0x0A9A] PUSH1 0x20 [0x0A9C] ADD [0x0A9D] DUP3 [0x0A9E] DUP2 [0x0A9F] SUB [0x0AA0] DUP3 [0x0AA1] MSTORE [0x0AA2] PUSH1 0x18 [0x0AA4] DUP2 [0x0AA5] MSTORE [0x0AA6] PUSH1 0x20 [0x0AA8] ADD [0x0AA9] DUP1 [0x0AAA] PUSH32 0x4461692F696E73756666696369656E742D62616C616E63650000000000000000 [0x0ACB] DUP2 [0x0ACC] MSTORE [0x0ACD] POP [0x0ACE] PUSH1 0x20 [0x0AD0] ADD [0x0AD1] SWAP2 [0x0AD2] POP [0x0AD3] POP [0x0AD4] PUSH1 0x40 [0x0AD6] MLOAD [0x0AD7] DUP1 [0x0AD8] SWAP2 [0x0AD9] SUB [0x0ADA] SWAP1 [0x0ADB] REVERT label_0x12BF [0x12BF] JUMPDEST [0x12C0] PUSH1 0x00 [0x12C2] PUSH1 0x05 [0x12C4] SLOAD [0x12C5] PUSH32 0xEA2AA0A1BE11A07ED86D755C93467F4F82362B452371D1BA94D1715123511ACB [0x12E6] PUSH1 0x00 [0x12E8] SHL [0x12E9] DUP11 [0x12EA] DUP11 [0x12EB] DUP11 [0x12EC] DUP11 [0x12ED] DUP11 [0x12EE] PUSH1 0x40 [0x12F0] MLOAD [0x12F1] PUSH1 0x20 [0x12F3] ADD [0x12F4] DUP1 [0x12F5] DUP8 [0x12F6] DUP2 [0x12F7] MSTORE [0x12F8] PUSH1 0x20 [0x12FA] ADD [0x12FB] DUP7 [0x12FC] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1311] AND [0x1312] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1327] AND [0x1328] DUP2 [0x1329] MSTORE [0x132A] PUSH1 0x20 [0x132C] ADD [0x132D] DUP6 [0x132E] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1343] AND [0x1344] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1359] AND [0x135A] DUP2 [0x135B] MSTORE [0x135C] PUSH1 0x20 [0x135E] ADD [0x135F] DUP5 [0x1360] DUP2 [0x1361] MSTORE [0x1362] PUSH1 0x20 [0x1364] ADD [0x1365] DUP4 [0x1366] DUP2 [0x1367] MSTORE [0x1368] PUSH1 0x20 [0x136A] ADD [0x136B] DUP3 [0x136C] ISZERO [0x136D] ISZERO [0x136E] ISZERO [0x136F] ISZERO [0x1370] DUP2 [0x1371] MSTORE [0x1372] PUSH1 0x20 [0x1374] ADD [0x1375] SWAP7 [0x1376] POP [0x1377] POP [0x1378] POP [0x1379] POP [0x137A] POP [0x137B] POP [0x137C] POP [0x137D] PUSH1 0x40 [0x137F] MLOAD [0x1380] PUSH1 0x20 [0x1382] DUP2 [0x1383] DUP4 [0x1384] SUB [0x1385] SUB [0x1386] DUP2 [0x1387] MSTORE [0x1388] SWAP1 [0x1389] PUSH1 0x40 [0x138B] MSTORE [0x138C] DUP1 [0x138D] MLOAD [0x138E] SWAP1 [0x138F] PUSH1 0x20 [0x1391] ADD [0x1392] SHA3 [0x1393] PUSH1 0x40 [0x1395] MLOAD [0x1396] PUSH1 0x20 [0x1398] ADD [0x1399] DUP1 [0x139A] DUP1 [0x139B] PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 [0x13BC] DUP2 [0x13BD] MSTORE [0x13BE] POP [0x13BF] PUSH1 0x02 [0x13C1] ADD [0x13C2] DUP4 [0x13C3] DUP2 [0x13C4] MSTORE [0x13C5] PUSH1 0x20 [0x13C7] ADD [0x13C8] DUP3 [0x13C9] DUP2 [0x13CA] MSTORE [0x13CB] PUSH1 0x20 [0x13CD] ADD [0x13CE] SWAP3 [0x13CF] POP [0x13D0] POP [0x13D1] POP [0x13D2] PUSH1 0x40 [0x13D4] MLOAD [0x13D5] PUSH1 0x20 [0x13D7] DUP2 [0x13D8] DUP4 [0x13D9] SUB [0x13DA] SUB [0x13DB] DUP2 [0x13DC] MSTORE [0x13DD] SWAP1 [0x13DE] PUSH1 0x40 [0x13E0] MSTORE [0x13E1] DUP1 [0x13E2] MLOAD [0x13E3] SWAP1 [0x13E4] PUSH1 0x20 [0x13E6] ADD [0x13E7] SHA3 [0x13E8] SWAP1 [0x13E9] POP [0x13EA] PUSH1 0x00 [0x13EC] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1401] AND [0x1402] DUP10 [0x1403] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1418] AND [0x1419] EQ [0x141A] ISZERO [0x141B] PUSH2 0x148C [0x141E] JUMPI label_0x17FA [0x17FA] JUMPDEST [0x17FB] PUSH1 0x40 [0x17FD] MLOAD [0x17FE] DUP1 [0x17FF] PUSH1 0x40 [0x1801] ADD [0x1802] PUSH1 0x40 [0x1804] MSTORE [0x1805] DUP1 [0x1806] PUSH1 0x03 [0x1808] DUP2 [0x1809] MSTORE [0x180A] PUSH1 0x20 [0x180C] ADD [0x180D] PUSH32 0x4441490000000000000000000000000000000000000000000000000000000000 [0x182E] DUP2 [0x182F] MSTORE [0x1830] POP [0x1831] DUP2 [0x1832] JUMP label_0x01E0 [0x01E0] JUMPDEST [0x01E1] DUP2 [0x01E2] ADD [0x01E3] SWAP1 [0x01E4] DUP1 [0x01E5] DUP1 [0x01E6] CALLDATALOAD [0x01E7] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x01FC] AND [0x01FD] SWAP1 [0x01FE] PUSH1 0x20 [0x0200] ADD [0x0201] SWAP1 [0x0202] SWAP3 [0x0203] SWAP2 [0x0204] SWAP1 [0x0205] DUP1 [0x0206] CALLDATALOAD [0x0207] SWAP1 [0x0208] PUSH1 0x20 [0x020A] ADD [0x020B] SWAP1 [0x020C] SWAP3 [0x020D] SWAP2 [0x020E] SWAP1 [0x020F] POP [0x0210] POP [0x0211] POP [0x0212] PUSH2 0x092D [0x0215] JUMP label_0x03B8 [0x03B8] DUP1 [0x03B9] DUP3 [0x03BA] ADD [0x03BB] MLOAD [0x03BC] DUP2 [0x03BD] DUP5 [0x03BE] ADD [0x03BF] MSTORE [0x03C0] PUSH1 0x20 [0x03C2] DUP2 [0x03C3] ADD [0x03C4] SWAP1 [0x03C5] POP [0x03C6] PUSH2 0x03AF [0x03C9] JUMP label_0x1D35 [0x1D35] JUMPDEST [0x1D36] PUSH1 0x02 [0x1D38] PUSH1 0x00 [0x1D3A] DUP5 [0x1D3B] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1D50] AND [0x1D51] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1D66] AND [0x1D67] DUP2 [0x1D68] MSTORE [0x1D69] PUSH1 0x20 [0x1D6B] ADD [0x1D6C] SWAP1 [0x1D6D] DUP2 [0x1D6E] MSTORE [0x1D6F] PUSH1 0x20 [0x1D71] ADD [0x1D72] PUSH1 0x00 [0x1D74] SHA3 [0x1D75] DUP2 [0x1D76] SWAP1 [0x1D77] SSTORE [0x1D78] POP [0x1D79] PUSH2 0x1D84 [0x1D7C] PUSH1 0x01 [0x1D7E] SLOAD [0x1D7F] DUP3 [0x1D80] PUSH2 0x1E77 [0x1D83] JUMP label_0x0638 [0x0638] JUMPDEST [0x0639] DUP2 [0x063A] ADD [0x063B] SWAP1 [0x063C] DUP1 [0x063D] DUP1 [0x063E] CALLDATALOAD [0x063F] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0654] AND [0x0655] SWAP1 [0x0656] PUSH1 0x20 [0x0658] ADD [0x0659] SWAP1 [0x065A] SWAP3 [0x065B] SWAP2 [0x065C] SWAP1 [0x065D] POP [0x065E] POP [0x065F] POP [0x0660] PUSH2 0x1833 [0x0663] JUMP label_0x0890 [0x0890] JUMPDEST [0x0891] PUSH1 0x40 [0x0893] MLOAD [0x0894] DUP1 [0x0895] DUP3 [0x0896] DUP2 [0x0897] MSTORE [0x0898] PUSH1 0x20 [0x089A] ADD [0x089B] SWAP2 [0x089C] POP [0x089D] POP [0x089E] PUSH1 0x40 [0x08A0] MLOAD [0x08A1] DUP1 [0x08A2] SWAP2 [0x08A3] SUB [0x08A4] SWAP1 [0x08A5] RETURN label_0x0F66 [0x0F66] JUMPDEST [0x0F67] PUSH1 0x05 [0x0F69] SLOAD [0x0F6A] DUP2 [0x0F6B] JUMP label_0x10B8 [0x10B8] JUMPDEST [0x10B9] PUSH1 0x01 [0x10BB] DUP2 [0x10BC] SWAP1 [0x10BD] SSTORE [0x10BE] POP [0x10BF] DUP2 [0x10C0] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x10D5] AND [0x10D6] PUSH1 0x00 [0x10D8] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x10ED] AND [0x10EE] PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF [0x110F] DUP4 [0x1110] PUSH1 0x40 [0x1112] MLOAD [0x1113] DUP1 [0x1114] DUP3 [0x1115] DUP2 [0x1116] MSTORE [0x1117] PUSH1 0x20 [0x1119] ADD [0x111A] SWAP2 [0x111B] POP [0x111C] POP [0x111D] PUSH1 0x40 [0x111F] MLOAD [0x1120] DUP1 [0x1121] SWAP2 [0x1122] SUB [0x1123] SWAP1 [0x1124] LOG3 [0x1125] POP [0x1126] POP [0x1127] JUMP label_0x159D [0x159D] POP [0x159E] DUP6 [0x159F] TIMESTAMP [0x15A0] GT [0x15A1] ISZERO [0x15A2] JUMPDEST [0x15A3] PUSH2 0x1614 [0x15A6] JUMPI label_0x02D4 [0x02D4] JUMPDEST [0x02D5] PUSH2 0x02DC [0x02D8] PUSH2 0x0F3A [0x02DB] JUMP label_0x03CA [0x03CA] JUMPDEST [0x03CB] POP [0x03CC] POP [0x03CD] POP [0x03CE] POP [0x03CF] SWAP1 [0x03D0] POP [0x03D1] SWAP1 [0x03D2] DUP2 [0x03D3] ADD [0x03D4] SWAP1 [0x03D5] PUSH1 0x1F [0x03D7] AND [0x03D8] DUP1 [0x03D9] ISZERO [0x03DA] PUSH2 0x03F7 [0x03DD] JUMPI label_0x05E7 [0x05E7] JUMPDEST [0x05E8] POP [0x05E9] POP [0x05EA] POP [0x05EB] POP [0x05EC] SWAP1 [0x05ED] POP [0x05EE] SWAP1 [0x05EF] DUP2 [0x05F0] ADD [0x05F1] SWAP1 [0x05F2] PUSH1 0x1F [0x05F4] AND [0x05F5] DUP1 [0x05F6] ISZERO [0x05F7] PUSH2 0x0614 [0x05FA] JUMPI label_0x072C [0x072C] PUSH1 0x00 [0x072E] DUP1 [0x072F] REVERT label_0x0840 [0x0840] PUSH1 0x00 [0x0842] DUP1 [0x0843] REVERT label_0x0FB3 [0x0FB3] PUSH1 0x40 [0x0FB5] MLOAD [0x0FB6] PUSH32 0x08C379A000000000000000000000000000000000000000000000000000000000 [0x0FD7] DUP2 [0x0FD8] MSTORE [0x0FD9] PUSH1 0x04 [0x0FDB] ADD [0x0FDC] DUP1 [0x0FDD] DUP1 [0x0FDE] PUSH1 0x20 [0x0FE0] ADD [0x0FE1] DUP3 [0x0FE2] DUP2 [0x0FE3] SUB [0x0FE4] DUP3 [0x0FE5] MSTORE [0x0FE6] PUSH1 0x12 [0x0FE8] DUP2 [0x0FE9] MSTORE [0x0FEA] PUSH1 0x20 [0x0FEC] ADD [0x0FED] DUP1 [0x0FEE] PUSH32 0x4461692F6E6F742D617574686F72697A65640000000000000000000000000000 [0x100F] DUP2 [0x1010] MSTORE [0x1011] POP [0x1012] PUSH1 0x20 [0x1014] ADD [0x1015] SWAP2 [0x1016] POP [0x1017] POP [0x1018] PUSH1 0x40 [0x101A] MLOAD [0x101B] DUP1 [0x101C] SWAP2 [0x101D] SUB [0x101E] SWAP1 [0x101F] REVERT label_0x11A8 [0x11A8] PUSH1 0x40 [0x11AA] MLOAD [0x11AB] PUSH32 0x08C379A000000000000000000000000000000000000000000000000000000000 [0x11CC] DUP2 [0x11CD] MSTORE [0x11CE] PUSH1 0x04 [0x11D0] ADD [0x11D1] DUP1 [0x11D2] DUP1 [0x11D3] PUSH1 0x20 [0x11D5] ADD [0x11D6] DUP3 [0x11D7] DUP2 [0x11D8] SUB [0x11D9] DUP3 [0x11DA] MSTORE [0x11DB] PUSH1 0x12 [0x11DD] DUP2 [0x11DE] MSTORE [0x11DF] PUSH1 0x20 [0x11E1] ADD [0x11E2] DUP1 [0x11E3] PUSH32 0x4461692F6E6F742D617574686F72697A65640000000000000000000000000000 [0x1204] DUP2 [0x1205] MSTORE [0x1206] POP [0x1207] PUSH1 0x20 [0x1209] ADD [0x120A] SWAP2 [0x120B] POP [0x120C] POP [0x120D] PUSH1 0x40 [0x120F] MLOAD [0x1210] DUP1 [0x1211] SWAP2 [0x1212] SUB [0x1213] SWAP1 [0x1214] REVERT label_0x0000 [0x0000] PUSH1 0x80 [0x0002] PUSH1 0x40 [0x0004] MSTORE [0x0005] CALLVALUE [0x0006] DUP1 [0x0007] ISZERO [0x0008] PUSH2 0x0010 [0x000B] JUMPI label_0x01A3 [0x01A3] DUP1 [0x01A4] DUP3 [0x01A5] SUB [0x01A6] DUP1 [0x01A7] MLOAD [0x01A8] PUSH1 0x01 [0x01AA] DUP4 [0x01AB] PUSH1 0x20 [0x01AD] SUB [0x01AE] PUSH2 0x0100 [0x01B1] EXP [0x01B2] SUB [0x01B3] NOT [0x01B4] AND [0x01B5] DUP2 [0x01B6] MSTORE [0x01B7] PUSH1 0x20 [0x01B9] ADD [0x01BA] SWAP2 [0x01BB] POP [0x01BC] JUMPDEST [0x01BD] POP [0x01BE] SWAP3 [0x01BF] POP [0x01C0] POP [0x01C1] POP [0x01C2] PUSH1 0x40 [0x01C4] MLOAD [0x01C5] DUP1 [0x01C6] SWAP2 [0x01C7] SUB [0x01C8] SWAP1 [0x01C9] RETURN label_0x02F2 [0x02F2] JUMPDEST [0x02F3] PUSH2 0x02FA [0x02F6] PUSH2 0x0F61 [0x02F9] JUMP label_0x04B3 [0x04B3] PUSH1 0x00 [0x04B5] DUP1 [0x04B6] REVERT label_0x07EC [0x07EC] JUMPDEST [0x07ED] DUP2 [0x07EE] ADD [0x07EF] SWAP1 [0x07F0] DUP1 [0x07F1] DUP1 [0x07F2] CALLDATALOAD [0x07F3] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0808] AND [0x0809] SWAP1 [0x080A] PUSH1 0x20 [0x080C] ADD [0x080D] SWAP1 [0x080E] SWAP3 [0x080F] SWAP2 [0x0810] SWAP1 [0x0811] POP [0x0812] POP [0x0813] POP [0x0814] PUSH2 0x1E2A [0x0817] JUMP label_0x08A6 [0x08A6] JUMPDEST [0x08A7] PUSH2 0x08F2 [0x08AA] PUSH1 0x04 [0x08AC] DUP1 [0x08AD] CALLDATASIZE [0x08AE] SUB [0x08AF] PUSH1 0x40 [0x08B1] DUP2 [0x08B2] LT [0x08B3] ISZERO [0x08B4] PUSH2 0x08BC [0x08B7] JUMPI label_0x018F [0x018F] JUMPDEST [0x0190] POP [0x0191] POP [0x0192] POP [0x0193] POP [0x0194] SWAP1 [0x0195] POP [0x0196] SWAP1 [0x0197] DUP2 [0x0198] ADD [0x0199] SWAP1 [0x019A] PUSH1 0x1F [0x019C] AND [0x019D] DUP1 [0x019E] ISZERO [0x019F] PUSH2 0x01BC [0x01A2] JUMPI label_0x0230 [0x0230] JUMPDEST [0x0231] PUSH2 0x0238 [0x0234] PUSH2 0x0A1F [0x0237] JUMP label_0x1D84 [0x1D84] JUMPDEST [0x1D85] PUSH1 0x01 [0x1D87] DUP2 [0x1D88] SWAP1 [0x1D89] SSTORE [0x1D8A] POP [0x1D8B] PUSH1 0x00 [0x1D8D] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1DA2] AND [0x1DA3] DUP3 [0x1DA4] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1DB9] AND [0x1DBA] PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF [0x1DDB] DUP4 [0x1DDC] PUSH1 0x40 [0x1DDE] MLOAD [0x1DDF] DUP1 [0x1DE0] DUP3 [0x1DE1] DUP2 [0x1DE2] MSTORE [0x1DE3] PUSH1 0x20 [0x1DE5] ADD [0x1DE6] SWAP2 [0x1DE7] POP [0x1DE8] POP [0x1DE9] PUSH1 0x40 [0x1DEB] MLOAD [0x1DEC] DUP1 [0x1DED] SWAP2 [0x1DEE] SUB [0x1DEF] SWAP1 [0x1DF0] LOG3 [0x1DF1] POP [0x1DF2] POP [0x1DF3] JUMP label_0x1E19 [0x1E19] JUMPDEST [0x1E1A] PUSH2 0x1E24 [0x1E1D] DUP4 [0x1E1E] DUP4 [0x1E1F] DUP4 [0x1E20] PUSH2 0x0A25 [0x1E23] JUMP label_0x04F9 [0x04F9] JUMPDEST [0x04FA] PUSH2 0x059D [0x04FD] PUSH1 0x04 [0x04FF] DUP1 [0x0500] CALLDATASIZE [0x0501] SUB [0x0502] PUSH2 0x0100 [0x0505] DUP2 [0x0506] LT [0x0507] ISZERO [0x0508] PUSH2 0x0510 [0x050B] JUMPI label_0x077E [0x077E] JUMPDEST [0x077F] DUP2 [0x0780] ADD [0x0781] SWAP1 [0x0782] DUP1 [0x0783] DUP1 [0x0784] CALLDATALOAD [0x0785] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x079A] AND [0x079B] SWAP1 [0x079C] PUSH1 0x20 [0x079E] ADD [0x079F] SWAP1 [0x07A0] SWAP3 [0x07A1] SWAP2 [0x07A2] SWAP1 [0x07A3] DUP1 [0x07A4] CALLDATALOAD [0x07A5] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x07BA] AND [0x07BB] SWAP1 [0x07BC] PUSH1 0x20 [0x07BE] ADD [0x07BF] SWAP1 [0x07C0] SWAP3 [0x07C1] SWAP2 [0x07C2] SWAP1 [0x07C3] DUP1 [0x07C4] CALLDATALOAD [0x07C5] SWAP1 [0x07C6] PUSH1 0x20 [0x07C8] ADD [0x07C9] SWAP1 [0x07CA] SWAP3 [0x07CB] SWAP2 [0x07CC] SWAP1 [0x07CD] POP [0x07CE] POP [0x07CF] POP [0x07D0] PUSH2 0x1E19 [0x07D3] JUMP label_0x010A [0x010A] JUMPDEST [0x010B] DUP1 [0x010C] PUSH4 0x06FDDE03 [0x0111] EQ [0x0112] PUSH2 0x0147 [0x0115] JUMPI label_0x0D31 [0x0D31] JUMPDEST [0x0D32] PUSH1 0x03 [0x0D34] PUSH1 0x00 [0x0D36] DUP7 [0x0D37] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0D4C] AND [0x0D4D] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0D62] AND [0x0D63] DUP2 [0x0D64] MSTORE [0x0D65] PUSH1 0x20 [0x0D67] ADD [0x0D68] SWAP1 [0x0D69] DUP2 [0x0D6A] MSTORE [0x0D6B] PUSH1 0x20 [0x0D6D] ADD [0x0D6E] PUSH1 0x00 [0x0D70] SHA3 [0x0D71] PUSH1 0x00 [0x0D73] CALLER [0x0D74] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0D89] AND [0x0D8A] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0D9F] AND [0x0DA0] DUP2 [0x0DA1] MSTORE [0x0DA2] PUSH1 0x20 [0x0DA4] ADD [0x0DA5] SWAP1 [0x0DA6] DUP2 [0x0DA7] MSTORE [0x0DA8] PUSH1 0x20 [0x0DAA] ADD [0x0DAB] PUSH1 0x00 [0x0DAD] SHA3 [0x0DAE] DUP2 [0x0DAF] SWAP1 [0x0DB0] SSTORE [0x0DB1] POP [0x0DB2] JUMPDEST [0x0DB3] PUSH2 0x0DFB [0x0DB6] PUSH1 0x02 [0x0DB8] PUSH1 0x00 [0x0DBA] DUP7 [0x0DBB] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0DD0] AND [0x0DD1] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0DE6] AND [0x0DE7] DUP2 [0x0DE8] MSTORE [0x0DE9] PUSH1 0x20 [0x0DEB] ADD [0x0DEC] SWAP1 [0x0DED] DUP2 [0x0DEE] MSTORE [0x0DEF] PUSH1 0x20 [0x0DF1] ADD [0x0DF2] PUSH1 0x00 [0x0DF4] SHA3 [0x0DF5] SLOAD [0x0DF6] DUP4 [0x0DF7] PUSH2 0x1E77 [0x0DFA] JUMP label_0x141F [0x141F] PUSH1 0x40 [0x1421] MLOAD [0x1422] PUSH32 0x08C379A000000000000000000000000000000000000000000000000000000000 [0x1443] DUP2 [0x1444] MSTORE [0x1445] PUSH1 0x04 [0x1447] ADD [0x1448] DUP1 [0x1449] DUP1 [0x144A] PUSH1 0x20 [0x144C] ADD [0x144D] DUP3 [0x144E] DUP2 [0x144F] SUB [0x1450] DUP3 [0x1451] MSTORE [0x1452] PUSH1 0x15 [0x1454] DUP2 [0x1455] MSTORE [0x1456] PUSH1 0x20 [0x1458] ADD [0x1459] DUP1 [0x145A] PUSH32 0x4461692F696E76616C69642D616464726573732D300000000000000000000000 [0x147B] DUP2 [0x147C] MSTORE [0x147D] POP [0x147E] PUSH1 0x20 [0x1480] ADD [0x1481] SWAP2 [0x1482] POP [0x1483] POP [0x1484] PUSH1 0x40 [0x1486] MLOAD [0x1487] DUP1 [0x1488] SWAP2 [0x1489] SUB [0x148A] SWAP1 [0x148B] REVERT label_0x1593 [0x1593] JUMPDEST [0x1594] PUSH1 0x00 [0x1596] DUP7 [0x1597] EQ [0x1598] DUP1 [0x1599] PUSH2 0x15A2 [0x159C] JUMPI label_0x16DE [0x16DE] PUSH1 0x00 [0x16E0] PUSH2 0x1706 [0x16E3] JUMP label_0x0036 [0x0036] DUP1 [0x0037] PUSH4 0xA9059CBB [0x003C] EQ [0x003D] PUSH2 0x06B4 [0x0040] JUMPI label_0x0106 [0x0106] PUSH2 0x0142 [0x0109] JUMP label_0x04E3 [0x04E3] JUMPDEST [0x04E4] PUSH1 0x40 [0x04E6] MLOAD [0x04E7] DUP1 [0x04E8] DUP3 [0x04E9] DUP2 [0x04EA] MSTORE [0x04EB] PUSH1 0x20 [0x04ED] ADD [0x04EE] SWAP2 [0x04EF] POP [0x04F0] POP [0x04F1] PUSH1 0x40 [0x04F3] MLOAD [0x04F4] DUP1 [0x04F5] SWAP2 [0x04F6] SUB [0x04F7] SWAP1 [0x04F8] RETURN label_0x06CA [0x06CA] JUMPDEST [0x06CB] DUP2 [0x06CC] ADD [0x06CD] SWAP1 [0x06CE] DUP1 [0x06CF] DUP1 [0x06D0] CALLDATALOAD [0x06D1] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x06E6] AND [0x06E7] SWAP1 [0x06E8] PUSH1 0x20 [0x06EA] ADD [0x06EB] SWAP1 [0x06EC] SWAP3 [0x06ED] SWAP2 [0x06EE] SWAP1 [0x06EF] DUP1 [0x06F0] CALLDATALOAD [0x06F1] SWAP1 [0x06F2] PUSH1 0x20 [0x06F4] ADD [0x06F5] SWAP1 [0x06F6] SWAP3 [0x06F7] SWAP2 [0x06F8] SWAP1 [0x06F9] POP [0x06FA] POP [0x06FB] POP [0x06FC] PUSH2 0x1DF4 [0x06FF] JUMP label_0x1A4D [0x1A4D] POP [0x1A4E] PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1A6F] PUSH1 0x03 [0x1A71] PUSH1 0x00 [0x1A73] DUP5 [0x1A74] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1A89] AND [0x1A8A] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1A9F] AND [0x1AA0] DUP2 [0x1AA1] MSTORE [0x1AA2] PUSH1 0x20 [0x1AA4] ADD [0x1AA5] SWAP1 [0x1AA6] DUP2 [0x1AA7] MSTORE [0x1AA8] PUSH1 0x20 [0x1AAA] ADD [0x1AAB] PUSH1 0x00 [0x1AAD] SHA3 [0x1AAE] PUSH1 0x00 [0x1AB0] CALLER [0x1AB1] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1AC6] AND [0x1AC7] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1ADC] AND [0x1ADD] DUP2 [0x1ADE] MSTORE [0x1ADF] PUSH1 0x20 [0x1AE1] ADD [0x1AE2] SWAP1 [0x1AE3] DUP2 [0x1AE4] MSTORE [0x1AE5] PUSH1 0x20 [0x1AE7] ADD [0x1AE8] PUSH1 0x00 [0x1AEA] SHA3 [0x1AEB] SLOAD [0x1AEC] EQ [0x1AED] ISZERO [0x1AEE] JUMPDEST [0x1AEF] ISZERO [0x1AF0] PUSH2 0x1CEC [0x1AF3] JUMPI label_0x031E [0x031E] JUMPDEST [0x031F] PUSH1 0x40 [0x0321] MLOAD [0x0322] DUP1 [0x0323] DUP3 [0x0324] DUP2 [0x0325] MSTORE [0x0326] PUSH1 0x20 [0x0328] ADD [0x0329] SWAP2 [0x032A] POP [0x032B] POP [0x032C] PUSH1 0x40 [0x032E] MLOAD [0x032F] DUP1 [0x0330] SWAP2 [0x0331] SUB [0x0332] SWAP1 [0x0333] RETURN label_0x0346 [0x0346] PUSH1 0x00 [0x0348] DUP1 [0x0349] REVERT label_0x009E [0x009E] DUP1 [0x009F] PUSH4 0x9C52A7F1 [0x00A4] EQ [0x00A5] PUSH2 0x0622 [0x00A8] JUMPI label_0x0137 [0x0137] DUP1 [0x0138] PUSH4 0x30ADF81F [0x013D] EQ [0x013E] PUSH2 0x02D4 [0x0141] JUMPI label_0x0147 [0x0147] JUMPDEST [0x0148] PUSH2 0x014F [0x014B] PUSH2 0x08F4 [0x014E] JUMP label_0x06C6 [0x06C6] PUSH1 0x00 [0x06C8] DUP1 [0x06C9] REVERT label_0x07D6 [0x07D6] JUMPDEST [0x07D7] PUSH2 0x0818 [0x07DA] PUSH1 0x04 [0x07DC] DUP1 [0x07DD] CALLDATASIZE [0x07DE] SUB [0x07DF] PUSH1 0x20 [0x07E1] DUP2 [0x07E2] LT [0x07E3] ISZERO [0x07E4] PUSH2 0x07EC [0x07E7] JUMPI label_0x1E77 [0x1E77] JUMPDEST [0x1E78] PUSH1 0x00 [0x1E7A] DUP3 [0x1E7B] DUP3 [0x1E7C] DUP5 [0x1E7D] SUB [0x1E7E] SWAP2 [0x1E7F] POP [0x1E80] DUP2 [0x1E81] GT [0x1E82] ISZERO [0x1E83] PUSH2 0x1E8B [0x1E86] JUMPI label_0x000C [0x000C] PUSH1 0x00 [0x000E] DUP1 [0x000F] REVERT label_0x004C [0x004C] DUP1 [0x004D] PUSH4 0xBB35783B [0x0052] EQ [0x0053] PUSH2 0x0768 [0x0056] JUMPI label_0x0447 [0x0447] JUMPDEST [0x0448] STOP 0x00 label_0x04B7 [0x04B7] JUMPDEST [0x04B8] DUP2 [0x04B9] ADD [0x04BA] SWAP1 [0x04BB] DUP1 [0x04BC] DUP1 [0x04BD] CALLDATALOAD [0x04BE] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x04D3] AND [0x04D4] SWAP1 [0x04D5] PUSH1 0x20 [0x04D7] ADD [0x04D8] SWAP1 [0x04D9] SWAP3 [0x04DA] SWAP2 [0x04DB] SWAP1 [0x04DC] POP [0x04DD] POP [0x04DE] POP [0x04DF] PUSH2 0x12A7 [0x04E2] JUMP label_0x07D4 [0x07D4] JUMPDEST [0x07D5] STOP 0x00 label_0x00B4 [0x00B4] PUSH2 0x0142 [0x00B7] JUMP label_0x034A [0x034A] JUMPDEST [0x034B] DUP2 [0x034C] ADD [0x034D] SWAP1 [0x034E] DUP1 [0x034F] DUP1 [0x0350] CALLDATALOAD [0x0351] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0366] AND [0x0367] SWAP1 [0x0368] PUSH1 0x20 [0x036A] ADD [0x036B] SWAP1 [0x036C] SWAP3 [0x036D] SWAP2 [0x036E] SWAP1 [0x036F] DUP1 [0x0370] CALLDATALOAD [0x0371] SWAP1 [0x0372] PUSH1 0x20 [0x0374] ADD [0x0375] SWAP1 [0x0376] SWAP3 [0x0377] SWAP2 [0x0378] SWAP1 [0x0379] POP [0x037A] POP [0x037B] POP [0x037C] PUSH2 0x0F6C [0x037F] JUMP label_0x1E91 [0x1E91] JUMPDEST [0x1E92] PUSH1 0x00 [0x1E94] DUP3 [0x1E95] DUP3 [0x1E96] DUP5 [0x1E97] ADD [0x1E98] SWAP2 [0x1E99] POP [0x1E9A] DUP2 [0x1E9B] LT [0x1E9C] ISZERO [0x1E9D] PUSH2 0x1EA5 [0x1EA0] JUMPI label_0x0C3E [0x0C3E] PUSH1 0x40 [0x0C40] MLOAD [0x0C41] PUSH32 0x08C379A000000000000000000000000000000000000000000000000000000000 [0x0C62] DUP2 [0x0C63] MSTORE [0x0C64] PUSH1 0x04 [0x0C66] ADD [0x0C67] DUP1 [0x0C68] DUP1 [0x0C69] PUSH1 0x20 [0x0C6B] ADD [0x0C6C] DUP3 [0x0C6D] DUP2 [0x0C6E] SUB [0x0C6F] DUP3 [0x0C70] MSTORE [0x0C71] PUSH1 0x1A [0x0C73] DUP2 [0x0C74] MSTORE [0x0C75] PUSH1 0x20 [0x0C77] ADD [0x0C78] DUP1 [0x0C79] PUSH32 0x4461692F696E73756666696369656E742D616C6C6F77616E6365000000000000 [0x0C9A] DUP2 [0x0C9B] MSTORE [0x0C9C] POP [0x0C9D] PUSH1 0x20 [0x0C9F] ADD [0x0CA0] SWAP2 [0x0CA1] POP [0x0CA2] POP [0x0CA3] PUSH1 0x40 [0x0CA5] MLOAD [0x0CA6] DUP1 [0x0CA7] SWAP2 [0x0CA8] SUB [0x0CA9] SWAP1 [0x0CAA] REVERT label_0x19A9 [0x19A9] PUSH1 0x40 [0x19AB] MLOAD [0x19AC] PUSH32 0x08C379A000000000000000000000000000000000000000000000000000000000 [0x19CD] DUP2 [0x19CE] MSTORE [0x19CF] PUSH1 0x04 [0x19D1] ADD [0x19D2] DUP1 [0x19D3] DUP1 [0x19D4] PUSH1 0x20 [0x19D6] ADD [0x19D7] DUP3 [0x19D8] DUP2 [0x19D9] SUB [0x19DA] DUP3 [0x19DB] MSTORE [0x19DC] PUSH1 0x18 [0x19DE] DUP2 [0x19DF] MSTORE [0x19E0] PUSH1 0x20 [0x19E2] ADD [0x19E3] DUP1 [0x19E4] PUSH32 0x4461692F696E73756666696369656E742D62616C616E63650000000000000000 [0x1A05] DUP2 [0x1A06] MSTORE [0x1A07] POP [0x1A08] PUSH1 0x20 [0x1A0A] ADD [0x1A0B] SWAP2 [0x1A0C] POP [0x1A0D] POP [0x1A0E] PUSH1 0x40 [0x1A10] MLOAD [0x1A11] DUP1 [0x1A12] SWAP2 [0x1A13] SUB [0x1A14] SWAP1 [0x1A15] REVERT label_0x02BA [0x02BA] JUMPDEST [0x02BB] PUSH1 0x40 [0x02BD] MLOAD [0x02BE] DUP1 [0x02BF] DUP3 [0x02C0] ISZERO [0x02C1] ISZERO [0x02C2] ISZERO [0x02C3] ISZERO [0x02C4] DUP2 [0x02C5] MSTORE [0x02C6] PUSH1 0x20 [0x02C8] ADD [0x02C9] SWAP2 [0x02CA] POP [0x02CB] POP [0x02CC] PUSH1 0x40 [0x02CE] MLOAD [0x02CF] DUP1 [0x02D0] SWAP2 [0x02D1] SUB [0x02D2] SWAP1 [0x02D3] RETURN label_0x038A [0x038A] JUMPDEST [0x038B] PUSH1 0x40 [0x038D] MLOAD [0x038E] DUP1 [0x038F] DUP1 [0x0390] PUSH1 0x20 [0x0392] ADD [0x0393] DUP3 [0x0394] DUP2 [0x0395] SUB [0x0396] DUP3 [0x0397] MSTORE [0x0398] DUP4 [0x0399] DUP2 [0x039A] DUP2 [0x039B] MLOAD [0x039C] DUP2 [0x039D] MSTORE [0x039E] PUSH1 0x20 [0x03A0] ADD [0x03A1] SWAP2 [0x03A2] POP [0x03A3] DUP1 [0x03A4] MLOAD [0x03A5] SWAP1 [0x03A6] PUSH1 0x20 [0x03A8] ADD [0x03A9] SWAP1 [0x03AA] DUP1 [0x03AB] DUP4 [0x03AC] DUP4 [0x03AD] PUSH1 0x00 [0x03AF] JUMPDEST [0x03B0] DUP4 [0x03B1] DUP2 [0x03B2] LT [0x03B3] ISZERO [0x03B4] PUSH2 0x03CA [0x03B7] JUMPI label_0x045F [0x045F] JUMPDEST [0x0460] DUP2 [0x0461] ADD [0x0462] SWAP1 [0x0463] DUP1 [0x0464] DUP1 [0x0465] CALLDATALOAD [0x0466] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x047B] AND [0x047C] SWAP1 [0x047D] PUSH1 0x20 [0x047F] ADD [0x0480] SWAP1 [0x0481] SWAP3 [0x0482] SWAP2 [0x0483] SWAP1 [0x0484] POP [0x0485] POP [0x0486] POP [0x0487] PUSH2 0x128F [0x048A] JUMP label_0x067C [0x067C] JUMPDEST [0x067D] DUP2 [0x067E] ADD [0x067F] SWAP1 [0x0680] DUP1 [0x0681] DUP1 [0x0682] CALLDATALOAD [0x0683] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0698] AND [0x0699] SWAP1 [0x069A] PUSH1 0x20 [0x069C] ADD [0x069D] SWAP1 [0x069E] SWAP3 [0x069F] SWAP2 [0x06A0] SWAP1 [0x06A1] DUP1 [0x06A2] CALLDATALOAD [0x06A3] SWAP1 [0x06A4] PUSH1 0x20 [0x06A6] ADD [0x06A7] SWAP1 [0x06A8] SWAP3 [0x06A9] SWAP2 [0x06AA] SWAP1 [0x06AB] POP [0x06AC] POP [0x06AD] POP [0x06AE] PUSH2 0x1961 [0x06B1] JUMP label_0x06B2 [0x06B2] JUMPDEST [0x06B3] STOP 0x00 label_0x0730 [0x0730] JUMPDEST [0x0731] DUP2 [0x0732] ADD [0x0733] SWAP1 [0x0734] DUP1 [0x0735] DUP1 [0x0736] CALLDATALOAD [0x0737] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x074C] AND [0x074D] SWAP1 [0x074E] PUSH1 0x20 [0x0750] ADD [0x0751] SWAP1 [0x0752] SWAP3 [0x0753] SWAP2 [0x0754] SWAP1 [0x0755] DUP1 [0x0756] CALLDATALOAD [0x0757] SWAP1 [0x0758] PUSH1 0x20 [0x075A] ADD [0x075B] SWAP1 [0x075C] SWAP3 [0x075D] SWAP2 [0x075E] SWAP1 [0x075F] POP [0x0760] POP [0x0761] POP [0x0762] PUSH2 0x1E09 [0x0765] JUMP label_0x006D [0x006D] DUP1 [0x006E] PUSH4 0xF2D5D56B [0x0073] EQ [0x0074] PUSH2 0x08A6 [0x0077] JUMPI label_0x00CF [0x00CF] DUP1 [0x00D0] PUSH4 0x3644E515 [0x00D5] EQ [0x00D6] PUSH2 0x0316 [0x00D9] JUMPI label_0x1069 [0x1069] JUMPDEST [0x106A] PUSH1 0x02 [0x106C] PUSH1 0x00 [0x106E] DUP5 [0x106F] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1084] AND [0x1085] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x109A] AND [0x109B] DUP2 [0x109C] MSTORE [0x109D] PUSH1 0x20 [0x109F] ADD [0x10A0] SWAP1 [0x10A1] DUP2 [0x10A2] MSTORE [0x10A3] PUSH1 0x20 [0x10A5] ADD [0x10A6] PUSH1 0x00 [0x10A8] SHA3 [0x10A9] DUP2 [0x10AA] SWAP1 [0x10AB] SSTORE [0x10AC] POP [0x10AD] PUSH2 0x10B8 [0x10B0] PUSH1 0x01 [0x10B2] SLOAD [0x10B3] DUP3 [0x10B4] PUSH2 0x1E91 [0x10B7] JUMP label_0x1EA1 [0x1EA1] PUSH1 0x00 [0x1EA3] DUP1 [0x1EA4] REVERT label_0x0F3A [0x0F3A] JUMPDEST [0x0F3B] PUSH32 0xEA2AA0A1BE11A07ED86D755C93467F4F82362B452371D1BA94D1715123511ACB [0x0F5C] PUSH1 0x00 [0x0F5E] SHL [0x0F5F] DUP2 [0x0F60] JUMP label_0x0F6C [0x0F6C] JUMPDEST [0x0F6D] PUSH1 0x01 [0x0F6F] PUSH1 0x00 [0x0F71] DUP1 [0x0F72] CALLER [0x0F73] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0F88] AND [0x0F89] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0F9E] AND [0x0F9F] DUP2 [0x0FA0] MSTORE [0x0FA1] PUSH1 0x20 [0x0FA3] ADD [0x0FA4] SWAP1 [0x0FA5] DUP2 [0x0FA6] MSTORE [0x0FA7] PUSH1 0x20 [0x0FA9] ADD [0x0FAA] PUSH1 0x00 [0x0FAC] SHA3 [0x0FAD] SLOAD [0x0FAE] EQ [0x0FAF] PUSH2 0x1020 [0x0FB2] JUMPI label_0x0116 [0x0116] DUP1 [0x0117] PUSH4 0x095EA7B3 [0x011C] EQ [0x011D] PUSH2 0x01CA [0x0120] JUMPI label_0x0142 [0x0142] JUMPDEST [0x0143] PUSH1 0x00 [0x0145] DUP1 [0x0146] REVERT label_0x024E [0x024E] JUMPDEST [0x024F] PUSH2 0x02BA [0x0252] PUSH1 0x04 [0x0254] DUP1 [0x0255] CALLDATASIZE [0x0256] SUB [0x0257] PUSH1 0x60 [0x0259] DUP2 [0x025A] LT [0x025B] ISZERO [0x025C] PUSH2 0x0264 [0x025F] JUMPI label_0x08F2 [0x08F2] JUMPDEST [0x08F3] STOP 0x00 label_0x0057 [0x0057] DUP1 [0x0058] PUSH4 0xBF353DBB [0x005D] EQ [0x005E] PUSH2 0x07D6 [0x0061] JUMPI label_0x0062 [0x0062] DUP1 [0x0063] PUSH4 0xDD62ED3E [0x0068] EQ [0x0069] PUSH2 0x082E [0x006C] JUMPI label_0x0238 [0x0238] JUMPDEST [0x0239] PUSH1 0x40 [0x023B] MLOAD [0x023C] DUP1 [0x023D] DUP3 [0x023E] DUP2 [0x023F] MSTORE [0x0240] PUSH1 0x20 [0x0242] ADD [0x0243] SWAP2 [0x0244] POP [0x0245] POP [0x0246] PUSH1 0x40 [0x0248] MLOAD [0x0249] DUP1 [0x024A] SWAP2 [0x024B] SUB [0x024C] SWAP1 [0x024D] RETURN label_0x0264 [0x0264] JUMPDEST [0x0265] DUP2 [0x0266] ADD [0x0267] SWAP1 [0x0268] DUP1 [0x0269] DUP1 [0x026A] CALLDATALOAD [0x026B] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0280] AND [0x0281] SWAP1 [0x0282] PUSH1 0x20 [0x0284] ADD [0x0285] SWAP1 [0x0286] SWAP3 [0x0287] SWAP2 [0x0288] SWAP1 [0x0289] DUP1 [0x028A] CALLDATALOAD [0x028B] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x02A0] AND [0x02A1] SWAP1 [0x02A2] PUSH1 0x20 [0x02A4] ADD [0x02A5] SWAP1 [0x02A6] SWAP3 [0x02A7] SWAP2 [0x02A8] SWAP1 [0x02A9] DUP1 [0x02AA] CALLDATALOAD [0x02AB] SWAP1 [0x02AC] PUSH1 0x20 [0x02AE] ADD [0x02AF] SWAP1 [0x02B0] SWAP3 [0x02B1] SWAP2 [0x02B2] SWAP1 [0x02B3] POP [0x02B4] POP [0x02B5] POP [0x02B6] PUSH2 0x0A25 [0x02B9] JUMP label_0x0666 [0x0666] JUMPDEST [0x0667] PUSH2 0x06B2 [0x066A] PUSH1 0x04 [0x066C] DUP1 [0x066D] CALLDATASIZE [0x066E] SUB [0x066F] PUSH1 0x40 [0x0671] DUP2 [0x0672] LT [0x0673] ISZERO [0x0674] PUSH2 0x067C [0x0677] JUMPI label_0x077A [0x077A] PUSH1 0x00 [0x077C] DUP1 [0x077D] REVERT label_0x00E5 [0x00E5] DUP1 [0x00E6] PUSH4 0x54FD4D50 [0x00EB] EQ [0x00EC] PUSH2 0x0382 [0x00EF] JUMPI label_0x00F0 [0x00F0] DUP1 [0x00F1] PUSH4 0x65FAE35E [0x00F6] EQ [0x00F7] PUSH2 0x0405 [0x00FA] JUMPI label_0x0634 [0x0634] PUSH1 0x00 [0x0636] DUP1 [0x0637] REVERT label_0x1614 [0x1614] JUMPDEST [0x1615] PUSH1 0x04 [0x1617] PUSH1 0x00 [0x1619] DUP11 [0x161A] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x162F] AND [0x1630] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1645] AND [0x1646] DUP2 [0x1647] MSTORE [0x1648] PUSH1 0x20 [0x164A] ADD [0x164B] SWAP1 [0x164C] DUP2 [0x164D] MSTORE [0x164E] PUSH1 0x20 [0x1650] ADD [0x1651] PUSH1 0x00 [0x1653] SHA3 [0x1654] PUSH1 0x00 [0x1656] DUP2 [0x1657] SLOAD [0x1658] DUP1 [0x1659] SWAP3 [0x165A] SWAP2 [0x165B] SWAP1 [0x165C] PUSH1 0x01 [0x165E] ADD [0x165F] SWAP2 [0x1660] SWAP1 [0x1661] POP [0x1662] SSTORE [0x1663] DUP8 [0x1664] EQ [0x1665] PUSH2 0x16D6 [0x1668] JUMPI label_0x0041 [0x0041] DUP1 [0x0042] PUSH4 0xB753A98C [0x0047] EQ [0x0048] PUSH2 0x071A [0x004B] JUMPI label_0x048B [0x048B] JUMPDEST [0x048C] PUSH1 0x40 [0x048E] MLOAD [0x048F] DUP1 [0x0490] DUP3 [0x0491] DUP2 [0x0492] MSTORE [0x0493] PUSH1 0x20 [0x0495] ADD [0x0496] SWAP2 [0x0497] POP [0x0498] POP [0x0499] PUSH1 0x40 [0x049B] MLOAD [0x049C] DUP1 [0x049D] SWAP2 [0x049E] SUB [0x049F] SWAP1 [0x04A0] RETURN label_0x092D [0x092D] JUMPDEST [0x092E] PUSH1 0x00 [0x0930] DUP2 [0x0931] PUSH1 0x03 [0x0933] PUSH1 0x00 [0x0935] CALLER [0x0936] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x094B] AND [0x094C] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0961] AND [0x0962] DUP2 [0x0963] MSTORE [0x0964] PUSH1 0x20 [0x0966] ADD [0x0967] SWAP1 [0x0968] DUP2 [0x0969] MSTORE [0x096A] PUSH1 0x20 [0x096C] ADD [0x096D] PUSH1 0x00 [0x096F] SHA3 [0x0970] PUSH1 0x00 [0x0972] DUP6 [0x0973] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0988] AND [0x0989] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x099E] AND [0x099F] DUP2 [0x09A0] MSTORE [0x09A1] PUSH1 0x20 [0x09A3] ADD [0x09A4] SWAP1 [0x09A5] DUP2 [0x09A6] MSTORE [0x09A7] PUSH1 0x20 [0x09A9] ADD [0x09AA] PUSH1 0x00 [0x09AC] SHA3 [0x09AD] DUP2 [0x09AE] SWAP1 [0x09AF] SSTORE [0x09B0] POP [0x09B1] DUP3 [0x09B2] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x09C7] AND [0x09C8] CALLER [0x09C9] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x09DE] AND [0x09DF] PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 [0x0A00] DUP5 [0x0A01] PUSH1 0x40 [0x0A03] MLOAD [0x0A04] DUP1 [0x0A05] DUP3 [0x0A06] DUP2 [0x0A07] MSTORE [0x0A08] PUSH1 0x20 [0x0A0A] ADD [0x0A0B] SWAP2 [0x0A0C] POP [0x0A0D] POP [0x0A0E] PUSH1 0x40 [0x0A10] MLOAD [0x0A11] DUP1 [0x0A12] SWAP2 [0x0A13] SUB [0x0A14] SWAP1 [0x0A15] LOG3 [0x0A16] PUSH1 0x01 [0x0A18] SWAP1 [0x0A19] POP [0x0A1A] SWAP3 [0x0A1B] SWAP2 [0x0A1C] POP [0x0A1D] POP [0x0A1E] JUMP label_0x1E01 [0x1E01] JUMPDEST [0x1E02] SWAP1 [0x1E03] POP [0x1E04] SWAP3 [0x1E05] SWAP2 [0x1E06] POP [0x1E07] POP [0x1E08] JUMP label_0x1E09 [0x1E09] JUMPDEST [0x1E0A] PUSH2 0x1E14 [0x1E0D] CALLER [0x1E0E] DUP4 [0x1E0F] DUP4 [0x1E10] PUSH2 0x0A25 [0x1E13] JUMP label_0x1E14 [0x1E14] JUMPDEST [0x1E15] POP [0x1E16] POP [0x1E17] POP [0x1E18] JUMP label_0x02FA [0x02FA] JUMPDEST [0x02FB] PUSH1 0x40 [0x02FD] MLOAD [0x02FE] DUP1 [0x02FF] DUP3 [0x0300] PUSH1 0xFF [0x0302] AND [0x0303] PUSH1 0xFF [0x0305] AND [0x0306] DUP2 [0x0307] MSTORE [0x0308] PUSH1 0x20 [0x030A] ADD [0x030B] SWAP2 [0x030C] POP [0x030D] POP [0x030E] PUSH1 0x40 [0x0310] MLOAD [0x0311] DUP1 [0x0312] SWAP2 [0x0313] SUB [0x0314] SWAP1 [0x0315] RETURN label_0x071A [0x071A] JUMPDEST [0x071B] PUSH2 0x0766 [0x071E] PUSH1 0x04 [0x0720] DUP1 [0x0721] CALLDATASIZE [0x0722] SUB [0x0723] PUSH1 0x40 [0x0725] DUP2 [0x0726] LT [0x0727] ISZERO [0x0728] PUSH2 0x0730 [0x072B] JUMPI label_0x0622 [0x0622] JUMPDEST [0x0623] PUSH2 0x0664 [0x0626] PUSH1 0x04 [0x0628] DUP1 [0x0629] CALLDATASIZE [0x062A] SUB [0x062B] PUSH1 0x20 [0x062D] DUP2 [0x062E] LT [0x062F] ISZERO [0x0630] PUSH2 0x0638 [0x0633] JUMPI label_0x0382 [0x0382] JUMPDEST [0x0383] PUSH2 0x038A [0x0386] PUSH2 0x1128 [0x0389] JUMP label_0x0510 [0x0510] JUMPDEST [0x0511] DUP2 [0x0512] ADD [0x0513] SWAP1 [0x0514] DUP1 [0x0515] DUP1 [0x0516] CALLDATALOAD [0x0517] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x052C] AND [0x052D] SWAP1 [0x052E] PUSH1 0x20 [0x0530] ADD [0x0531] SWAP1 [0x0532] SWAP3 [0x0533] SWAP2 [0x0534] SWAP1 [0x0535] DUP1 [0x0536] CALLDATALOAD [0x0537] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x054C] AND [0x054D] SWAP1 [0x054E] PUSH1 0x20 [0x0550] ADD [0x0551] SWAP1 [0x0552] SWAP3 [0x0553] SWAP2 [0x0554] SWAP1 [0x0555] DUP1 [0x0556] CALLDATALOAD [0x0557] SWAP1 [0x0558] PUSH1 0x20 [0x055A] ADD [0x055B] SWAP1 [0x055C] SWAP3 [0x055D] SWAP2 [0x055E] SWAP1 [0x055F] DUP1 [0x0560] CALLDATALOAD [0x0561] SWAP1 [0x0562] PUSH1 0x20 [0x0564] ADD [0x0565] SWAP1 [0x0566] SWAP3 [0x0567] SWAP2 [0x0568] SWAP1 [0x0569] DUP1 [0x056A] CALLDATALOAD [0x056B] ISZERO [0x056C] ISZERO [0x056D] SWAP1 [0x056E] PUSH1 0x20 [0x0570] ADD [0x0571] SWAP1 [0x0572] SWAP3 [0x0573] SWAP2 [0x0574] SWAP1 [0x0575] DUP1 [0x0576] CALLDATALOAD [0x0577] PUSH1 0xFF [0x0579] AND [0x057A] SWAP1 [0x057B] PUSH1 0x20 [0x057D] ADD [0x057E] SWAP1 [0x057F] SWAP3 [0x0580] SWAP2 [0x0581] SWAP1 [0x0582] DUP1 [0x0583] CALLDATALOAD [0x0584] SWAP1 [0x0585] PUSH1 0x20 [0x0587] ADD [0x0588] SWAP1 [0x0589] SWAP3 [0x058A] SWAP2 [0x058B] SWAP1 [0x058C] DUP1 [0x058D] CALLDATALOAD [0x058E] SWAP1 [0x058F] PUSH1 0x20 [0x0591] ADD [0x0592] SWAP1 [0x0593] SWAP3 [0x0594] SWAP2 [0x0595] SWAP1 [0x0596] POP [0x0597] POP [0x0598] POP [0x0599] PUSH2 0x12BF [0x059C] JUMP label_0x15A7 [0x15A7] PUSH1 0x40 [0x15A9] MLOAD [0x15AA] PUSH32 0x08C379A000000000000000000000000000000000000000000000000000000000 [0x15CB] DUP2 [0x15CC] MSTORE [0x15CD] PUSH1 0x04 [0x15CF] ADD [0x15D0] DUP1 [0x15D1] DUP1 [0x15D2] PUSH1 0x20 [0x15D4] ADD [0x15D5] DUP3 [0x15D6] DUP2 [0x15D7] SUB [0x15D8] DUP3 [0x15D9] MSTORE [0x15DA] PUSH1 0x12 [0x15DC] DUP2 [0x15DD] MSTORE [0x15DE] PUSH1 0x20 [0x15E0] ADD [0x15E1] DUP1 [0x15E2] PUSH32 0x4461692F7065726D69742D657870697265640000000000000000000000000000 [0x1603] DUP2 [0x1604] MSTORE [0x1605] POP [0x1606] PUSH1 0x20 [0x1608] ADD [0x1609] SWAP2 [0x160A] POP [0x160B] POP [0x160C] PUSH1 0x40 [0x160E] MLOAD [0x160F] DUP1 [0x1610] SWAP2 [0x1611] SUB [0x1612] SWAP1 [0x1613] REVERT label_0x16E4 [0x16E4] JUMPDEST [0x16E5] PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1706] JUMPDEST [0x1707] SWAP1 [0x1708] POP [0x1709] DUP1 [0x170A] PUSH1 0x03 [0x170C] PUSH1 0x00 [0x170E] DUP13 [0x170F] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1724] AND [0x1725] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x173A] AND [0x173B] DUP2 [0x173C] MSTORE [0x173D] PUSH1 0x20 [0x173F] ADD [0x1740] SWAP1 [0x1741] DUP2 [0x1742] MSTORE [0x1743] PUSH1 0x20 [0x1745] ADD [0x1746] PUSH1 0x00 [0x1748] SHA3 [0x1749] PUSH1 0x00 [0x174B] DUP12 [0x174C] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1761] AND [0x1762] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1777] AND [0x1778] DUP2 [0x1779] MSTORE [0x177A] PUSH1 0x20 [0x177C] ADD [0x177D] SWAP1 [0x177E] DUP2 [0x177F] MSTORE [0x1780] PUSH1 0x20 [0x1782] ADD [0x1783] PUSH1 0x00 [0x1785] SHA3 [0x1786] DUP2 [0x1787] SWAP1 [0x1788] SSTORE [0x1789] POP [0x178A] DUP9 [0x178B] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x17A0] AND [0x17A1] DUP11 [0x17A2] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x17B7] AND [0x17B8] PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 [0x17D9] DUP4 [0x17DA] PUSH1 0x40 [0x17DC] MLOAD [0x17DD] DUP1 [0x17DE] DUP3 [0x17DF] DUP2 [0x17E0] MSTORE [0x17E1] PUSH1 0x20 [0x17E3] ADD [0x17E4] SWAP2 [0x17E5] POP [0x17E6] POP [0x17E7] PUSH1 0x40 [0x17E9] MLOAD [0x17EA] DUP1 [0x17EB] SWAP2 [0x17EC] SUB [0x17ED] SWAP1 [0x17EE] LOG3 [0x17EF] POP [0x17F0] POP [0x17F1] POP [0x17F2] POP [0x17F3] POP [0x17F4] POP [0x17F5] POP [0x17F6] POP [0x17F7] POP [0x17F8] POP [0x17F9] JUMP label_0x1DF4 [0x1DF4] JUMPDEST [0x1DF5] PUSH1 0x00 [0x1DF7] PUSH2 0x1E01 [0x1DFA] CALLER [0x1DFB] DUP5 [0x1DFC] DUP5 [0x1DFD] PUSH2 0x0A25 [0x1E00] JUMP label_0x1E2A [0x1E2A] JUMPDEST [0x1E2B] PUSH1 0x00 [0x1E2D] PUSH1 0x20 [0x1E2F] MSTORE [0x1E30] DUP1 [0x1E31] PUSH1 0x00 [0x1E33] MSTORE [0x1E34] PUSH1 0x40 [0x1E36] PUSH1 0x00 [0x1E38] SHA3 [0x1E39] PUSH1 0x00 [0x1E3B] SWAP2 [0x1E3C] POP [0x1E3D] SWAP1 [0x1E3E] POP [0x1E3F] SLOAD [0x1E40] DUP2 [0x1E41] JUMP label_0x0700 [0x0700] JUMPDEST [0x0701] PUSH1 0x40 [0x0703] MLOAD [0x0704] DUP1 [0x0705] DUP3 [0x0706] ISZERO [0x0707] ISZERO [0x0708] ISZERO [0x0709] ISZERO [0x070A] DUP2 [0x070B] MSTORE [0x070C] PUSH1 0x20 [0x070E] ADD [0x070F] SWAP2 [0x0710] POP [0x0711] POP [0x0712] PUSH1 0x40 [0x0714] MLOAD [0x0715] DUP1 [0x0716] SWAP2 [0x0717] SUB [0x0718] SWAP1 [0x0719] RETURN label_0x0766 [0x0766] JUMPDEST [0x0767] STOP 0x00 label_0x0CAB [0x0CAB] JUMPDEST [0x0CAC] PUSH2 0x0D31 [0x0CAF] PUSH1 0x03 [0x0CB1] PUSH1 0x00 [0x0CB3] DUP7 [0x0CB4] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0CC9] AND [0x0CCA] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0CDF] AND [0x0CE0] DUP2 [0x0CE1] MSTORE [0x0CE2] PUSH1 0x20 [0x0CE4] ADD [0x0CE5] SWAP1 [0x0CE6] DUP2 [0x0CE7] MSTORE [0x0CE8] PUSH1 0x20 [0x0CEA] ADD [0x0CEB] PUSH1 0x00 [0x0CED] SHA3 [0x0CEE] PUSH1 0x00 [0x0CF0] CALLER [0x0CF1] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0D06] AND [0x0D07] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0D1C] AND [0x0D1D] DUP2 [0x0D1E] MSTORE [0x0D1F] PUSH1 0x20 [0x0D21] ADD [0x0D22] SWAP1 [0x0D23] DUP2 [0x0D24] MSTORE [0x0D25] PUSH1 0x20 [0x0D27] ADD [0x0D28] PUSH1 0x00 [0x0D2A] SHA3 [0x0D2B] SLOAD [0x0D2C] DUP4 [0x0D2D] PUSH2 0x1E77 [0x0D30] JUMP label_0x1020 [0x1020] JUMPDEST [0x1021] PUSH2 0x1069 [0x1024] PUSH1 0x02 [0x1026] PUSH1 0x00 [0x1028] DUP5 [0x1029] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x103E] AND [0x103F] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1054] AND [0x1055] DUP2 [0x1056] MSTORE [0x1057] PUSH1 0x20 [0x1059] ADD [0x105A] SWAP1 [0x105B] DUP2 [0x105C] MSTORE [0x105D] PUSH1 0x20 [0x105F] ADD [0x1060] PUSH1 0x00 [0x1062] SHA3 [0x1063] SLOAD [0x1064] DUP3 [0x1065] PUSH2 0x1E91 [0x1068] JUMP label_0x14E0 [0x14E0] RETURNDATASIZE [0x14E1] PUSH1 0x00 [0x14E3] DUP1 [0x14E4] RETURNDATACOPY [0x14E5] RETURNDATASIZE [0x14E6] PUSH1 0x00 [0x14E8] REVERT label_0x1669 [0x1669] PUSH1 0x40 [0x166B] MLOAD [0x166C] PUSH32 0x08C379A000000000000000000000000000000000000000000000000000000000 [0x168D] DUP2 [0x168E] MSTORE [0x168F] PUSH1 0x04 [0x1691] ADD [0x1692] DUP1 [0x1693] DUP1 [0x1694] PUSH1 0x20 [0x1696] ADD [0x1697] DUP3 [0x1698] DUP2 [0x1699] SUB [0x169A] DUP3 [0x169B] MSTORE [0x169C] PUSH1 0x11 [0x169E] DUP2 [0x169F] MSTORE [0x16A0] PUSH1 0x20 [0x16A2] ADD [0x16A3] DUP1 [0x16A4] PUSH32 0x4461692F696E76616C69642D6E6F6E6365000000000000000000000000000000 [0x16C5] DUP2 [0x16C6] MSTORE [0x16C7] POP [0x16C8] PUSH1 0x20 [0x16CA] ADD [0x16CB] SWAP2 [0x16CC] POP [0x16CD] POP [0x16CE] PUSH1 0x40 [0x16D0] MLOAD [0x16D1] DUP1 [0x16D2] SWAP2 [0x16D3] SUB [0x16D4] SWAP1 [0x16D5] REVERT label_0x1E24 [0x1E24] JUMPDEST [0x1E25] POP [0x1E26] POP [0x1E27] POP [0x1E28] POP [0x1E29] JUMP label_0x0417 [0x0417] PUSH1 0x00 [0x0419] DUP1 [0x041A] REVERT label_0x06B4 [0x06B4] JUMPDEST [0x06B5] PUSH2 0x0700 [0x06B8] PUSH1 0x04 [0x06BA] DUP1 [0x06BB] CALLDATASIZE [0x06BC] SUB [0x06BD] PUSH1 0x40 [0x06BF] DUP2 [0x06C0] LT [0x06C1] ISZERO [0x06C2] PUSH2 0x06CA [0x06C5] JUMPI label_0x1128 [0x1128] JUMPDEST [0x1129] PUSH1 0x40 [0x112B] MLOAD [0x112C] DUP1 [0x112D] PUSH1 0x40 [0x112F] ADD [0x1130] PUSH1 0x40 [0x1132] MSTORE [0x1133] DUP1 [0x1134] PUSH1 0x01 [0x1136] DUP2 [0x1137] MSTORE [0x1138] PUSH1 0x20 [0x113A] ADD [0x113B] PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 [0x115C] DUP2 [0x115D] MSTORE [0x115E] POP [0x115F] DUP2 [0x1160] JUMP label_0x128F [0x128F] JUMPDEST [0x1290] PUSH1 0x02 [0x1292] PUSH1 0x20 [0x1294] MSTORE [0x1295] DUP1 [0x1296] PUSH1 0x00 [0x1298] MSTORE [0x1299] PUSH1 0x40 [0x129B] PUSH1 0x00 [0x129D] SHA3 [0x129E] PUSH1 0x00 [0x12A0] SWAP2 [0x12A1] POP [0x12A2] SWAP1 [0x12A3] POP [0x12A4] SLOAD [0x12A5] DUP2 [0x12A6] JUMP label_0x0010 [0x0010] JUMPDEST [0x0011] POP [0x0012] PUSH1 0x04 [0x0014] CALLDATASIZE [0x0015] LT [0x0016] PUSH2 0x0142 [0x0019] JUMPI label_0x0B13 [0x0B13] POP [0x0B14] PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0B35] PUSH1 0x03 [0x0B37] PUSH1 0x00 [0x0B39] DUP7 [0x0B3A] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0B4F] AND [0x0B50] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0B65] AND [0x0B66] DUP2 [0x0B67] MSTORE [0x0B68] PUSH1 0x20 [0x0B6A] ADD [0x0B6B] SWAP1 [0x0B6C] DUP2 [0x0B6D] MSTORE [0x0B6E] PUSH1 0x20 [0x0B70] ADD [0x0B71] PUSH1 0x00 [0x0B73] SHA3 [0x0B74] PUSH1 0x00 [0x0B76] CALLER [0x0B77] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0B8C] AND [0x0B8D] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0BA2] AND [0x0BA3] DUP2 [0x0BA4] MSTORE [0x0BA5] PUSH1 0x20 [0x0BA7] ADD [0x0BA8] SWAP1 [0x0BA9] DUP2 [0x0BAA] MSTORE [0x0BAB] PUSH1 0x20 [0x0BAD] ADD [0x0BAE] PUSH1 0x00 [0x0BB0] SHA3 [0x0BB1] SLOAD [0x0BB2] EQ [0x0BB3] ISZERO [0x0BB4] JUMPDEST [0x0BB5] ISZERO [0x0BB6] PUSH2 0x0DB2 [0x0BB9] JUMPI label_0x059F [0x059F] JUMPDEST [0x05A0] PUSH2 0x05A7 [0x05A3] PUSH2 0x17FA [0x05A6] JUMP label_0x1161 [0x1161] JUMPDEST [0x1162] PUSH1 0x01 [0x1164] PUSH1 0x00 [0x1166] DUP1 [0x1167] CALLER [0x1168] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x117D] AND [0x117E] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1193] AND [0x1194] DUP2 [0x1195] MSTORE [0x1196] PUSH1 0x20 [0x1198] ADD [0x1199] SWAP1 [0x119A] DUP2 [0x119B] MSTORE [0x119C] PUSH1 0x20 [0x119E] ADD [0x119F] PUSH1 0x00 [0x11A1] SHA3 [0x11A2] SLOAD [0x11A3] EQ [0x11A4] PUSH2 0x1215 [0x11A7] JUMPI label_0x148C [0x148C] JUMPDEST [0x148D] PUSH1 0x01 [0x148F] DUP2 [0x1490] DUP6 [0x1491] DUP6 [0x1492] DUP6 [0x1493] PUSH1 0x40 [0x1495] MLOAD [0x1496] PUSH1 0x00 [0x1498] DUP2 [0x1499] MSTORE [0x149A] PUSH1 0x20 [0x149C] ADD [0x149D] PUSH1 0x40 [0x149F] MSTORE [0x14A0] PUSH1 0x40 [0x14A2] MLOAD [0x14A3] DUP1 [0x14A4] DUP6 [0x14A5] DUP2 [0x14A6] MSTORE [0x14A7] PUSH1 0x20 [0x14A9] ADD [0x14AA] DUP5 [0x14AB] PUSH1 0xFF [0x14AD] AND [0x14AE] PUSH1 0xFF [0x14B0] AND [0x14B1] DUP2 [0x14B2] MSTORE [0x14B3] PUSH1 0x20 [0x14B5] ADD [0x14B6] DUP4 [0x14B7] DUP2 [0x14B8] MSTORE [0x14B9] PUSH1 0x20 [0x14BB] ADD [0x14BC] DUP3 [0x14BD] DUP2 [0x14BE] MSTORE [0x14BF] PUSH1 0x20 [0x14C1] ADD [0x14C2] SWAP5 [0x14C3] POP [0x14C4] POP [0x14C5] POP [0x14C6] POP [0x14C7] POP [0x14C8] PUSH1 0x20 [0x14CA] PUSH1 0x40 [0x14CC] MLOAD [0x14CD] PUSH1 0x20 [0x14CF] DUP2 [0x14D0] SUB [0x14D1] SWAP1 [0x14D2] DUP1 [0x14D3] DUP5 [0x14D4] SUB [0x14D5] SWAP1 [0x14D6] DUP6 [0x14D7] GAS [0x14D8] STATICCALL [0x14D9] ISZERO [0x14DA] DUP1 [0x14DB] ISZERO [0x14DC] PUSH2 0x14E9 [0x14DF] JUMPI label_0x1E42 [0x1E42] JUMPDEST [0x1E43] PUSH1 0x03 [0x1E45] PUSH1 0x20 [0x1E47] MSTORE [0x1E48] DUP2 [0x1E49] PUSH1 0x00 [0x1E4B] MSTORE [0x1E4C] PUSH1 0x40 [0x1E4E] PUSH1 0x00 [0x1E50] SHA3 [0x1E51] PUSH1 0x20 [0x1E53] MSTORE [0x1E54] DUP1 [0x1E55] PUSH1 0x00 [0x1E57] MSTORE [0x1E58] PUSH1 0x40 [0x1E5A] PUSH1 0x00 [0x1E5C] SHA3 [0x1E5D] PUSH1 0x00 [0x1E5F] SWAP2 [0x1E60] POP [0x1E61] SWAP2 [0x1E62] POP [0x1E63] POP [0x1E64] SLOAD [0x1E65] DUP2 [0x1E66] JUMP label_0x1E8B [0x1E8B] JUMPDEST [0x1E8C] SWAP3 [0x1E8D] SWAP2 [0x1E8E] POP [0x1E8F] POP [0x1E90] JUMP label_0x1EAB [0x1EAB] INVALID label_0x007C [0x007C] JUMPDEST [0x007D] DUP1 [0x007E] PUSH4 0x7ECEBE00 [0x0083] EQ [0x0084] PUSH2 0x04A1 [0x0087] JUMPI label_0x03DE [0x03DE] DUP1 [0x03DF] DUP3 [0x03E0] SUB [0x03E1] DUP1 [0x03E2] MLOAD [0x03E3] PUSH1 0x01 [0x03E5] DUP4 [0x03E6] PUSH1 0x20 [0x03E8] SUB [0x03E9] PUSH2 0x0100 [0x03EC] EXP [0x03ED] SUB [0x03EE] NOT [0x03EF] AND [0x03F0] DUP2 [0x03F1] MSTORE [0x03F2] PUSH1 0x20 [0x03F4] ADD [0x03F5] SWAP2 [0x03F6] POP [0x03F7] JUMPDEST [0x03F8] POP [0x03F9] SWAP3 [0x03FA] POP [0x03FB] POP [0x03FC] POP [0x03FD] PUSH1 0x40 [0x03FF] MLOAD [0x0400] DUP1 [0x0401] SWAP2 [0x0402] SUB [0x0403] SWAP1 [0x0404] RETURN label_0x05D5 [0x05D5] DUP1 [0x05D6] DUP3 [0x05D7] ADD [0x05D8] MLOAD [0x05D9] DUP2 [0x05DA] DUP5 [0x05DB] ADD [0x05DC] MSTORE [0x05DD] PUSH1 0x20 [0x05DF] DUP2 [0x05E0] ADD [0x05E1] SWAP1 [0x05E2] POP [0x05E3] PUSH2 0x05CC [0x05E6] JUMP label_0x0DFB [0x0DFB] JUMPDEST [0x0DFC] PUSH1 0x02 [0x0DFE] PUSH1 0x00 [0x0E00] DUP7 [0x0E01] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0E16] AND [0x0E17] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0E2C] AND [0x0E2D] DUP2 [0x0E2E] MSTORE [0x0E2F] PUSH1 0x20 [0x0E31] ADD [0x0E32] SWAP1 [0x0E33] DUP2 [0x0E34] MSTORE [0x0E35] PUSH1 0x20 [0x0E37] ADD [0x0E38] PUSH1 0x00 [0x0E3A] SHA3 [0x0E3B] DUP2 [0x0E3C] SWAP1 [0x0E3D] SSTORE [0x0E3E] POP [0x0E3F] PUSH2 0x0E87 [0x0E42] PUSH1 0x02 [0x0E44] PUSH1 0x00 [0x0E46] DUP6 [0x0E47] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0E5C] AND [0x0E5D] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0E72] AND [0x0E73] DUP2 [0x0E74] MSTORE [0x0E75] PUSH1 0x20 [0x0E77] ADD [0x0E78] SWAP1 [0x0E79] DUP2 [0x0E7A] MSTORE [0x0E7B] PUSH1 0x20 [0x0E7D] ADD [0x0E7E] PUSH1 0x00 [0x0E80] SHA3 [0x0E81] SLOAD [0x0E82] DUP4 [0x0E83] PUSH2 0x1E91 [0x0E86] JUMP label_0x1833 [0x1833] JUMPDEST [0x1834] PUSH1 0x01 [0x1836] PUSH1 0x00 [0x1838] DUP1 [0x1839] CALLER [0x183A] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x184F] AND [0x1850] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1865] AND [0x1866] DUP2 [0x1867] MSTORE [0x1868] PUSH1 0x20 [0x186A] ADD [0x186B] SWAP1 [0x186C] DUP2 [0x186D] MSTORE [0x186E] PUSH1 0x20 [0x1870] ADD [0x1871] PUSH1 0x00 [0x1873] SHA3 [0x1874] SLOAD [0x1875] EQ [0x1876] PUSH2 0x18E7 [0x1879] JUMPI label_0x1E67 [0x1E67] JUMPDEST [0x1E68] PUSH2 0x1E72 [0x1E6B] DUP3 [0x1E6C] CALLER [0x1E6D] DUP4 [0x1E6E] PUSH2 0x0A25 [0x1E71] JUMP label_0x1EA5 [0x1EA5] JUMPDEST [0x1EA6] SWAP3 [0x1EA7] SWAP2 [0x1EA8] POP [0x1EA9] POP [0x1EAA] JUMP label_0x002B [0x002B] DUP1 [0x002C] PUSH4 0xA9059CBB [0x0031] GT [0x0032] PUSH2 0x007C [0x0035] JUMPI label_0x0260 [0x0260] PUSH1 0x00 [0x0262] DUP1 [0x0263] REVERT label_0x041B [0x041B] JUMPDEST [0x041C] DUP2 [0x041D] ADD [0x041E] SWAP1 [0x041F] DUP1 [0x0420] DUP1 [0x0421] CALLDATALOAD [0x0422] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0437] AND [0x0438] SWAP1 [0x0439] PUSH1 0x20 [0x043B] ADD [0x043C] SWAP1 [0x043D] SWAP3 [0x043E] SWAP2 [0x043F] SWAP1 [0x0440] POP [0x0441] POP [0x0442] POP [0x0443] PUSH2 0x1161 [0x0446] JUMP label_0x00DA [0x00DA] DUP1 [0x00DB] PUSH4 0x40C10F19 [0x00E0] EQ [0x00E1] PUSH2 0x0334 [0x00E4] JUMPI label_0x0380 [0x0380] JUMPDEST [0x0381] STOP 0x00 label_0x0216 [0x0216] JUMPDEST [0x0217] PUSH1 0x40 [0x0219] MLOAD [0x021A] DUP1 [0x021B] DUP3 [0x021C] ISZERO [0x021D] ISZERO [0x021E] ISZERO [0x021F] ISZERO [0x0220] DUP2 [0x0221] MSTORE [0x0222] PUSH1 0x20 [0x0224] ADD [0x0225] SWAP2 [0x0226] POP [0x0227] POP [0x0228] PUSH1 0x40 [0x022A] MLOAD [0x022B] DUP1 [0x022C] SWAP2 [0x022D] SUB [0x022E] SWAP1 [0x022F] RETURN label_0x1526 [0x1526] PUSH1 0x40 [0x1528] MLOAD [0x1529] PUSH32 0x08C379A000000000000000000000000000000000000000000000000000000000 [0x154A] DUP2 [0x154B] MSTORE [0x154C] PUSH1 0x04 [0x154E] ADD [0x154F] DUP1 [0x1550] DUP1 [0x1551] PUSH1 0x20 [0x1553] ADD [0x1554] DUP3 [0x1555] DUP2 [0x1556] SUB [0x1557] DUP3 [0x1558] MSTORE [0x1559] PUSH1 0x12 [0x155B] DUP2 [0x155C] MSTORE [0x155D] PUSH1 0x20 [0x155F] ADD [0x1560] DUP1 [0x1561] PUSH32 0x4461692F696E76616C69642D7065726D69740000000000000000000000000000 [0x1582] DUP2 [0x1583] MSTORE [0x1584] POP [0x1585] PUSH1 0x20 [0x1587] ADD [0x1588] SWAP2 [0x1589] POP [0x158A] POP [0x158B] PUSH1 0x40 [0x158D] MLOAD [0x158E] DUP1 [0x158F] SWAP2 [0x1590] SUB [0x1591] SWAP1 [0x1592] REVERT label_0x16D6 [0x16D6] JUMPDEST [0x16D7] PUSH1 0x00 [0x16D9] DUP6 [0x16DA] PUSH2 0x16E4 [0x16DD] JUMPI label_0x0093 [0x0093] DUP1 [0x0094] PUSH4 0x95D89B41 [0x0099] EQ [0x009A] PUSH2 0x059F [0x009D] JUMPI label_0x017D [0x017D] DUP1 [0x017E] DUP3 [0x017F] ADD [0x0180] MLOAD [0x0181] DUP2 [0x0182] DUP5 [0x0183] ADD [0x0184] MSTORE [0x0185] PUSH1 0x20 [0x0187] DUP2 [0x0188] ADD [0x0189] SWAP1 [0x018A] POP [0x018B] PUSH2 0x0174 [0x018E] JUMP label_0x014F [0x014F] JUMPDEST [0x0150] PUSH1 0x40 [0x0152] MLOAD [0x0153] DUP1 [0x0154] DUP1 [0x0155] PUSH1 0x20 [0x0157] ADD [0x0158] DUP3 [0x0159] DUP2 [0x015A] SUB [0x015B] DUP3 [0x015C] MSTORE [0x015D] DUP4 [0x015E] DUP2 [0x015F] DUP2 [0x0160] MLOAD [0x0161] DUP2 [0x0162] MSTORE [0x0163] PUSH1 0x20 [0x0165] ADD [0x0166] SWAP2 [0x0167] POP [0x0168] DUP1 [0x0169] MLOAD [0x016A] SWAP1 [0x016B] PUSH1 0x20 [0x016D] ADD [0x016E] SWAP1 [0x016F] DUP1 [0x0170] DUP4 [0x0171] DUP4 [0x0172] PUSH1 0x00 [0x0174] JUMPDEST [0x0175] DUP4 [0x0176] DUP2 [0x0177] LT [0x0178] ISZERO [0x0179] PUSH2 0x018F [0x017C] JUMPI label_0x04A1 [0x04A1] JUMPDEST [0x04A2] PUSH2 0x04E3 [0x04A5] PUSH1 0x04 [0x04A7] DUP1 [0x04A8] CALLDATASIZE [0x04A9] SUB [0x04AA] PUSH1 0x20 [0x04AC] DUP2 [0x04AD] LT [0x04AE] ISZERO [0x04AF] PUSH2 0x04B7 [0x04B2] JUMPI label_0x082E [0x082E] JUMPDEST [0x082F] PUSH2 0x0890 [0x0832] PUSH1 0x04 [0x0834] DUP1 [0x0835] CALLDATASIZE [0x0836] SUB [0x0837] PUSH1 0x40 [0x0839] DUP2 [0x083A] LT [0x083B] ISZERO [0x083C] PUSH2 0x0844 [0x083F] JUMPI label_0x08BC [0x08BC] JUMPDEST [0x08BD] DUP2 [0x08BE] ADD [0x08BF] SWAP1 [0x08C0] DUP1 [0x08C1] DUP1 [0x08C2] CALLDATALOAD [0x08C3] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x08D8] AND [0x08D9] SWAP1 [0x08DA] PUSH1 0x20 [0x08DC] ADD [0x08DD] SWAP1 [0x08DE] SWAP3 [0x08DF] SWAP2 [0x08E0] SWAP1 [0x08E1] DUP1 [0x08E2] CALLDATALOAD [0x08E3] SWAP1 [0x08E4] PUSH1 0x20 [0x08E6] ADD [0x08E7] SWAP1 [0x08E8] SWAP3 [0x08E9] SWAP2 [0x08EA] SWAP1 [0x08EB] POP [0x08EC] POP [0x08ED] POP [0x08EE] PUSH2 0x1E67 [0x08F1] JUMP label_0x1AF4 [0x1AF4] DUP1 [0x1AF5] PUSH1 0x03 [0x1AF7] PUSH1 0x00 [0x1AF9] DUP5 [0x1AFA] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1B0F] AND [0x1B10] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1B25] AND [0x1B26] DUP2 [0x1B27] MSTORE [0x1B28] PUSH1 0x20 [0x1B2A] ADD [0x1B2B] SWAP1 [0x1B2C] DUP2 [0x1B2D] MSTORE [0x1B2E] PUSH1 0x20 [0x1B30] ADD [0x1B31] PUSH1 0x00 [0x1B33] SHA3 [0x1B34] PUSH1 0x00 [0x1B36] CALLER [0x1B37] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1B4C] AND [0x1B4D] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1B62] AND [0x1B63] DUP2 [0x1B64] MSTORE [0x1B65] PUSH1 0x20 [0x1B67] ADD [0x1B68] SWAP1 [0x1B69] DUP2 [0x1B6A] MSTORE [0x1B6B] PUSH1 0x20 [0x1B6D] ADD [0x1B6E] PUSH1 0x00 [0x1B70] SHA3 [0x1B71] SLOAD [0x1B72] LT [0x1B73] ISZERO [0x1B74] PUSH2 0x1BE5 [0x1B77] JUMPI label_0x1C6B [0x1C6B] JUMPDEST [0x1C6C] PUSH1 0x03 [0x1C6E] PUSH1 0x00 [0x1C70] DUP5 [0x1C71] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1C86] AND [0x1C87] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1C9C] AND [0x1C9D] DUP2 [0x1C9E] MSTORE [0x1C9F] PUSH1 0x20 [0x1CA1] ADD [0x1CA2] SWAP1 [0x1CA3] DUP2 [0x1CA4] MSTORE [0x1CA5] PUSH1 0x20 [0x1CA7] ADD [0x1CA8] PUSH1 0x00 [0x1CAA] SHA3 [0x1CAB] PUSH1 0x00 [0x1CAD] CALLER [0x1CAE] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1CC3] AND [0x1CC4] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1CD9] AND [0x1CDA] DUP2 [0x1CDB] MSTORE [0x1CDC] PUSH1 0x20 [0x1CDE] ADD [0x1CDF] SWAP1 [0x1CE0] DUP2 [0x1CE1] MSTORE [0x1CE2] PUSH1 0x20 [0x1CE4] ADD [0x1CE5] PUSH1 0x00 [0x1CE7] SHA3 [0x1CE8] DUP2 [0x1CE9] SWAP1 [0x1CEA] SSTORE [0x1CEB] POP [0x1CEC] JUMPDEST [0x1CED] PUSH2 0x1D35 [0x1CF0] PUSH1 0x02 [0x1CF2] PUSH1 0x00 [0x1CF4] DUP5 [0x1CF5] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1D0A] AND [0x1D0B] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1D20] AND [0x1D21] DUP2 [0x1D22] MSTORE [0x1D23] PUSH1 0x20 [0x1D25] ADD [0x1D26] SWAP1 [0x1D27] DUP2 [0x1D28] MSTORE [0x1D29] PUSH1 0x20 [0x1D2B] ADD [0x1D2C] PUSH1 0x00 [0x1D2E] SHA3 [0x1D2F] SLOAD [0x1D30] DUP3 [0x1D31] PUSH2 0x1E77 [0x1D34] JUMP label_0x0078 [0x0078] PUSH2 0x0142 [0x007B] JUMP label_0x012C [0x012C] DUP1 [0x012D] PUSH4 0x23B872DD [0x0132] EQ [0x0133] PUSH2 0x024E [0x0136] JUMPI label_0x08F4 [0x08F4] JUMPDEST [0x08F5] PUSH1 0x40 [0x08F7] MLOAD [0x08F8] DUP1 [0x08F9] PUSH1 0x40 [0x08FB] ADD [0x08FC] PUSH1 0x40 [0x08FE] MSTORE [0x08FF] DUP1 [0x0900] PUSH1 0x0E [0x0902] DUP2 [0x0903] MSTORE [0x0904] PUSH1 0x20 [0x0906] ADD [0x0907] PUSH32 0x44616920537461626C65636F696E000000000000000000000000000000000000 [0x0928] DUP2 [0x0929] MSTORE [0x092A] POP [0x092B] DUP2 [0x092C] JUMP label_0x00C4 [0x00C4] DUP1 [0x00C5] PUSH4 0x313CE567 [0x00CA] EQ [0x00CB] PUSH2 0x02F2 [0x00CE] JUMPI label_0x07E8 [0x07E8] PUSH1 0x00 [0x07EA] DUP1 [0x07EB] REVERT label_0x01DC [0x01DC] PUSH1 0x00 [0x01DE] DUP1 [0x01DF] REVERT label_0x045B [0x045B] PUSH1 0x00 [0x045D] DUP1 [0x045E] REVERT label_0x0768 [0x0768] JUMPDEST [0x0769] PUSH2 0x07D4 [0x076C] PUSH1 0x04 [0x076E] DUP1 [0x076F] CALLDATASIZE [0x0770] SUB [0x0771] PUSH1 0x60 [0x0773] DUP2 [0x0774] LT [0x0775] ISZERO [0x0776] PUSH2 0x077E [0x0779] JUMPI label_0x0818 [0x0818] JUMPDEST [0x0819] PUSH1 0x40 [0x081B] MLOAD [0x081C] DUP1 [0x081D] DUP3 [0x081E] DUP2 [0x081F] MSTORE [0x0820] PUSH1 0x20 [0x0822] ADD [0x0823] SWAP2 [0x0824] POP [0x0825] POP [0x0826] PUSH1 0x40 [0x0828] MLOAD [0x0829] DUP1 [0x082A] SWAP2 [0x082B] SUB [0x082C] SWAP1 [0x082D] RETURN label_0x0A1F [0x0A1F] JUMPDEST [0x0A20] PUSH1 0x01 [0x0A22] SLOAD [0x0A23] DUP2 [0x0A24] JUMP label_0x12A7 [0x12A7] JUMPDEST [0x12A8] PUSH1 0x04 [0x12AA] PUSH1 0x20 [0x12AC] MSTORE [0x12AD] DUP1 [0x12AE] PUSH1 0x00 [0x12B0] MSTORE [0x12B1] PUSH1 0x40 [0x12B3] PUSH1 0x00 [0x12B5] SHA3 [0x12B6] PUSH1 0x00 [0x12B8] SWAP2 [0x12B9] POP [0x12BA] SWAP1 [0x12BB] POP [0x12BC] SLOAD [0x12BD] DUP2 [0x12BE] JUMP label_0x00FB [0x00FB] DUP1 [0x00FC] PUSH4 0x70A08231 [0x0101] EQ [0x0102] PUSH2 0x0449 [0x0105] JUMPI label_0x0121 [0x0121] DUP1 [0x0122] PUSH4 0x18160DDD [0x0127] EQ [0x0128] PUSH2 0x0230 [0x012B] JUMPI label_0x0F61 [0x0F61] JUMPDEST [0x0F62] PUSH1 0x12 [0x0F64] DUP2 [0x0F65] JUMP label_0x001A [0x001A] PUSH1 0x00 [0x001C] CALLDATALOAD [0x001D] PUSH1 0xE0 [0x001F] SHR [0x0020] DUP1 [0x0021] PUSH4 0x7ECEBE00 [0x0026] GT [0x0027] PUSH2 0x00B8 [0x002A] JUMPI label_0x0ADC [0x0ADC] JUMPDEST [0x0ADD] CALLER [0x0ADE] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0AF3] AND [0x0AF4] DUP5 [0x0AF5] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0B0A] AND [0x0B0B] EQ [0x0B0C] ISZERO [0x0B0D] DUP1 [0x0B0E] ISZERO [0x0B0F] PUSH2 0x0BB4 [0x0B12] JUMPI label_0x0844 [0x0844] JUMPDEST [0x0845] DUP2 [0x0846] ADD [0x0847] SWAP1 [0x0848] DUP1 [0x0849] DUP1 [0x084A] CALLDATALOAD [0x084B] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0860] AND [0x0861] SWAP1 [0x0862] PUSH1 0x20 [0x0864] ADD [0x0865] SWAP1 [0x0866] SWAP3 [0x0867] SWAP2 [0x0868] SWAP1 [0x0869] DUP1 [0x086A] CALLDATALOAD [0x086B] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0880] AND [0x0881] SWAP1 [0x0882] PUSH1 0x20 [0x0884] ADD [0x0885] SWAP1 [0x0886] SWAP3 [0x0887] SWAP2 [0x0888] SWAP1 [0x0889] POP [0x088A] POP [0x088B] POP [0x088C] PUSH2 0x1E42 [0x088F] JUMP label_0x1215 [0x1215] JUMPDEST [0x1216] PUSH1 0x01 [0x1218] PUSH1 0x00 [0x121A] DUP1 [0x121B] DUP4 [0x121C] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1231] AND [0x1232] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1247] AND [0x1248] DUP2 [0x1249] MSTORE [0x124A] PUSH1 0x20 [0x124C] ADD [0x124D] SWAP1 [0x124E] DUP2 [0x124F] MSTORE [0x1250] PUSH1 0x20 [0x1252] ADD [0x1253] PUSH1 0x00 [0x1255] SHA3 [0x1256] DUP2 [0x1257] SWAP1 [0x1258] SSTORE [0x1259] POP [0x125A] MSIZE [0x125B] PUSH2 0x0120 [0x125E] DUP2 [0x125F] ADD [0x1260] PUSH1 0x40 [0x1262] MSTORE [0x1263] PUSH1 0x20 [0x1265] DUP2 [0x1266] MSTORE [0x1267] PUSH1 0xE0 [0x1269] PUSH1 0x20 [0x126B] DUP3 [0x126C] ADD [0x126D] MSTORE [0x126E] PUSH1 0xE0 [0x1270] PUSH1 0x00 [0x1272] PUSH1 0x40 [0x1274] DUP4 [0x1275] ADD [0x1276] CALLDATACOPY [0x1277] PUSH1 0x24 [0x1279] CALLDATALOAD [0x127A] PUSH1 0x04 [0x127C] CALLDATALOAD [0x127D] CALLER [0x127E] PUSH1 0x00 [0x1280] CALLDATALOAD [0x1281] PUSH1 0xE0 [0x1283] SHR [0x1284] PUSH1 0xE0 [0x1286] SHL [0x1287] PUSH2 0x0120 [0x128A] DUP6 [0x128B] LOG4 [0x128C] POP [0x128D] POP [0x128E] JUMP label_0x1A16 [0x1A16] JUMPDEST [0x1A17] CALLER [0x1A18] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1A2D] AND [0x1A2E] DUP3 [0x1A2F] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1A44] AND [0x1A45] EQ [0x1A46] ISZERO [0x1A47] DUP1 [0x1A48] ISZERO [0x1A49] PUSH2 0x1AEE [0x1A4C] JUMPI label_0x01CA [0x01CA] JUMPDEST [0x01CB] PUSH2 0x0216 [0x01CE] PUSH1 0x04 [0x01D0] DUP1 [0x01D1] CALLDATASIZE [0x01D2] SUB [0x01D3] PUSH1 0x40 [0x01D5] DUP2 [0x01D6] LT [0x01D7] ISZERO [0x01D8] PUSH2 0x01E0 [0x01DB] JUMPI label_0x059D [0x059D] JUMPDEST [0x059E] STOP 0x00 label_0x05A7 [0x05A7] JUMPDEST [0x05A8] PUSH1 0x40 [0x05AA] MLOAD [0x05AB] DUP1 [0x05AC] DUP1 [0x05AD] PUSH1 0x20 [0x05AF] ADD [0x05B0] DUP3 [0x05B1] DUP2 [0x05B2] SUB [0x05B3] DUP3 [0x05B4] MSTORE [0x05B5] DUP4 [0x05B6] DUP2 [0x05B7] DUP2 [0x05B8] MLOAD [0x05B9] DUP2 [0x05BA] MSTORE [0x05BB] PUSH1 0x20 [0x05BD] ADD [0x05BE] SWAP2 [0x05BF] POP [0x05C0] DUP1 [0x05C1] MLOAD [0x05C2] SWAP1 [0x05C3] PUSH1 0x20 [0x05C5] ADD [0x05C6] SWAP1 [0x05C7] DUP1 [0x05C8] DUP4 [0x05C9] DUP4 [0x05CA] PUSH1 0x00 [0x05CC] JUMPDEST [0x05CD] DUP4 [0x05CE] DUP2 [0x05CF] LT [0x05D0] ISZERO [0x05D1] PUSH2 0x05E7 [0x05D4] JUMPI label_0x0664 [0x0664] JUMPDEST [0x0665] STOP 0x00 label_0x0BBA [0x0BBA] DUP2 [0x0BBB] PUSH1 0x03 [0x0BBD] PUSH1 0x00 [0x0BBF] DUP7 [0x0BC0] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0BD5] AND [0x0BD6] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0BEB] AND [0x0BEC] DUP2 [0x0BED] MSTORE [0x0BEE] PUSH1 0x20 [0x0BF0] ADD [0x0BF1] SWAP1 [0x0BF2] DUP2 [0x0BF3] MSTORE [0x0BF4] PUSH1 0x20 [0x0BF6] ADD [0x0BF7] PUSH1 0x00 [0x0BF9] SHA3 [0x0BFA] PUSH1 0x00 [0x0BFC] CALLER [0x0BFD] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0C12] AND [0x0C13] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0C28] AND [0x0C29] DUP2 [0x0C2A] MSTORE [0x0C2B] PUSH1 0x20 [0x0C2D] ADD [0x0C2E] SWAP1 [0x0C2F] DUP2 [0x0C30] MSTORE [0x0C31] PUSH1 0x20 [0x0C33] ADD [0x0C34] PUSH1 0x00 [0x0C36] SHA3 [0x0C37] SLOAD [0x0C38] LT [0x0C39] ISZERO [0x0C3A] PUSH2 0x0CAB [0x0C3D] JUMPI label_0x0E87 [0x0E87] JUMPDEST [0x0E88] PUSH1 0x02 [0x0E8A] PUSH1 0x00 [0x0E8C] DUP6 [0x0E8D] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0EA2] AND [0x0EA3] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0EB8] AND [0x0EB9] DUP2 [0x0EBA] MSTORE [0x0EBB] PUSH1 0x20 [0x0EBD] ADD [0x0EBE] SWAP1 [0x0EBF] DUP2 [0x0EC0] MSTORE [0x0EC1] PUSH1 0x20 [0x0EC3] ADD [0x0EC4] PUSH1 0x00 [0x0EC6] SHA3 [0x0EC7] DUP2 [0x0EC8] SWAP1 [0x0EC9] SSTORE [0x0ECA] POP [0x0ECB] DUP3 [0x0ECC] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0EE1] AND [0x0EE2] DUP5 [0x0EE3] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x0EF8] AND [0x0EF9] PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF [0x0F1A] DUP5 [0x0F1B] PUSH1 0x40 [0x0F1D] MLOAD [0x0F1E] DUP1 [0x0F1F] DUP3 [0x0F20] DUP2 [0x0F21] MSTORE [0x0F22] PUSH1 0x20 [0x0F24] ADD [0x0F25] SWAP2 [0x0F26] POP [0x0F27] POP [0x0F28] PUSH1 0x40 [0x0F2A] MLOAD [0x0F2B] DUP1 [0x0F2C] SWAP2 [0x0F2D] SUB [0x0F2E] SWAP1 [0x0F2F] LOG3 [0x0F30] PUSH1 0x01 [0x0F32] SWAP1 [0x0F33] POP [0x0F34] SWAP4 [0x0F35] SWAP3 [0x0F36] POP [0x0F37] POP [0x0F38] POP [0x0F39] JUMP label_0x1BE5 [0x1BE5] JUMPDEST [0x1BE6] PUSH2 0x1C6B [0x1BE9] PUSH1 0x03 [0x1BEB] PUSH1 0x00 [0x1BED] DUP5 [0x1BEE] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1C03] AND [0x1C04] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1C19] AND [0x1C1A] DUP2 [0x1C1B] MSTORE [0x1C1C] PUSH1 0x20 [0x1C1E] ADD [0x1C1F] SWAP1 [0x1C20] DUP2 [0x1C21] MSTORE [0x1C22] PUSH1 0x20 [0x1C24] ADD [0x1C25] PUSH1 0x00 [0x1C27] SHA3 [0x1C28] PUSH1 0x00 [0x1C2A] CALLER [0x1C2B] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1C40] AND [0x1C41] PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [0x1C56] AND [0x1C57] DUP2 [0x1C58] MSTORE [0x1C59] PUSH1 0x20 [0x1C5B] ADD [0x1C5C] SWAP1 [0x1C5D] DUP2 [0x1C5E] MSTORE [0x1C5F] PUSH1 0x20 [0x1C61] ADD [0x1C62] PUSH1 0x00 [0x1C64] SHA3 [0x1C65] SLOAD [0x1C66] DUP3 [0x1C67] PUSH2 0x1E77 [0x1C6A] JUMP label_0x1E87 [0x1E87] PUSH1 0x00 [0x1E89] DUP1 [0x1E8A] REVERT label_0x0088 [0x0088] DUP1 [0x0089] PUSH4 0x8FCBAF0C [0x008E] EQ [0x008F] PUSH2 0x04F9 [0x0092] JUMPI label_0x0334 [0x0334] JUMPDEST [0x0335] PUSH2 0x0380 [0x0338] PUSH1 0x04 [0x033A] DUP1 [0x033B] CALLDATASIZE [0x033C] SUB [0x033D] PUSH1 0x40 [0x033F] DUP2 [0x0340] LT [0x0341] ISZERO [0x0342] PUSH2 0x034A [0x0345] JUMPI Conclusion We see and test a easy way to find and extract code blocks from EVM bytecode. Next steps, could be a further processing of such codeblocks to create:\nThe control flow graph (CFG) symbolic stack execution pattern matching In the next post of this series, we will see how to build a symbolic stack execution system to resolve all existing JUMP and JUMPI between code blocks.\nReferences https://etherscan.io/address/0x3cdd26204e114c17823d82180e5ca3f299f18d22#code https://library.dedaub.com/contracts/Ethereum/0x3cdd26204e114c17823d82180e5ca3f299f18d22/source EtherSolve: Computing an Accurate Control-Flow Graph from Ethereum Bytecode. Paper available at: https://arxiv.org/pdf/2103.09113.pdf Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2022-06-19T00:00:00Z","image":"https://curiousstuff.eu/post/part-2-building-ethereum-evm-decompiler-from-scratch.-getting-code-blocks/big-data_hu78bb8e26bc9d4653d225c0a6e0e14f02_201423_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/part-2-building-ethereum-evm-decompiler-from-scratch.-getting-code-blocks/","title":"Part 2: Building Ethereum EVM decompiler from scratch. Getting Code Blocks"},{"content":"What is the decompilation process? The decompilation process involves going back to the original source code from compiled source code so that security engineers might have a better understanding of the programs instead of working directly with machine code; in this context of EVM, the goal is to convert EVM bytecode into solidity like code.\nThe challenge Compilation back to the original source code is impossible because all variable names, type names and even function names are removed. It might be technically possible to arrive at some source code that is similar to the original source code but that is very complicated, especially when the optimizer was used during compilation. I don\u0026rsquo;t know of any tools that do more than converting bytecode to opcodes.\nDecompilers in Ethereum Ethereum is gaining a significant popularity in the blockchain community, mainly due to fact that it is design in a way that enables developers to write decentralized applications (Dapps) and smart-contract using blockchain technology.\nEthereum blockchain is a consensus-based globally executed virtual machine, also referred as Ethereum Virtual Machine (EVM) by implemented its own micro-kernel supporting a handful number of instructions, its own stack, memory and storage. This enables the radical new concept of distributed applications.\nContracts live on the blockchain in an Ethereum-specific binary format (EVM bytecode). However, contracts are typically written in some high-level language such as Solidity and then compiled into byte code to be uploaded on the blockchain. Solidity is a contract-oriented, high-level language whose syntax is similar to that of JavaScript.\nThis new paradigm of applications opens the door to many possibilities and opportunities. Blockchain is often referred as secure by design, but now that blockchains can embed applications this raise multiple questions regarding architecture, design, attack vectors and patch deployments.\nAs we, reverse engineers, know having access to source code is often a luxury. Hence, EVM bytecode decompilers into readable code is needed.\nEthereum Virtual Machine (EVM) decompilers today Currently, we have following alternatives when dealing with bytecode decompilation:\nPorosity [UNMAINTAINED]: Claimed to be a Decompiler and Security Analysis tool for Blockchain-based Ethereum Smart-Contracts Another attempt to write a decompiler for Ethereum Virtual Machine: https://github.com/krzys-h/Ethereum-EVM-decompiler EVM Decompiler: It\u0026rsquo;s is a fork of the Panoramix original repo that\u0026rsquo;s not maintained actively by its author anymore. Available at https://github.com/palkeo/panoramix Etherscan Online Decompiler: Based on Palkeoramix. Available at: https://etherscan.io/bytecode-decompiler EVM: https://github.com/MrLuit/evm Soldec: https://github.com/mkurzmann/soldec EVM decompiler: built by jubnzv. Available at https://github.com/jubnzv/evm-decompiler Gigahorse: A binary lifter and analysis framework for Ethereum smart contracts . Available at https://github.com/nevillegrech/gigahorse-toolchain. Ethervm.io: Free online decompiler available at https://ethervm.io/decompile. Design Approach As you seen, there are many decompilers out there but none of them create as good quality code as possible. This is mostly, because reversing back to Solidity code is a hard task difficult to accomplish.\nTo make our own EVM bytecode decompiler, we will follow the next steps:\nExtract .runtime section code from bytecode. From the opcode sequence, extract the EVM instruction information and arguments when available. See the previous post Converting EVM bytecode to OPCODES in microseconds to know more about it. Find the entrypoint at 0x0 Convert the sequence of .runtime opcodes to EVM CFG. From EVM CFG, remove stack related operations and convert the code to register based instructions Remove compiler optimizations when possible. For example: $var \u0026amp; 0xFFFFF reconstruct dispatcher section resolve public methods name when possible. resolve internal functions when possible. lookup and map storage and memory variables usage applying SSA methodology. iterate over CFG tree transpiling code to higher Solidity and Yul representation. Detect common code similarities with known Solidity code and known libraries. Generate the final output. In the next post, I will show you how to generate a EVM CFG diagram to get a better idea of the bytecode design and instruction execution flow. Bye :)\nNext reading If you like this content, continue reading and find out how to process EVM bytecode in next steps at Part 2: Building Ethereum EVM decompiler from scratch. Getting Code Blocks\nReferences https://ethereum.org/en/developers/tutorials/reverse-engineering-a-contract/ https://github.com/msuiche/porosity https://github.com/crytic/pyevmasm https://docs.qiling.io/en/latest/evm/ https://yanniss.github.io/elipmoc-oopsla22.pdf https://blog.trustlook.com/smart-contract-guardian-an-online-evm-decompiler/ Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2022-05-31T00:00:00Z","image":"https://curiousstuff.eu/post/part-1-building-ethereum-evm-decompiler-from-scratch.-getting-opcodes/jeshoots-com-VdOO4_HFTWM-unsplash_hu70b73e87c045f544d6b4c1a41ee63399_563702_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/part-1-building-ethereum-evm-decompiler-from-scratch.-getting-opcodes/","title":"Part 1: Building Ethereum EVM decompiler from scratch. Getting OPCODEs"},{"content":"What is a rug pull? We could define a rug pull as:\n\u0026ldquo;Rug pulls are a lucrative scam in which a crypto developer promotes a new project—usually a new token—to investors, and then disappears with tens of millions or even hundreds of millions of dollars.\u0026rdquo;\nSource: https://fortune.com/2022/03/02/crypto-scam-rug-pull-what-is-it Introducing POKELON: another scam According to creator description:\n$POKELON is a BEP20 token that parodies wildly popular trends in DeFi and Gaming culture and brings them to life as an interactive, NFT Collectible Card Game. Just like the series our project parodies, holders have access to a wide variety of NFTs and can trade and battle their NFTs in the Telegram based battling game Pokelon League. Packed with more features than any token on the market, ready on launch day. Some of our features are:\nFully decentralized dex using PCS routers Token staking with 3 pools up to 200% APY Liquidity pool farming with 4000% APY!! Our own liquidity swap page Native NFT Marketplace Native NFT Farm where you can stake tokens, earn points and use those points to claim NFTs NFT Staking POKELON view on CoinmarketCap.com Taking a look at contract code. First, we need to find contract address. Easiest way is, to check Coinmarketcap provided information. There, we see the address is 0x4945c9E9dF719ad0602a10F4064e71326e5628f0 so we either can use web3 to download the bytecode and try to decompile it to some extent, or either visit Etherscan and see if we are lucky and source code is available.\nIn this case, code is available, as seen in following screenshot.\nPOKELON contract code in BSC Explorer Making a code review For reference, I paste the contract code below.\nPOKELON contract codeubmitted for verification at BscScan.com on 2022-03-03 */ /** PPPPPPPPPPPPPPPPP OOOOOOOOO KKKKKKKKK KKKKKKKEEEEEEEEEEEEEEEEEEEEEELLLLLLLLLLL OOOOOOOOO NNNNNNNN NNNNNNNN P::::::::::::::::P OO:::::::::OO K:::::::K K:::::KE::::::::::::::::::::EL:::::::::L OO:::::::::OO N:::::::N N::::::N P::::::PPPPPP:::::P OO:::::::::::::OO K:::::::K K:::::KE::::::::::::::::::::EL:::::::::L OO:::::::::::::OO N::::::::N N::::::N PP:::::P P:::::PO:::::::OOO:::::::OK:::::::K K::::::KEE::::::EEEEEEEEE::::ELL:::::::LL O:::::::OOO:::::::ON:::::::::N N::::::N P::::P P:::::PO::::::O O::::::OKK::::::K K:::::KKK E:::::E EEEEEE L:::::L O::::::O O::::::ON::::::::::N N::::::N P::::P P:::::PO:::::O O:::::O K:::::K K:::::K E:::::E L:::::L O:::::O O:::::ON:::::::::::N N::::::N P::::PPPPPP:::::P O:::::O O:::::O K::::::K:::::K E::::::EEEEEEEEEE L:::::L O:::::O O:::::ON:::::::N::::N N::::::N P:::::::::::::PP O:::::O O:::::O K:::::::::::K E:::::::::::::::E L:::::L O:::::O O:::::ON::::::N N::::N N::::::N P::::PPPPPPPPP O:::::O O:::::O K:::::::::::K E:::::::::::::::E L:::::L O:::::O O:::::ON::::::N N::::N:::::::N P::::P O:::::O O:::::O K::::::K:::::K E::::::EEEEEEEEEE L:::::L O:::::O O:::::ON::::::N N:::::::::::N P::::P O:::::O O:::::O K:::::K K:::::K E:::::E L:::::L O:::::O O:::::ON::::::N N::::::::::N P::::P O::::::O O::::::OKK::::::K K:::::KKK E:::::E EEEEEE L:::::L LLLLLLO::::::O O::::::ON::::::N N:::::::::N PP::::::PP O:::::::OOO:::::::OK:::::::K K::::::KEE::::::EEEEEEEE:::::ELL:::::::LLLLLLLLL:::::LO:::::::OOO:::::::ON::::::N N::::::::N P::::::::P OO:::::::::::::OO K:::::::K K:::::KE::::::::::::::::::::EL::::::::::::::::::::::L OO:::::::::::::OO N::::::N N:::::::N P::::::::P OO:::::::::OO K:::::::K K:::::KE::::::::::::::::::::EL::::::::::::::::::::::L OO:::::::::OO N::::::N N::::::N PPPPPPPPPP OOOOOOOOO KKKKKKKKK KKKKKKKEEEEEEEEEEEEEEEEEEEEEELLLLLLLLLLLLLLLLLLLLLLLL OOOOOOOOO NNNNNNNN NNNNNNN Join us now at https://t.me/projectpokelon */ // SPDX-License-Identifier: UNLICENSED pragma solidity ^0.8.4; abstract contract Context { function _msgSender() internal view virtual returns (address payable) { return payable(msg.sender); } function _msgData() internal view virtual returns (bytes memory) { this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691 return msg.data; } } interface IBEP20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); } library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c \u0026gt;= a, \u0026#34;SafeMath: addition overflow\u0026#34;); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, \u0026#34;SafeMath: subtraction overflow\u0026#34;); } function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b \u0026lt;= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, \u0026#34;SafeMath: multiplication overflow\u0026#34;); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, \u0026#34;SafeMath: division by zero\u0026#34;); } function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b \u0026gt; 0, errorMessage); uint256 c = a / b; // assert(a == b * c + a % b); // There is no case in which this doesn\u0026#39;t hold return c; } function mod(uint256 a, uint256 b) internal pure returns (uint256) { return mod(a, b, \u0026#34;SafeMath: modulo by zero\u0026#34;); } function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b != 0, errorMessage); return a % b; } } contract Ownable is Context { address private _owner; address private _previousOwner; uint256 private _lockTime; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor () { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); } function owner() public view returns (address) { return _owner; } modifier onlyOwner() { require(_owner == _msgSender(), \u0026#34;Ownable: caller is not the owner\u0026#34;); _; } function renounceOwnership() public virtual onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); } function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), \u0026#34;Ownable: new owner is the zero address\u0026#34;); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner; } function getUnlockTime() public view returns (uint256) { return _lockTime; } function getTime() public view returns (uint256) { return block.timestamp; } function lock(uint256 time) public virtual onlyOwner { _previousOwner = _owner; _owner = address(0); _lockTime = block.timestamp + time; emit OwnershipTransferred(_owner, address(0)); } function unlock() public virtual { require(_previousOwner == msg.sender, \u0026#34;You don\u0026#39;t have permission to unlock\u0026#34;); require(block.timestamp \u0026gt; _lockTime , \u0026#34;Contract is locked until 7 days\u0026#34;); emit OwnershipTransferred(_owner, _previousOwner); _owner = _previousOwner; } } interface IUniswapV2Factory { event PairCreated(address indexed token0, address indexed token1, address pair, uint); function feeTo() external view returns (address); function feeToSetter() external view returns (address); function getPair(address tokenA, address tokenB) external view returns (address pair); function allPairs(uint) external view returns (address pair); function allPairsLength() external view returns (uint); function createPair(address tokenA, address tokenB) external returns (address pair); function setFeeTo(address) external; function setFeeToSetter(address) external; } interface IUniswapV2Pair { event Approval(address indexed owner, address indexed spender, uint value); event Transfer(address indexed from, address indexed to, uint value); function name() external pure returns (string memory); function symbol() external pure returns (string memory); function decimals() external pure returns (uint8); function totalSupply() external view returns (uint); function balanceOf(address owner) external view returns (uint); function allowance(address owner, address spender) external view returns (uint); function approve(address spender, uint value) external returns (bool); function transfer(address to, uint value) external returns (bool); function transferFrom(address from, address to, uint value) external returns (bool); function DOMAIN_SEPARATOR() external view returns (bytes32); function PERMIT_TYPEHASH() external pure returns (bytes32); function nonces(address owner) external view returns (uint); function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external; event Burn(address indexed sender, uint amount0, uint amount1, address indexed to); event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to ); event Sync(uint112 reserve0, uint112 reserve1); function MINIMUM_LIQUIDITY() external pure returns (uint); function factory() external view returns (address); function token0() external view returns (address); function token1() external view returns (address); function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast); function price0CumulativeLast() external view returns (uint); function price1CumulativeLast() external view returns (uint); function kLast() external view returns (uint); function burn(address to) external returns (uint amount0, uint amount1); function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external; function skim(address to) external; function sync() external; function initialize(address, address) external; } interface IUniswapV2Router { function factory() external pure returns (address); function WETH() external pure returns (address); function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity); function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity); function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB); function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH); function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB); function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH); function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts); function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts); function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts); function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts); function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts); function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts); function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB); function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut); function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn); function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts); function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts); function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH); function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH); function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external; function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable; function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external; } contract POKELON is Context, IBEP20, Ownable { using SafeMath for uint256; mapping (address =\u0026gt; uint256) private _rOwned; mapping (address =\u0026gt; uint256) private _tOwned; mapping (address =\u0026gt; mapping (address =\u0026gt; uint256)) private _allowances; mapping (address =\u0026gt; bool) private _isExcludedFromFee; mapping (address =\u0026gt; bool) isDividendExempt; mapping(address =\u0026gt; bool) private _liquidityHolders; mapping(address =\u0026gt; bool) private _isSniper; mapping(address =\u0026gt; uint256) public dailySpent; mapping(address =\u0026gt; uint256) public allowedTxAmount; mapping(address =\u0026gt; uint256) public sellIntervalStart; mapping (address =\u0026gt; bool) private _isExcluded; address[] private _excluded; uint256 private constant MAX = ~uint256(0); uint256 private _tTotal = 300 * 10**6 * 10**9; uint256 private _rTotal = (MAX - (MAX % _tTotal)); uint256 private _tFeeTotal; string private _name = \u0026#34;POKELON\u0026#34;; string private _symbol = \u0026#34;POKELON\u0026#34;; uint8 private _decimals = 9; uint256 public swapAndLiquifycount = 0; uint256 public snipersCaught = 0; uint256 public _taxFee = 1; //consists of reflect tax uint256 private _previousTaxFee = _taxFee; uint256 public _liquidityFee = 9; //consists of buyback + liq + dividends tax uint256 private _previousLiquidityFee = _liquidityFee; uint256 public div1 = 3; uint256 public div2 = 33; uint256 public _startTimeForSwap; uint256 public _intervalSecondsForSwap = 1 * 30 seconds; // Fee per address uint256 public _maxWallet = 3 * 10**6 * 10**9; uint256 public _maxTxAmount = 3 * 10**5 * 10**9; uint256 private minimumTokensBeforeSwap = 1 * 10**4 * 10**9; uint256 public launchedAt = 0; IUniswapV2Router public uniswapV2Router; address public uniswapV2Pair; bool inSwapAndLiquify; bool public swapAndLiquifyEnabled = true; bool private sniperProtection = true; bool public _hasLiqBeenAdded = false; bool public _tradingEnabled = false; address public currentLiqPair; address payable public buybackAddress = payable(0x26FB5ED637aFDaFF5c6D68983700D1b4a64f7417); address payable public devAddress = payable(0x2536c8b471cDCE137dFc18e41Ad46BB7fbDB1BCF); address payable public lpAddress = payable(0xb5367a40DB52e8D396DA265919ab24f49D2259a9); address payable public stakingAddress = payable(0xDcA2A2e8f504d1cE05af81131c1562273372270e); event SwapAndLiquifyEnabledUpdated(bool enabled); event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity ); event SwapTokensForETH( uint256 amountIn, address[] path ); modifier lockTheSwap { inSwapAndLiquify = true; _; inSwapAndLiquify = false; } constructor () { transferOwnership(lpAddress); _rOwned[lpAddress] = _rTotal; // Pancake Router Testnet v1 // IUniswapV2Router _uniswapV2Router = IUniswapV2Router(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3); // Pancakeswap Router Mainnet v2 IUniswapV2Router _uniswapV2Router = IUniswapV2Router(0x10ED43C718714eb63d5aA57B78B54704E256024E); uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH()); uniswapV2Router = _uniswapV2Router; _isExcludedFromFee[lpAddress] = true; _isExcludedFromFee[stakingAddress] = true; _isExcludedFromFee[address(0)]; _isExcludedFromFee[devAddress] = true; _isExcludedFromFee[address(this)] = true; _liquidityHolders[lpAddress] = true; _startTimeForSwap = block.timestamp; emit Transfer(address(0), lpAddress, _tTotal); } function name() public view returns (string memory) { return _name; } function symbol() public view returns (string memory) { return _symbol; } function decimals() public view returns (uint8) { return _decimals; } function totalSupply() public view override returns (uint256) { return _tTotal; } function balanceOf(address account) public view override returns (uint256) { if (_isExcluded[account]) return _tOwned[account]; return tokenFromReflection(_rOwned[account]); } function transfer(address recipient, uint256 amount) public override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) { _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \u0026#34;ERC20: transfer amount exceeds allowance\u0026#34;)); return true; } function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true; } function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \u0026#34;ERC20: decreased allowance below zero\u0026#34;)); return true; } function isExcludedFromReward(address account) public view returns (bool) { return _isExcluded[account]; } function totalFees() public view returns (uint256) { return _tFeeTotal; } function minimumTokensBeforeSwapAmount() public view returns (uint256) { return minimumTokensBeforeSwap; } function deliver(uint256 tAmount) public { address sender = _msgSender(); require(!_isExcluded[sender], \u0026#34;Excluded addresses cannot call this function\u0026#34;); (uint256 rAmount,,,,,) = _getValues(tAmount); _rOwned[sender] = _rOwned[sender].sub(rAmount); _rTotal = _rTotal.sub(rAmount); _tFeeTotal = _tFeeTotal.add(tAmount); } function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) { require(tAmount \u0026lt;= _tTotal, \u0026#34;Amount must be less than supply\u0026#34;); if (!deductTransferFee) { (uint256 rAmount,,,,,) = _getValues(tAmount); return rAmount; } else { (,uint256 rTransferAmount,,,,) = _getValues(tAmount); return rTransferAmount; } } function tokenFromReflection(uint256 rAmount) public view returns(uint256) { require(rAmount \u0026lt;= _rTotal, \u0026#34;Amount must be less than total reflections\u0026#34;); uint256 currentRate = _getRate(); return rAmount.div(currentRate); } function excludeFromReward(address account) public onlyOwner() { require(!_isExcluded[account], \u0026#34;Account is already excluded\u0026#34;); if(_rOwned[account] \u0026gt; 0) { _tOwned[account] = tokenFromReflection(_rOwned[account]); } _isExcluded[account] = true; _excluded.push(account); } function includeInReward(address account) external onlyOwner() { require(_isExcluded[account], \u0026#34;Account is not excluded\u0026#34;); for (uint256 i = 0; i \u0026lt; _excluded.length; i++) { if (_excluded[i] == account) { _excluded[i] = _excluded[_excluded.length - 1]; _tOwned[account] = 0; _isExcluded[account] = false; _excluded.pop(); break; } } } function _approve(address owner, address spender, uint256 amount) private { require(owner != address(0), \u0026#34;ERC20: approve from the zero address\u0026#34;); require(spender != address(0), \u0026#34;ERC20: approve to the zero address\u0026#34;); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _transfer( address from, address to, uint256 amount ) private { require(from != address(0), \u0026#34;ERC20: transfer from the zero address\u0026#34;); require(amount \u0026gt; 0, \u0026#34;Transfer amount must be greater than zero\u0026#34;); if(!_isExcludedFromFee[from] \u0026amp;\u0026amp; !_isExcludedFromFee[to]) { require(_tradingEnabled, \u0026#39;Trading is currently disabled\u0026#39;); require(to != address(0), \u0026#34;ERC20: transfer to the zero address\u0026#34;); if(to != uniswapV2Pair){ require(balanceOf(to).add(amount) \u0026lt;= _maxWallet, \u0026#34;Transfer exceeds max\u0026#34;); }else{ if(sellIntervalStart[from] != 0){ if(sellIntervalStart[from].add(120) \u0026lt; block.timestamp){ allowedTxAmount[from] = _maxTxAmount; sellIntervalStart[from] = block.timestamp; } } if(allowedTxAmount[from] == 0 \u0026amp;\u0026amp; sellIntervalStart[from] == 0){ allowedTxAmount[from] = _maxTxAmount; sellIntervalStart[from] = block.timestamp; } if(amount \u0026gt; allowedTxAmount[from]){ revert(\u0026#34;MaxTx Limit: Daily Limit Reached\u0026#34;); }else{ if(allowedTxAmount[from].sub(amount) \u0026lt;= 0){ allowedTxAmount[from] = 0; }else{ allowedTxAmount[from] = allowedTxAmount[from].sub(amount); } } } } if(!_isExcludedFromFee[from] \u0026amp;\u0026amp; !_isExcludedFromFee[to]) { } uint256 contractTokenBalance = balanceOf(address(this)); bool overMinimumSwapTokenBalance = contractTokenBalance \u0026gt;= minimumTokensBeforeSwap; // Handle liquidity and buybacks if (!inSwapAndLiquify \u0026amp;\u0026amp; swapAndLiquifyEnabled \u0026amp;\u0026amp; balanceOf(uniswapV2Pair) \u0026gt; 0 \u0026amp;\u0026amp; !_isExcludedFromFee[from]) { if(to == uniswapV2Pair ){ if (overMinimumSwapTokenBalance \u0026amp;\u0026amp; _startTimeForSwap + _intervalSecondsForSwap \u0026lt;= block.timestamp) { _startTimeForSwap = block.timestamp; swapAndLiquifycount = swapAndLiquifycount.add(1); swapAndLiquify(minimumTokensBeforeSwap); } } } bool takeFee = true; // If any account belongs to _isExcludedFromFee account then remove the fee if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){ takeFee = false; } _tokenTransfer(from,to,amount,takeFee); } function swapAndLiquify(uint256 contractTokenBalance) internal lockTheSwap { // split the contract balance into halves uint256 whole = contractTokenBalance.div(div1); uint256 half = whole.div(2); uint256 otherHalf = whole.sub(half); uint256 remains = contractTokenBalance.sub(whole); // capture the contract\u0026#39;s current BNB balance. // this is so that we can capture exactly the amount of BNB that the // swap creates, and not make the liquidity event include any BNB that // has been manually sent to the contract uint256 initialBalance = address(this).balance; // swap tokens for BNB swapTokensForEth(half); // how much BNB did we just swap into? uint256 newBalance = address(this).balance.sub(initialBalance); // add liquidity addLiquidity(otherHalf, newBalance); initialBalance = address(this).balance; swapTokensForEth(remains); uint256 transferredBalance = address(this).balance.sub(initialBalance); uint256 devBalance = transferredBalance.mul(div2).div(100); uint256 buybackBalance = transferredBalance.sub(devBalance); // Send to Marketing address transferToAddressETH(buybackAddress, buybackBalance); transferToAddressETH(devAddress, devBalance); emit SwapAndLiquify(half, newBalance, otherHalf); } function swapTokensForEth(uint256 tokenAmount) private { // Generate the uniswap pair path of token -\u0026gt; WETH address[] memory path = new address[](2); path[0] = address(this); path[1] = uniswapV2Router.WETH(); _approve(address(this), address(uniswapV2Router), tokenAmount); // Make the swap uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, // Accept any amount of ETH path, address(this), // The contract block.timestamp ); emit SwapTokensForETH(tokenAmount, path); } function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private { // Approve token transfer to cover all possible scenarios _approve(address(this), address(uniswapV2Router), tokenAmount); // Add the liquidity uniswapV2Router.addLiquidityETH{value: ethAmount}( address(this), tokenAmount, 0, // Slippage is unavoidable 0, // Slippage is unavoidable lpAddress, block.timestamp ); } function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private { if(sniperProtection) { // if sender is a sniper address, reject the sell. if(isSniper(sender)) { revert(\u0026#39;Sniper rejected.\u0026#39;); } // check if this is the liquidity adding tx to startup. if(!_hasLiqBeenAdded) { _checkLiquidityAdd(sender, recipient); } else { if( launchedAt \u0026gt; 0 \u0026amp;\u0026amp; sender == uniswapV2Pair \u0026amp;\u0026amp; !_liquidityHolders[sender] \u0026amp;\u0026amp; !_liquidityHolders[recipient] ) { if(block.number - launchedAt \u0026lt; 3) { _isSniper[recipient] = true; snipersCaught++; } } } } if(!takeFee) removeAllFee(); if (_isExcluded[sender] \u0026amp;\u0026amp; !_isExcluded[recipient]) { _transferFromExcluded(sender, recipient, amount); } else if (!_isExcluded[sender] \u0026amp;\u0026amp; _isExcluded[recipient]) { _transferToExcluded(sender, recipient, amount); } else if (_isExcluded[sender] \u0026amp;\u0026amp; _isExcluded[recipient]) { _transferBothExcluded(sender, recipient, amount); } else { _transferStandard(sender, recipient, amount); } if(!takeFee) restoreAllFee(); } function _transferStandard(address sender, address recipient, uint256 tAmount) private { (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount); _rOwned[sender] = _rOwned[sender].sub(rAmount); _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); _takeLiquidity(tLiquidity); _reflectFee(rFee, tFee); emit Transfer(sender, recipient, tTransferAmount); } function _transferToExcluded(address sender, address recipient, uint256 tAmount) private { (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount); _rOwned[sender] = _rOwned[sender].sub(rAmount); _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount); _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); _takeLiquidity(tLiquidity); _reflectFee(rFee, tFee); emit Transfer(sender, recipient, tTransferAmount); } function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private { (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount); _tOwned[sender] = _tOwned[sender].sub(tAmount); _rOwned[sender] = _rOwned[sender].sub(rAmount); _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); _takeLiquidity(tLiquidity); _reflectFee(rFee, tFee); emit Transfer(sender, recipient, tTransferAmount); } function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private { (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount); _tOwned[sender] = _tOwned[sender].sub(tAmount); _rOwned[sender] = _rOwned[sender].sub(rAmount); _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount); _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); _takeLiquidity(tLiquidity); _reflectFee(rFee, tFee); emit Transfer(sender, recipient, tTransferAmount); } function _reflectFee(uint256 rFee, uint256 tFee) private { _rTotal = _rTotal.sub(rFee); _tFeeTotal = _tFeeTotal.add(tFee); } function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) { (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount); (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate()); return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity); } function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) { uint256 tFee = calculateTaxFee(tAmount); uint256 tLiquidity = calculateLiquidityFee(tAmount); uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity); return (tTransferAmount, tFee, tLiquidity); } function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) { uint256 rAmount = tAmount.mul(currentRate); uint256 rFee = tFee.mul(currentRate); uint256 rLiquidity = tLiquidity.mul(currentRate); uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity); return (rAmount, rTransferAmount, rFee); } function _getRate() private view returns(uint256) { (uint256 rSupply, uint256 tSupply) = _getCurrentSupply(); return rSupply.div(tSupply); } function _getCurrentSupply() private view returns(uint256, uint256) { uint256 rSupply = _rTotal; uint256 tSupply = _tTotal; for (uint256 i = 0; i \u0026lt; _excluded.length; i++) { if (_rOwned[_excluded[i]] \u0026gt; rSupply || _tOwned[_excluded[i]] \u0026gt; tSupply) return (_rTotal, _tTotal); rSupply = rSupply.sub(_rOwned[_excluded[i]]); tSupply = tSupply.sub(_tOwned[_excluded[i]]); } if (rSupply \u0026lt; _rTotal.div(_tTotal)) return (_rTotal, _tTotal); return (rSupply, tSupply); } function _takeLiquidity(uint256 tLiquidity) private { uint256 currentRate = _getRate(); uint256 rLiquidity = tLiquidity.mul(currentRate); _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity); if(_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity); } function calculateTaxFee(uint256 _amount) private view returns (uint256) { return _amount.mul(_taxFee).div( 10**2 ); } function calculateLiquidityFee(uint256 _amount) private view returns (uint256) { if(launchedAt.add(3) \u0026gt;= block.number){ return _amount.mul(_liquidityFee.mul(7)).div( 10**2 ); } else { return _amount.mul(_liquidityFee).div( 10**2 ); } } function manualSwapandLiquify(uint256 _balance) external onlyOwner { swapAndLiquify(_balance); } function setLaunchLiqPair (address _pair) public onlyOwner { uniswapV2Pair = _pair; } function isSniper(address account) public view returns(bool) { return _isSniper[account]; } function removeAllFee() private { if(_taxFee == 0 \u0026amp;\u0026amp; _liquidityFee == 0) return; _previousTaxFee = _taxFee; _previousLiquidityFee = _liquidityFee; _taxFee = 0; _liquidityFee = 0; } function restoreAllFee() private { _taxFee = _previousTaxFee; _liquidityFee = _previousLiquidityFee; } function isExcludedFromFee(address account) public view returns(bool) { return _isExcludedFromFee[account]; } function excludeFromFee(address account) public onlyOwner { _isExcludedFromFee[account] = true; } function includeInFee(address account) public onlyOwner { _isExcludedFromFee[account] = false; } function GetSwapMinutes() public view returns(uint256) { return _intervalSecondsForSwap.div(60); } function SetSwapMinutes(uint256 newMinutes) external onlyOwner { _intervalSecondsForSwap = newMinutes * 1 minutes; } function setTaxFeePercent(uint256 taxFee) external onlyOwner() { require(taxFee \u0026lt; 30, \u0026#34;tax too high\u0026#34;); _taxFee = taxFee; } function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner { require(liquidityFee \u0026lt; 30, \u0026#34;tax too high\u0026#34;); _liquidityFee = liquidityFee; } function setDivs(uint256 _div1, uint256 _div2) external onlyOwner { div1 = _div1; div2 = _div2; } function addressChange(address payable _lpAddress, address payable _stakingAddress, address payable _devAddress, address payable _buybackAddress) external onlyOwner{ require(_devAddress != address(0),\u0026#34;cant set dev address 0\u0026#34;); require(_buybackAddress != address(0),\u0026#34;cant set buyback address 0\u0026#34;); lpAddress = _lpAddress; stakingAddress = _stakingAddress; devAddress = _devAddress; buybackAddress = _buybackAddress; } function _checkLiquidityAdd(address from, address to) private { // if liquidity is added by the _liquidityholders set trading enables to true and start the anti sniper timer require(!_hasLiqBeenAdded, \u0026#39;Liquidity already added and marked.\u0026#39;); if(_liquidityHolders[from] \u0026amp;\u0026amp; to == uniswapV2Pair) { _hasLiqBeenAdded = true; _tradingEnabled = true; launchedAt = block.number; } } function removeSniper(address account) external onlyOwner { require(_isSniper[account], \u0026#39;Account is not a recorded sniper.\u0026#39;); _isSniper[account] = false; } function changeWhaleSettings(uint256 maxTxAmount, uint256 maxWallet) external onlyOwner { require(maxTxAmount \u0026gt; totalSupply().div(1000), \u0026#34;max tx too low\u0026#34;); require(maxWallet \u0026gt; totalSupply().div(1000), \u0026#34;max wallet too low\u0026#34;); _maxWallet = maxWallet; _maxTxAmount = maxTxAmount; } function setMinimumTokensBeforeSwap(uint256 _minimumTokensBeforeSwap) external onlyOwner { minimumTokensBeforeSwap = _minimumTokensBeforeSwap; } function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner { swapAndLiquifyEnabled = _enabled; emit SwapAndLiquifyEnabledUpdated(_enabled); } function transferToAddressETH(address payable recipient, uint256 amount) private { recipient.transfer(amount); } function buyBack() public payable { address[] memory path = new address[](2); path[0] = uniswapV2Router.WETH(); path[1] = address(this); uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value : msg.value}(0,path,stakingAddress,block.timestamp.add(10)); } function launched() internal view returns (bool) { return launchedAt != 0; } function launch() public onlyOwner { launchedAt = block.number; _hasLiqBeenAdded = true; _tradingEnabled = true; } function afterPreSale() external onlyOwner { setSwapAndLiquifyEnabled(true); _taxFee = 1; _liquidityFee = 14; _maxTxAmount = 3 * 10**5 * 10**9; } function multisend( address[] memory dests, uint256[] memory values) public onlyOwner returns (uint256) { uint256 i = 0; while (i \u0026lt; dests.length) { transfer(dests[i], values[i]); i += 1; } return(i); } function changeRouterVersion(address _router) public onlyOwner returns(address _pair) { IUniswapV2Router _uniswapV2Router = IUniswapV2Router(_router); _pair = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(address(this), _uniswapV2Router.WETH()); if(_pair == address(0)){ // Pair doesn\u0026#39;t exist _pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH()); } uniswapV2Pair = _pair; // Set the router of the contract variables uniswapV2Router = _uniswapV2Router; } // To recieve BNB from pancakeV2Router when swapping receive() external payable {} function transferForeignToken(address _token, address _to) public onlyOwner returns(bool _sent){ uint256 _contractBalance = IBEP20(_token).balanceOf(address(this)); _sent = IBEP20(_token).transfer(_to, _contractBalance); } function Sweep() external onlyOwner { uint256 balance = address(this).balance; payable(owner()).transfer(balance); } } We can observer many things here but the most important one is the code related to the backdoor.\nFinding the backdoor in the needle In this case, a simple method is how the backdoor is implemented to withdraw all funds of the contract. Take a detailed look to method Sweep below.\n1 2 3 4 function Sweep() external onlyOwner { uint256 balance = address(this).balance; payable(owner()).transfer(balance); } Yep! A function that only the contract owner can use (first red flag 🚩). And a function that transfer current contract balance to owner address (second red flag 🚩). A simple but effective way of withdrawing all ETH/BNB of the users.\nConclusion Investment advice\nDON\u0026#39;T invest in POKELON. Its a SCAM! Never trust any token or crypto project before getting informed. Always try to do your own research (DYOR) and stay away of shitcoins like POKELON.\nReferences https://fortune.com/2022/03/02/crypto-scam-rug-pull-what-is-it https://coinmarketcap.com/currencies/pokelon/ https://bscscan.com/address/0x4945c9E9dF719ad0602a10F4064e71326e5628f0#code Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2022-05-27T00:00:00Z","image":"https://curiousstuff.eu/post/hunting-rug-pulls-in-binance-smart-chain-by-code-reviewing/christian-englmeier-YfJJ1Lj2iqc-unsplash_hu10347fc66f15bb88cca08f6a4947c422_820550_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/hunting-rug-pulls-in-binance-smart-chain-by-code-reviewing/","title":"Hunting RUG PULLs in Binance Smart Chain by code reviewing"},{"content":"Hexadecimal format Hexadecimal is the name of the numbering system that is base 16. This system, therefore, has numerals 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, and 15. That means that two-digit decimal numbers 10, 11, 12, 13, 14, and 15 must be represented by a single numeral to exist in this numbering system. To address the two-digit decimal values, the alphabetic characters A, B, C, D, E, and F are used to represent these values in hexadecimal and are treated as valid numerals.\nGoal Understand and evaluate whether community used ways of converting a decimal number to hexadecimal string are performance optimized or not.\nDecimal to Hexadecimal conversion algorithm Assuming no idea of its algorithm, a simple Google search result show us following top referenced websites.\nhttps://stackoverflow.com/questions/33581426/how-can-i-convert-from-int-to-hex https://www.techieindoor.com/go-program-to-convert-decimal-number-to-hexadecimal-in-go/ https://schadokar.dev/to-the-point/convert-hexadecimal-to-decimal-and-decimal-to-hexadecimal-in-golang/ A review of their content shows that declared ways to execute this conversion are based on:\nfmt.Sprintf strconv.FormatInt For completeness, I also search if any library on Github was available for this task, and this is what I found.\nGithub search results for ‘Decimal to Hexadecimal’ query string For our test and comparison, I prepare following implementation based on most common referenced methods of converson.\nstrconv.FormatInt based conversion 1 2 3 4 5 // WithFormatInt make uses of Go std FormatInt() to convert from // decimal to hexadecimal func WithFormatInt(v int64) string { return strconv.FormatInt(v, 16) } fmt.Sprintf based conversion 1 2 3 4 5 // WithFmt make uses of Go std fmt.Sprintf() to convert from // decimal to hexadecimal func WithFmt(v int64) string { return fmt.Sprintf(\u0026#34;%x\u0026#34;, v) } Github sample based conversion See original implementation at: https://github.com/TDCQZD/GoDev/blob/982ca325329baab67489d7f3d4f43dcdc8bdf561/utils/convert.go#L53\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // WithGithubCode1 makes uses of github algorithm at // https://github.com/TDCQZD/GoDev/blob/982ca325329baab67489d7f3d4f43dcdc8bdf561/utils/convert.go#L53 func WithGithubCode1(v int64) string { if v \u0026lt; 0 { log.Println(\u0026#34;Decimal to hexadecimal error: the argument must be greater than zero.\u0026#34;) return \u0026#34;\u0026#34; } if v == 0 { return \u0026#34;0\u0026#34; } hex := map[int64]int64{10: 65, 11: 66, 12: 67, 13: 68, 14: 69, 15: 70} s := \u0026#34;\u0026#34; for q := v; q \u0026gt; 0; q = q / 16 { m := q % 16 if m \u0026gt; 9 \u0026amp;\u0026amp; m \u0026lt; 16 { m = hex[m] // NOTE$: minor tweak applied here!! // ./dec2hex_impl_test.go:39:28: conversion from int64 to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?) m2 := string(rune(m)) s = fmt.Sprintf(\u0026#34;%v%v\u0026#34;, m2, s) continue } s = fmt.Sprintf(\u0026#34;%v%v\u0026#34;, m, s) } return s } Algorithms evaluation After selecting our 3 candidate algorithms, we need to write some test benchmarks. The designed benchmark is as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 const ( maxInt64 int64 = math.MaxInt64 ) func BenchmarkFormat(b *testing.B) { b.Run(\u0026#34;$name\u0026#34;, func(b *testing.B) { var v string b.ReportAllocs() b.SetBytes(1) b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { v = f(maxInt64) } assert.Equal(b, v, \u0026#34;7fffffffffffffff\u0026#34;) }) } in where f is the function to be evaluated.\nRunning the benchmark To run the benchmark of different algorithms, we run our benchmark implementations with following command to have more consistent results and less noise.\n1 go test -bench=. -count 10 -run=^# -benchtime=10s strconv.FormatInt performance 1 2 3 4 5 6 7 8 9 10 BenchmarkFormat/method-12 145798183 42.94 ns/op 23.29 MB/s 16 B/op 1 allocs/op BenchmarkFormat/method-12 149771547 39.91 ns/op 25.05 MB/s 16 B/op 1 allocs/op BenchmarkFormat/method-12 147820340 40.39 ns/op 24.76 MB/s 16 B/op 1 allocs/op BenchmarkFormat/method-12 148916902 40.31 ns/op 24.81 MB/s 16 B/op 1 allocs/op BenchmarkFormat/method-12 147492764 40.28 ns/op 24.83 MB/s 16 B/op 1 allocs/op BenchmarkFormat/method-12 148211959 40.15 ns/op 24.91 MB/s 16 B/op 1 allocs/op BenchmarkFormat/method-12 147424143 40.92 ns/op 24.44 MB/s 16 B/op 1 allocs/op BenchmarkFormat/method-12 149000188 40.93 ns/op 24.43 MB/s 16 B/op 1 allocs/op BenchmarkFormat/method-12 150341578 40.25 ns/op 24.84 MB/s 16 B/op 1 allocs/op BenchmarkFormat/method-12 148663681 40.20 ns/op 24.88 MB/s 16 B/op 1 allocs/op fmt.Sprintf performance 1 2 3 4 5 6 7 8 9 10 BenchmarkFormat/method-12 54556720 103.5 ns/op 9.66 MB/s 24 B/op 2 allocs/op BenchmarkFormat/method-12 50335326 103.5 ns/op 9.66 MB/s 24 B/op 2 allocs/op BenchmarkFormat/method-12 57254042 103.3 ns/op 9.68 MB/s 24 B/op 2 allocs/op BenchmarkFormat/method-12 56824764 103.3 ns/op 9.68 MB/s 24 B/op 2 allocs/op BenchmarkFormat/method-12 57379758 103.2 ns/op 9.69 MB/s 24 B/op 2 allocs/op BenchmarkFormat/method-12 48998893 103.7 ns/op 9.64 MB/s 24 B/op 2 allocs/op BenchmarkFormat/method-12 57366576 103.8 ns/op 9.63 MB/s 24 B/op 2 allocs/op BenchmarkFormat/method-12 56660234 103.1 ns/op 9.70 MB/s 24 B/op 2 allocs/op BenchmarkFormat/method-12 57384453 103.4 ns/op 9.67 MB/s 24 B/op 2 allocs/op BenchmarkFormat/method-12 57449592 103.6 ns/op 9.65 MB/s 24 B/op 2 allocs/op Github sample performance 1 2 3 4 5 6 7 8 9 10 BenchmarkFormat/method-12 2276696 2637 ns/op 0.38 MB/s 704 B/op 60 allocs/op BenchmarkFormat/method-12 2268352 2637 ns/op 0.38 MB/s 704 B/op 60 allocs/op BenchmarkFormat/method-12 2284990 2653 ns/op 0.38 MB/s 704 B/op 60 allocs/op BenchmarkFormat/method-12 2267804 2641 ns/op 0.38 MB/s 704 B/op 60 allocs/op BenchmarkFormat/method-12 2266641 2645 ns/op 0.38 MB/s 704 B/op 60 allocs/op BenchmarkFormat/method-12 2261485 2633 ns/op 0.38 MB/s 704 B/op 60 allocs/op BenchmarkFormat/method-12 2259590 2651 ns/op 0.38 MB/s 704 B/op 60 allocs/op BenchmarkFormat/method-12 2256315 2632 ns/op 0.38 MB/s 704 B/op 60 allocs/op BenchmarkFormat/method-12 2254988 2646 ns/op 0.38 MB/s 704 B/op 60 allocs/op BenchmarkFormat/method-12 2273128 2640 ns/op 0.38 MB/s 704 B/op 60 allocs/op As seen, the best way to convert a decimal number to hexadecimal is using strconv.FormatInt. But, can be improved?\nOptimizing conversion of Decimal to Hex in Go To optimize the conversion of a decimal number to hexadecimal string, we will try to stick to conversion algorithm simplicity. To do so, we implement following format conversion function\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // FormatDst converts uint64 to Hex value // using provided byte destination slice func FormatDst(dst *HexWrap, n uint64) Hex { if n == 0 { return Hex(\u0026#34;0\u0026#34;) } var idx uint8 = 16 // we are assuming \u0026#39;dst\u0026#39; wont be never nil _ = dst[15] for q := n; q \u0026gt; 0; q \u0026gt;\u0026gt;= 4 { m := q % 16 dst[idx-1] = uint8(48 + m) if m \u0026gt; 9 { dst[idx-1] += 7 } idx-- } return dst[idx:] } Performance evaluation As earlier, we run same go test benchmarking command and collect the results. In my case, resuls are shown below.\n1 2 3 4 5 6 7 8 9 10 BenchmarkFormat/method-12 400862162 14.98 ns/op 66.76 MB/s 0 B/op 0 allocs/op BenchmarkFormat/method-12 401325345 15.05 ns/op 66.47 MB/s 0 B/op 0 allocs/op BenchmarkFormat/method-12 401947982 14.90 ns/op 67.11 MB/s 0 B/op 0 allocs/op BenchmarkFormat/method-12 395986663 14.91 ns/op 67.09 MB/s 0 B/op 0 allocs/op BenchmarkFormat/method-12 400444760 14.98 ns/op 66.75 MB/s 0 B/op 0 allocs/op BenchmarkFormat/method-12 400612969 14.93 ns/op 67.00 MB/s 0 B/op 0 allocs/op BenchmarkFormat/method-12 402221857 14.90 ns/op 67.12 MB/s 0 B/op 0 allocs/op BenchmarkFormat/method-12 399473108 14.99 ns/op 66.70 MB/s 0 B/op 0 allocs/op BenchmarkFormat/method-12 401921162 14.94 ns/op 66.93 MB/s 0 B/op 0 allocs/op BenchmarkFormat/method-12 393383830 14.99 ns/op 66.72 MB/s 0 B/op 0 allocs/op Final score Finally, we can compare the improvement with benchstat utility and we get\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 benchstat fmt.txt ours.txt name old time/op new time/op delta Format/method-12 103ns ± 0% 15ns ± 1% -85.54% (p=0.000 n=10+10) name old speed new speed delta Format/method-12 9.67MB/s ± 0% 66.86MB/s ± 1% +591.75% (p=0.000 n=10+10) name old alloc/op new alloc/op delta Format/method-12 24.0B ± 0% 0.0B -100.00% (p=0.000 n=10+10) name old allocs/op new allocs/op delta Format/method-12 2.00 ± 0% 0.00 -100.00% (p=0.000 n=10+10) benchstat formatint.txt ours2.txt name old time/op new time/op delta Format/method-12 40.4ns ± 1% 15.0ns ± 1% -62.95% (p=0.000 n=9+10) name old speed new speed delta Format/method-12 24.8MB/s ± 1% 66.9MB/s ± 1% +169.92% (p=0.000 n=9+10) name old alloc/op new alloc/op delta Format/method-12 16.0B ± 0% 0.0B -100.00% (p=0.000 n=10+10) name old allocs/op new allocs/op delta Format/method-12 1.00 ± 0% 0.00 -100.00% (p=0.000 n=10+10) benchstat github1.txt ours2.txt name old time/op new time/op delta Format/method-12 2.64µs ± 0% 0.01µs ± 1% -99.43% (p=0.000 n=10+10) name old speed new speed delta Format/method-12 380kB/s ± 0% 66865kB/s ± 1% +17496.05% (p=0.000 n=10+10) name old alloc/op new alloc/op delta Format/method-12 704B ± 0% 0B -100.00% (p=0.000 n=10+10) name old allocs/op new allocs/op delta Format/method-12 60.0 ± 0% 0.0 -100.00% (p=0.000 n=10+10) Use cases After reading all this you might be wondering\u0026hellip;why?\nWell, the first reason is obvious, better coding, better performance, less resources, and hence, less billing on cloud services.\nSeconds, because now, I can efficiently convert the EVM PC instruction pointer from decimal to hexadecimal format, as seen in Converting EVM bytecode to OPCODES in microseconds\n1 2 -\u0026gt; 0x00AA PUSH1 0x40 -\u0026gt; 0x00AA this is the instruction pointer of EVM If wanted, you can use this library too. It is published at https://github.com/zerjioang/dec2hex\nConclusion Google tends to provide good search results most of the times. However, when designing systems and algorithms you should take some time to thing the best way to achieve some specific taks In this case, the base conversion of decimal number to hexadecimal is a trivial case. Doing it the right way, is proven to be 150-500% memory faster than standard solutions provided by Google and top Github search results. So as always, DYOR!\nSubscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2022-04-01T00:00:00Z","image":"https://curiousstuff.eu/post/dec2hex-optimizing-decimal-to-hexadecimal-conversion-algorithms-for-speed/marc-sendra-martorell--Vqn2WrfxTQ-unsplash_hu7fcbc64d3a7e33c4ebf67b50fca79869_497495_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/dec2hex-optimizing-decimal-to-hexadecimal-conversion-algorithms-for-speed/","title":"Dec2hex: optimizing decimal to hexadecimal conversion algorithms for speed"},{"content":"Decompiling EVM Bytecode The process of decompiling an ethereum application can be very expensive. When you start an analysis process, you can take as a basis the network bytecode or the source code in Solidity. Doing a white box analysis is generally less expensive and requires programming knowledge in Solidity only. A bytecode analysis, however, requires low-level knowledge, understanding the operation of opcodes, EVM instructions, the stack, memory and storage modules, etc.\nRegardless, one of the first tasks to do, when trying to understand what a Dapp does, is to process its bytecode. And by the way, low level stuff is more fun!\nBytecode modelling in Go First thing we need to do, it to model the bytecode representation in Go language. For this purpose, we take that all input data will be as hexadecimal strings in format 0x... or without the prefix 0x.\nSince opcode can vary from 0x00 to 0xFF we will consider a single byte as data type for an opcode, given its defined data range.\n1 2 // OpCode is an EVM opcode type OpCode byte In the same way, we also define an OPCODE category as below (for future uses)\n1 2 // OpcodeCategory is a predefined category of the opcode type OpcodeCategory uint8 Bytecode processor in Go To define what we do when we found a valid OPCODE or EVM instruction, we create custom datatype that will be used as data processor. In this case, it enough with:\n1 type opcodeProcessor func(inst *datatype.OpcodeData) With this, we decouple the parsing logic from output processing logic.\nNote that OpcodeData is just a wrapper struct that holds all required information to print the EVM instruction friendly to stdout.\nMain EVM bytecode processing loop The logic of EVM processing is simple. We need to read each of the opcodes and convert it to its human naming representation. Additionaly, if readed opcode is a PUSH instruction, we also need to read the parameters. When the instruction reading is over, we need to move to following one. This process must be repeated until no more opcodes are left.\nWarning\nFollowing code is a kind of pseudo code and might not compile if you copy and paste as is. For completeness, previous description is transpiled to next Go pseudocode:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 func parseBytecode(code []byte, onInstruction opcodeProcessor) error { // check that no empty bytecode was provided codesize := uint64(len(code)) // notes for reader: // * remember to handle edge cases properly // * add implement errors i := uint64(0) for i \u0026lt; codesize { // read opcode bytes // since its encoded in hex, we need to read 2 bytes (2 char) op := code[i : i+2] // get opcode value from extracted bytes instruction := hex2opcode(op) var dataSize byte = 0 if instruction.IsPush() { // size of the input data to be pushed is calculated based on current opcode // data size = opcode value - 0x60 + 1 dataSize = byte(instruction) - 0x60 + 1 } i, inst, err := buildOpcodeParameters(code, instruction, i, dataSize) // handle error // onInstruction will call the processor we previously define onInstruction(inst) } return nil } Final EVM bytecode reader After all, the final EVM bytecode reader will be handled in two separe functions\nOpcodeViewer function triggers the process of converting EVM bytecode to OPCODES. parseBytecode function contains all common logic to parse any EVM bytecode efficiently processor := func(inst *datatype.OpcodeData) the proccessor function. This is a developer defined function that will contain the logic to be executed when a EVM bytecode instruction is parsed. By default, it just adds the instruction string representation to an strings.Builder so that it can be printed in stdout later. This design decouples the parsing logic from the result processing logic, allowing more modular, clean and reusable code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 // OpcodeViewer reads input bytecode to extract opcode list func OpcodeViewer(runtimeCode string) (strings.Builder, error) { var sb strings.Builder processor := func(inst *datatype.OpcodeData) { if len(inst.Input) \u0026gt; 0 { // the current OPCODE represents an instruction with parameters (PUSH) sb.WriteString(fmt.Sprintf(\u0026#34;%s %s 0x%s\\n\u0026#34;, inst.PC(0), inst.Name, inst.Input)) } else { sb.WriteString(fmt.Sprintf(\u0026#34;%s %s\\n\u0026#34;, inst.PC(0), inst.Name)) } } return sb, bytecodereader.ReadBytecode(runtimeCode,processor) } I also defined a Test case and measured execution time with timeTrack function.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 func timeTrack(start time.Time, name string) { elapsed := time.Since(start) log.Printf(\u0026#34;%s took %s\u0026#34;, name, elapsed) } func TestOpcodeViewer(t *testing.T) { t.Run(\u0026#34;from-bytecode\u0026#34;, func(t *testing.T) { defer timeTrack(time.Now(), \u0026#34;convert-to-opcodes\u0026#34;) var sb strings.Builder list, err := OpcodeViewer(sb, \u0026#34;608060405234801561001057600080fd5b50600436106100365760003560e01c806370a082311461003b578063a9059cbb1461006d575b600080fd5b61005b61004936600461010f565b60006020819052908152604090205481565b60405190815260200160405180910390f35b61008061007b366004610131565b610082565b005b3360009081526020819052604090205481111561009e57600080fd5b33600090815260208190526040812080548392906100bd908490610171565b90915550506001600160a01b038216600090815260208190526040812080548392906100ea908490610188565b90915550505050565b80356001600160a01b038116811461010a57600080fd5b919050565b60006020828403121561012157600080fd5b61012a826100f3565b9392505050565b6000806040838503121561014457600080fd5b61014d836100f3565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156101835761018361015b565b500390565b6000821982111561019b5761019b61015b565b50019056fea26469706673582212205f26ba2996f6408ce05b13250d4ef2b5afa54847ef63bc2a113693b22dcf6f5764736f6c634300080b0033\u0026#34;) assert.NoError(t, err) assert.NotEmpty(t, list) fmt.Println(list.String()) }) } Finally, when running the test, will print to stdout the ordered list of EVM OPCODES, instruction PC and arguments. This is my output below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 === RUN TestOpcodeViewer === RUN TestOpcodeViewer/from-bytecode 0x0000 PUSH1 0x80 0x0002 PUSH1 0x40 0x0004 MSTORE 0x0005 CALLVALUE 0x0006 DUP1 0x0007 ISZERO 0x0008 PUSH2 0x0010 0x000B JUMPI 0x000C PUSH1 0x00 0x000E DUP1 0x000F REVERT 0x0010 JUMPDEST 0x0011 POP 0x0012 PUSH1 0x04 0x0014 CALLDATASIZE 0x0015 LT 0x0016 PUSH2 0x0036 0x0019 JUMPI 0x001A PUSH1 0x00 0x001C CALLDATALOAD 0x001D PUSH1 0xe0 0x001F SHR 0x0020 DUP1 0x0021 PUSH4 0x70a08231 0x0026 EQ 0x0027 PUSH2 0x003b 0x002A JUMPI 0x002B DUP1 0x002C PUSH4 0xa9059cbb 0x0031 EQ 0x0032 PUSH2 0x006d 0x0035 JUMPI 0x0036 JUMPDEST 0x0037 PUSH1 0x00 0x0039 DUP1 0x003A REVERT 0x003B JUMPDEST 0x003C PUSH2 0x005b 0x003F PUSH2 0x0049 0x0042 CALLDATASIZE 0x0043 PUSH1 0x04 0x0045 PUSH2 0x010f 0x0048 JUMP 0x0049 JUMPDEST 0x004A PUSH1 0x00 0x004C PUSH1 0x20 0x004E DUP2 0x004F SWAP1 0x0050 MSTORE 0x0051 SWAP1 0x0052 DUP2 0x0053 MSTORE 0x0054 PUSH1 0x40 0x0056 SWAP1 0x0057 SHA3 0x0058 SLOAD 0x0059 DUP2 0x005A JUMP 0x005B JUMPDEST 0x005C PUSH1 0x40 0x005E MLOAD 0x005F SWAP1 0x0060 DUP2 0x0061 MSTORE 0x0062 PUSH1 0x20 0x0064 ADD 0x0065 PUSH1 0x40 0x0067 MLOAD 0x0068 DUP1 0x0069 SWAP2 0x006A SUB 0x006B SWAP1 0x006C RETURN 0x006D JUMPDEST 0x006E PUSH2 0x0080 0x0071 PUSH2 0x007b 0x0074 CALLDATASIZE 0x0075 PUSH1 0x04 0x0077 PUSH2 0x0131 0x007A JUMP 0x007B JUMPDEST 0x007C PUSH2 0x0082 0x007F JUMP 0x0080 JUMPDEST 0x0081 STOP 0x0082 JUMPDEST 0x0083 CALLER 0x0084 PUSH1 0x00 0x0086 SWAP1 0x0087 DUP2 0x0088 MSTORE 0x0089 PUSH1 0x20 0x008B DUP2 0x008C SWAP1 0x008D MSTORE 0x008E PUSH1 0x40 0x0090 SWAP1 0x0091 SHA3 0x0092 SLOAD 0x0093 DUP2 0x0094 GT 0x0095 ISZERO 0x0096 PUSH2 0x009e 0x0099 JUMPI 0x009A PUSH1 0x00 0x009C DUP1 0x009D REVERT 0x009E JUMPDEST 0x009F CALLER 0x00A0 PUSH1 0x00 0x00A2 SWAP1 0x00A3 DUP2 0x00A4 MSTORE 0x00A5 PUSH1 0x20 0x00A7 DUP2 0x00A8 SWAP1 0x00A9 MSTORE 0x00AA PUSH1 0x40 0x00AC DUP2 0x00AD SHA3 0x00AE DUP1 0x00AF SLOAD 0x00B0 DUP4 0x00B1 SWAP3 0x00B2 SWAP1 0x00B3 PUSH2 0x00bd 0x00B6 SWAP1 0x00B7 DUP5 0x00B8 SWAP1 0x00B9 PUSH2 0x0171 0x00BC JUMP 0x00BD JUMPDEST 0x00BE SWAP1 0x00BF SWAP2 0x00C0 SSTORE 0x00C1 POP 0x00C2 POP 0x00C3 PUSH1 0x01 0x00C5 PUSH1 0x01 0x00C7 PUSH1 0xa0 0x00C9 SHL 0x00CA SUB 0x00CB DUP3 0x00CC AND 0x00CD PUSH1 0x00 0x00CF SWAP1 0x00D0 DUP2 0x00D1 MSTORE 0x00D2 PUSH1 0x20 0x00D4 DUP2 0x00D5 SWAP1 0x00D6 MSTORE 0x00D7 PUSH1 0x40 0x00D9 DUP2 0x00DA SHA3 0x00DB DUP1 0x00DC SLOAD 0x00DD DUP4 0x00DE SWAP3 0x00DF SWAP1 0x00E0 PUSH2 0x00ea 0x00E3 SWAP1 0x00E4 DUP5 0x00E5 SWAP1 0x00E6 PUSH2 0x0188 0x00E9 JUMP 0x00EA JUMPDEST 0x00EB SWAP1 0x00EC SWAP2 0x00ED SSTORE 0x00EE POP 0x00EF POP 0x00F0 POP 0x00F1 POP 0x00F2 JUMP 0x00F3 JUMPDEST 0x00F4 DUP1 0x00F5 CALLDATALOAD 0x00F6 PUSH1 0x01 0x00F8 PUSH1 0x01 0x00FA PUSH1 0xa0 0x00FC SHL 0x00FD SUB 0x00FE DUP2 0x00FF AND 0x0100 DUP2 0x0101 EQ 0x0102 PUSH2 0x010a 0x0105 JUMPI 0x0106 PUSH1 0x00 0x0108 DUP1 0x0109 REVERT 0x010A JUMPDEST 0x010B SWAP2 0x010C SWAP1 0x010D POP 0x010E JUMP 0x010F JUMPDEST 0x0110 PUSH1 0x00 0x0112 PUSH1 0x20 0x0114 DUP3 0x0115 DUP5 0x0116 SUB 0x0117 SLT 0x0118 ISZERO 0x0119 PUSH2 0x0121 0x011C JUMPI 0x011D PUSH1 0x00 0x011F DUP1 0x0120 REVERT 0x0121 JUMPDEST 0x0122 PUSH2 0x012a 0x0125 DUP3 0x0126 PUSH2 0x00f3 0x0129 JUMP 0x012A JUMPDEST 0x012B SWAP4 0x012C SWAP3 0x012D POP 0x012E POP 0x012F POP 0x0130 JUMP 0x0131 JUMPDEST 0x0132 PUSH1 0x00 0x0134 DUP1 0x0135 PUSH1 0x40 0x0137 DUP4 0x0138 DUP6 0x0139 SUB 0x013A SLT 0x013B ISZERO 0x013C PUSH2 0x0144 0x013F JUMPI 0x0140 PUSH1 0x00 0x0142 DUP1 0x0143 REVERT 0x0144 JUMPDEST 0x0145 PUSH2 0x014d 0x0148 DUP4 0x0149 PUSH2 0x00f3 0x014C JUMP 0x014D JUMPDEST 0x014E SWAP5 0x014F PUSH1 0x20 0x0151 SWAP4 0x0152 SWAP1 0x0153 SWAP4 0x0154 ADD 0x0155 CALLDATALOAD 0x0156 SWAP4 0x0157 POP 0x0158 POP 0x0159 POP 0x015A JUMP 0x015B JUMPDEST 0x015C PUSH4 0x4e487b71 0x0161 PUSH1 0xe0 0x0163 SHL 0x0164 PUSH1 0x00 0x0166 MSTORE 0x0167 PUSH1 0x11 0x0169 PUSH1 0x04 0x016B MSTORE 0x016C PUSH1 0x24 0x016E PUSH1 0x00 0x0170 REVERT 0x0171 JUMPDEST 0x0172 PUSH1 0x00 0x0174 DUP3 0x0175 DUP3 0x0176 LT 0x0177 ISZERO 0x0178 PUSH2 0x0183 0x017B JUMPI 0x017C PUSH2 0x0183 0x017F PUSH2 0x015b 0x0182 JUMP 0x0183 JUMPDEST 0x0184 POP 0x0185 SUB 0x0186 SWAP1 0x0187 JUMP 0x0188 JUMPDEST 0x0189 PUSH1 0x00 0x018B DUP3 0x018C NOT 0x018D DUP3 0x018E GT 0x018F ISZERO 0x0190 PUSH2 0x019b 0x0193 JUMPI 0x0194 PUSH2 0x019b 0x0197 PUSH2 0x015b 0x019A JUMP 0x019B JUMPDEST 0x019C POP 0x019D ADD 0x019E SWAP1 0x019F JUMP 0x01A0 INVALID 0x01A1 LOG2 0x01A2 PUSH5 0x6970667358 0x01A8 UNKNOWN 0x22 0x01A9 SLT 0x01AA SHA3 0x01AB UNKNOWN 0x5f 0x01AC UNKNOWN 0x26 0x01AD GETLOCAL 0x01AE UNKNOWN 0x29 0x01AF SWAP7 0x01B0 RNGSEED 0x01B1 BLOCKHASH 0x01B2 DUP13 0x01B3 UNKNOWN 0xe0 0x01B4 JUMPDEST 0x01B5 SGT 0x01B6 UNKNOWN 0x25 0x01B7 UNKNOWN 0x0d 0x01B8 UNKNOWN 0x4e 0x01B9 CALLCODE 0x01BA BEGINSUB 0x01BB UNKNOWN 0xaf 0x01BC UNKNOWN 0xa5 0x01BD BASEFEE 0x01BE SELFBALANCE 0x01BF UNKNOWN 0xef 0x01C0 PUSH4 0xbc2a1136 0x01C5 SWAP4 0x01C6 JUMPSUB 0x01C7 UNKNOWN 0x2d 0x01C8 UNKNOWN 0xcf 0x01C9 PUSH16 0x5764736f6c634300080b0033 convert-to-opcodes took 96.993µs --- PASS: TestOpcodeViewer (0.00s) Process finished with the exit code 0 As you can see, whole process of processing, parsing and output only takes 96.993µs\nBonus point: memory profiling As addition, we can profile the CPU and memory usage of the application to detect bottlenecks and improvement points. The current implementation memory profile, shown below, flags the areas of the program in where most memory is allocated. As seen, the allocation process takes part in:\nsome []byte to string conversion fmt.Printf method used to format each instruction to human representation Memory profiling view in Go pprof Memory profile view of the OPCODE converter Some minor tweaks are still posible to gain a bit more speed. Future work then!\nReferences https://ethereum.github.io/yellowpaper/paper.pdf https://github.com/crytic/evm-opcodes https://www.ethervm.io https://coderwall.com/p/cp5fya/measuring-execution-time-in-go Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2022-03-25T00:00:00Z","image":"https://curiousstuff.eu/post/converting-evm-bytecode-to-opcodes-in-microseconds/markus-spiske-cvBBO4PzWPg-unsplash_hu8f621aa8ee10e1d64391cb3305ec689a_622039_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/converting-evm-bytecode-to-opcodes-in-microseconds/","title":"Converting EVM bytecode to OPCODES in microseconds"},{"content":"There is a hidden feature in Ubuntu which will allow you to enable noise cancellation and enhance quality of your online conversations. Here is a short tutorial on how to do it.\nCreate a backup First, backup of the important stuff.\n1 sudo cp /etc/pulse/default.pa /etc/pulse/default.pa.bak Edit your configuration file Now edit default.pa file manually by entering following\n1 sudo vi /etc/pulse/default.pa Now, at the end of the file add following configuration\n1 2 3 load-module module-echo-cancel source_name=noechosource sink_name=noechosink set-default-source noechosource set-default-sink noechosink Warning\nYou will also get noise cancellation on your output device, and sometimes your audio won’t work and you will not hear sound. You will have to manually switch to output device which has no noise cancellation enabled. Restart your audio Final step is to restart the audio daemon with\n1 pulseaudio -k If you prefer, you can also reboot pc instead.\nAfter you are done, next time you start using your microphone (skype call, youtube session…) head to\n1 Settings \u0026gt;\u0026gt; Sound \u0026gt;\u0026gt; Input and change your input device to the one that has (echo cancelled) at the end of it. And thats all, you have echo cancellation enabled in Ubuntu.\nSubscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2022-03-18T00:00:00Z","image":"https://curiousstuff.eu/post/improve-your-sound-and-enable-noise-cancellation-in-ubuntu/scott-major-ZP2iqHtUtyc-unsplash_hu79f6b306c0452eed45ead179b3dcb218_646746_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/improve-your-sound-and-enable-noise-cancellation-in-ubuntu/","title":"Improve your sound and Enable Noise cancellation in Ubuntu"},{"content":"In this article I\u0026rsquo;m going to show you how an automated data extraction can be dome for massive data analysis processes. The goal is to download all interesting Blockchain information as a processable file like a CSV. I\u0026rsquo;ll guide you throw the process of making it possible.\nRequirements To be able to crawl the Blockchain data, we must have first a ledger peer syncronized and running. If you dont have one, you can check this guide about how to setup one.\nLinux/Ubuntu computer Python 3 Installed A working Ethereum node Basic Git knowledge Some brain Download Blockchain ETL tool Step 1: Install PIP and configure the virtualenv 1 2 3 4 5 6 7 python3 -m pip install --upgrade pip Collecting pip Downloading https://files.pythonhosted.org/packages/a4/6d/6463d49a933f547439d6b5b98b46af8742cc03ae83543e4d7688c2420f8b/pip-21.3.1-py3-none-any.whl (1.7MB) 100% |████████████████████████████████| 1.7MB 538kB/s Installing collected packages: pip Successfully installed pip-21.3.1 Once installed, we need to figure out the exact location of virtualenv application. We can find the exac path with which virtualenv command\n1 2 which virtualenv /usr/local/bin/virtualenv Create the virtualenv 1 virtualenv -p /usr/bin/python3.6 venv Activate the virtualenv To activate the new virtual environment, run the following:\n1 source venv/bin/activate The name of the current virtual environment appears to the left of the intent. For example: (venv)\nVersion check To verify the correct version of Python, run the following:\n1 python -V Any package you install using pip is now located in the virtual environment project folder, isolated from the global Python installation.\nDeactivate When you finish your work in your virtual environment, you can deactivate it by running the following:\n1 deactivate Delete your virtual environment To delete your virtual environment, simply delete the project folder. Using the above example, run the following command:\n1 rm -rf venv Installing Ethereum ETL To install the required tool used to download the data from the Blockchain in CSV format, we need to request pip to install it with pip install command.\n1 pip3 install ethereum-etl A successful installation should install following packages:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 Collecting ethereum-etl Downloading ethereum-etl-1.10.1.tar.gz (334 kB) |████████████████████████████████| 334 kB 2.1 MB/s Preparing metadata (setup.py) ... done Collecting web3==4.7.2 Downloading web3-4.7.2-py3-none-any.whl (126 kB) |████████████████████████████████| 126 kB 41.7 MB/s Collecting eth-utils==1.10.0 Downloading eth_utils-1.10.0-py3-none-any.whl (24 kB) Collecting eth-abi==1.3.0 Downloading eth_abi-1.3.0-py3-none-any.whl (21 kB) Collecting python-dateutil\u0026lt;3,\u0026gt;=2.8.0 Downloading python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB) |████████████████████████████████| 247 kB 32.0 MB/s Collecting click==7.1.2 Downloading click-7.1.2-py2.py3-none-any.whl (82 kB) |████████████████████████████████| 82 kB 685 kB/s Collecting ethereum-dasm==0.1.4 Downloading ethereum_dasm-0.1.4-py3-none-any.whl (44 kB) |████████████████████████████████| 44 kB 793 kB/s Collecting base58 Downloading base58-2.1.1-py3-none-any.whl (5.6 kB) Collecting requests Downloading requests-2.27.1-py2.py3-none-any.whl (63 kB) |████████████████████████████████| 63 kB 732 kB/s Collecting parsimonious\u0026lt;0.9.0,\u0026gt;=0.8.0 Downloading parsimonious-0.8.1.tar.gz (45 kB) |████████████████████████████████| 45 kB 1.8 MB/s Preparing metadata (setup.py) ... done Collecting eth-typing\u0026lt;3.0.0,\u0026gt;=2.0.0 Downloading eth_typing-2.3.0-py3-none-any.whl (6.2 kB) Collecting eth-hash\u0026lt;0.4.0,\u0026gt;=0.3.1 Downloading eth_hash-0.3.2-py3-none-any.whl (8.8 kB) Collecting cytoolz\u0026lt;1.0.0,\u0026gt;=0.10.1 Downloading cytoolz-0.11.2.tar.gz (481 kB) |████████████████████████████████| 481 kB 47.4 MB/s Preparing metadata (setup.py) ... done Collecting colorama Downloading colorama-0.4.4-py2.py3-none-any.whl (16 kB) Collecting tabulate Downloading tabulate-0.8.9-py3-none-any.whl (25 kB) Collecting evmdasm Downloading evmdasm-0.1.8-py3-none-any.whl (15 kB) Collecting websockets\u0026lt;7.0.0,\u0026gt;=6.0.0 Downloading websockets-6.0-cp36-cp36m-manylinux1_x86_64.whl (88 kB) |████████████████████████████████| 88 kB 3.5 MB/s Collecting lru-dict\u0026lt;2.0.0,\u0026gt;=1.1.6 Downloading lru-dict-1.1.7.tar.gz (10 kB) Preparing metadata (setup.py) ... done Collecting eth-account\u0026lt;0.4.0,\u0026gt;=0.2.1 Downloading eth_account-0.3.0-py3-none-any.whl (18 kB) Collecting hexbytes\u0026lt;1.0.0,\u0026gt;=0.1.0 Downloading hexbytes-0.2.2-py3-none-any.whl (6.1 kB) Collecting six\u0026gt;=1.5 Downloading six-1.16.0-py2.py3-none-any.whl (11 kB) Collecting urllib3\u0026lt;1.27,\u0026gt;=1.21.1 Downloading urllib3-1.26.8-py2.py3-none-any.whl (138 kB) |████████████████████████████████| 138 kB 45.9 MB/s Collecting certifi\u0026gt;=2017.4.17 Downloading certifi-2021.10.8-py2.py3-none-any.whl (149 kB) |████████████████████████████████| 149 kB 23.5 MB/s Collecting charset-normalizer~=2.0.0 Downloading charset_normalizer-2.0.12-py3-none-any.whl (39 kB) Collecting idna\u0026lt;4,\u0026gt;=2.5 Downloading idna-3.3-py3-none-any.whl (61 kB) |████████████████████████████████| 61 kB 3.1 MB/s Collecting toolz\u0026gt;=0.8.0 Downloading toolz-0.11.2-py3-none-any.whl (55 kB) |████████████████████████████████| 55 kB 1.7 MB/s Collecting eth-rlp\u0026lt;1,\u0026gt;=0.1.2 Downloading eth_rlp-0.2.1-py3-none-any.whl (5.0 kB) Collecting eth-keys\u0026lt;0.3.0,\u0026gt;=0.2.0b3 Downloading eth_keys-0.2.4-py3-none-any.whl (24 kB) Collecting eth-keyfile\u0026lt;0.6.0,\u0026gt;=0.5.0 Downloading eth_keyfile-0.5.1-py3-none-any.whl (8.3 kB) Collecting attrdict\u0026lt;3,\u0026gt;=2.0.0 Downloading attrdict-2.0.1-py2.py3-none-any.whl (9.9 kB) Collecting pycryptodome\u0026lt;4,\u0026gt;=3.6.6 Downloading pycryptodome-3.14.1-cp35-abi3-manylinux2010_x86_64.whl (2.0 MB) |████████████████████████████████| 2.0 MB 44.7 MB/s Collecting rlp\u0026lt;3,\u0026gt;=0.6.0 Downloading rlp-2.0.1-py2.py3-none-any.whl (20 kB) Building wheels for collected packages: ethereum-etl, cytoolz, lru-dict, parsimonious Building wheel for ethereum-etl (setup.py) ... done Created wheel for ethereum-etl: filename=ethereum_etl-1.10.1-py3-none-any.whl size=436719 sha256=c2c9639fc6cb24b60320fe794eb62f7db5ff9c9f5951a92f73222e63b73d9bcf Stored in directory: /home/sergio/.cache/pip/wheels/d0/d1/45/da3b3e227bd0e30cc39940703976d27ffd759669b68bd5093f Building wheel for cytoolz (setup.py) ... done Created wheel for cytoolz: filename=cytoolz-0.11.2-cp36-cp36m-linux_x86_64.whl size=1233238 sha256=5b6969b4f5403d57a4e079d56d453e5a07382537d9c09c2ced9c62c88bef7121 Stored in directory: /home/sergio/.cache/pip/wheels/83/c8/80/3663b26cb65ea0add681ebbf422874089a085bd2bff6d97b25 Building wheel for lru-dict (setup.py) ... done Created wheel for lru-dict: filename=lru_dict-1.1.7-cp36-cp36m-linux_x86_64.whl size=27493 sha256=d1a6574bd8c9134cde5ddc2c801238425300eef52e434102f4d28734069f454b Stored in directory: /home/sergio/.cache/pip/wheels/ae/61/6d/2c1544021f8e787b602ed799d88e0d1ab4437ffb09a04102a0 Building wheel for parsimonious (setup.py) ... done Created wheel for parsimonious: filename=parsimonious-0.8.1-py3-none-any.whl size=42723 sha256=50f7e8c9189d8f09faadcb04ffdbcb5a2126cdbe71d8e1e2ae74f737484dc587 Stored in directory: /home/sergio/.cache/pip/wheels/43/95/c9/c9f7a3f9dc34ebd851739148bd5b42ab35618ea0808388647c Successfully built ethereum-etl cytoolz lru-dict parsimonious Installing collected packages: toolz, eth-typing, eth-hash, cytoolz, eth-utils, six, rlp, pycryptodome, hexbytes, eth-keys, urllib3, parsimonious, idna, eth-rlp, eth-keyfile, charset-normalizer, certifi, attrdict, websockets, tabulate, requests, lru-dict, evmdasm, eth-account, eth-abi, colorama, web3, python-dateutil, ethereum-dasm, click, base58, ethereum-etl Successfully installed attrdict-2.0.1 base58-2.1.1 certifi-2021.10.8 charset-normalizer-2.0.12 click-7.1.2 colorama-0.4.4 cytoolz-0.11.2 eth-abi-1.3.0 eth-account-0.3.0 eth-hash-0.3.2 eth-keyfile-0.5.1 eth-keys-0.2.4 eth-rlp-0.2.1 eth-typing-2.3.0 eth-utils-1.10.0 ethereum-dasm-0.1.4 ethereum-etl-1.10.1 evmdasm-0.1.8 hexbytes-0.2.2 idna-3.3 lru-dict-1.1.7 parsimonious-0.8.1 pycryptodome-3.14.1 python-dateutil-2.8.2 requests-2.27.1 rlp-2.0.1 six-1.16.0 tabulate-0.8.9 toolz-0.11.2 urllib3-1.26.8 web3-4.7.2 websockets-6.0 Checking Ethereum ETL tool is successfully installed To check ethereumetl tool is successfully installed, we just print tool version to stdout.\n1 ethereumetl --version which report us the tool version number as expected.\n1 ethereumetl, version 1.10.1 Data extraction process Now that the crawling tool is working, we can start our data extraction process. In order to extract the contract (dapps) information there are some steps that needs to be done:\nFetch all existing Blocks. For each block, extract transaction information. For each transaction, check whether contains contract installation instruction or not. Store to CSV all found contract data for further analysis. 1. Crawling Ethereum blocks and transaction information I configured my node to connect via IPC file located at file://$HOME/.ethereum/rinkeby/geth.ipc. If your *.ipc files is located in other path, update it accordingly.\n1 2 3 4 5 6 7 ethereumetl export_blocks_and_transactions \\ -w 2 -b 3 \\ --end-block 10337980 \\ --start-block 0 \\ --provider-uri file://$HOME/.ethereum/rinkeby/geth.ipc \\ --blocks-output blocks.csv \\ --transactions-output transactions.csv 2. Crawling Ethereum transactions and logs Next step, it to extract transaction from readed blocks.\nNote: if you encounter issues when requesting transaction information, make sure your node is running with --txlookuplimit=0 flag. This will index all transactions\u0026rsquo; hash.\n1 2 3 4 ethereumetl extract_csv_column \\ --input transactions.csv \\ --column hash \\ --output transaction_hashes.txt Then export receipts and logs:\n1 2 3 4 5 ethereumetl export_receipts_and_logs \\ --transaction-hashes transaction_hashes.txt \\ --provider-uri file://$HOME/.ethereum/rinkeby/geth.ipc \\ --receipts-output receipts.csv \\ --logs-output logs.csv 3. Crawling Ethereum contract addresses First extract contract addresses from receipts.csv\n1 2 3 4 ethereumetl extract_csv_column \\ --input receipts.csv \\ --column contract_address \\ --output contract_addresses.txt 3.1 Crawling Ethereum contract bytecode Once we have all contract addresses in our contract_addresses.txt file, we can crawl their bytecode.\n1 2 3 4 ethereumetl export_contracts \\ --contract-addresses contract_addresses.txt \\ --provider-uri file://$HOME/.ethereum/rinkeby/geth.ipc \\ --output contracts.csv Remember you can tune --batch-size, --max-workers for performance.\n4 Store All contract data as CSV At this point, you should have all existing contracts downloaded and stored into contracts.csv.\nConclusion We learn a new way we can use to fetch data from Ethereum ledger (Rinkeby network) being applicable to other Testnet and networks. Consider this way as another option when looking for data for your projects just instead of using some sort of third party provider APIs like Etherscan. You can get faster and cheaper results, if you know how to handle them.\nDrawbacks After running all this entire process these are the disadvantages seen:\nThe process of synchronizing a node requires time and many SSD space. Installing blockchain-etl and use it is very easy. blockchain-etl is a very slow tool that also requires many time for data extraction. blockchain-etl seems to generate reasonable well results. However, you must take into account that duplicate contracts may exists if they are found on different transactions. You must take into account that duplicate contracts may exists if they are found on different transactions. Advantages Installing blockchain-etl and use it is very easy. blockchain-etl seems to generate reasonable well results. It can work with any Geth compatible network. References https://www.rinkeby.io/#stats https://rinkeby.etherscan.io/ https://github.com/blockchain-etl https://ethereum-etl.readthedocs.io/en/latest/quickstart/ https://ethereum-etl.readthedocs.io/en/latest/commands Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2022-03-16T00:00:00Z","image":"https://curiousstuff.eu/post/crawling-ethereum-blockchain-for-automated-smart-contract-extraction/vackground-7iq4VEHLNGU-unsplash_huf5a1d571c575b8283081080f5efdc345_634160_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/crawling-ethereum-blockchain-for-automated-smart-contract-extraction/","title":"Crawling Ethereum Blockchain for automated Smart Contract Extraction"},{"content":"In this article I will guide you through a complete step by step guide about how to configure your machine and setup to have your first smart contract running and installed on a Blockchain.\nWarning\nThis article was developed using Truffle v5.5.3 (core: 5.5.3), Ganache v7.0.1, Solidity - 0.8.12 (solc-js), Node v17.7.0 and Web3.js v1.5.3 Steps The steps we are going to make are listed below\nConfigure our environment and install required tools: truffle, ganache. Design a simple smart contract with Solidity and compile it. Deploy our smart contract bytecode. Configure our environment and install required tools This is the basic step required before starting. We need to install some tools to make our development easier and faster.\nInstalling the tools The first thing is to install the tools called truffle and ganache that allow us to have a easy development environment in our local computer. However, as requirements, we need to have NodeJS v12 or later installed. To do so, we will use nvm (a Node Version Manager) to setup the specific version.\nInstall NVM To install or update nvm, you should run the install script. To do that, you may either download and run the script manually, or use the following cURL or Wget command:\n1 curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash After successful download, add required completion script to your bashrc\n1 2 3 export NVM_DIR=\u0026#34;$HOME/.nvm\u0026#34; [ -s \u0026#34;$NVM_DIR/nvm.sh\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;$NVM_DIR/nvm.sh\u0026#34; # This loads nvm [ -s \u0026#34;$NVM_DIR/bash_completion\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;$NVM_DIR/bash_completion\u0026#34; # This loads nvm bash_completion Download NodeJS v12+ with NVM First, run nvm list to get the list of available node versions\n1 nvm list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 v8.10.0 v8.17.0 v10.24.1 v13.7.0 -\u0026gt; v17.0.1 default -\u0026gt; node (-\u0026gt; v17.0.1) iojs -\u0026gt; N/A (default) unstable -\u0026gt; N/A (default) node -\u0026gt; stable (-\u0026gt; v17.0.1) (default) stable -\u0026gt; 17.0 (-\u0026gt; v17.0.1) (default) lts/* -\u0026gt; lts/gallium (-\u0026gt; N/A) lts/argon -\u0026gt; v4.9.1 (-\u0026gt; N/A) lts/boron -\u0026gt; v6.17.1 (-\u0026gt; N/A) lts/carbon -\u0026gt; v8.17.0 lts/dubnium -\u0026gt; v10.24.1 lts/erbium -\u0026gt; v12.22.9 (-\u0026gt; N/A) lts/fermium -\u0026gt; v14.18.3 (-\u0026gt; N/A) lts/gallium -\u0026gt; v16.13.2 (-\u0026gt; N/A) Select the default version or any other greater than v12\n1 nvm install stable A successful installation will report\n1 2 3 4 5 6 Downloading and installing node v17.7.0... Downloading https://nodejs.org/dist/v17.7.0/node-v17.7.0-linux-x64.tar.xz... ###################################################################################################################### 100,0% Computing checksum with sha256sum Checksums matched! Now using node v17.7.0 (npm v8.5.2) Set the downloaded Node JS version At this point, the nvm tool already downloaded the requested version. The last step, is to make it active\nThis is required since nvm tool allow us to have multiple NodeJS version installed at the same time in our local environment.\n1 2 nvm use stable Now using node v17.7.0 (npm v8.5.2) Install Truffle After installing NodeJS, next we require to install truffle tool. The installation process is as simple as running\n1 npm install -g truffle Wait for download to finish, and you should have truffle installed globally in your system.\nTo make sure truffle was completely installed, we check the installed tool version\n1 truffle version 1 2 3 4 5 Truffle v5.5.3 (core: 5.5.3) Ganache v7.0.1 Solidity - 0.8.12 (solc-js) Node v17.7.0 Web3.js v1.5.3 Install Ganache To install ganache globally, run:\n1 npm install ganache --global Once installed globally, you can start ganache right from your command line:\n1 ganache Design a simple smart contract with Solidity and compile it Now that we have some basic tools installed, lets code our smart contract!\nCreating a Truffle project To use most Truffle commands, you need to run them against an existing Truffle project. So the first step is to create a Truffle project.\nIn order to create an empty project, you need to run init command\n1 truffle init 1 2 3 4 5 6 7 8 9 10 11 12 Starting init... ================ \u0026gt; Copying project files to /home/sergio/Downloads/proyectos/zuretzat-sc/new Init successful, sweet! Try our scaffold commands to get started: $ truffle create contract YourContractName # scaffold a contract $ truffle create test YourTestName # scaffold a test http://trufflesuite.com/docs Now, pick a contract name, for example Demo and scafold your new project\n1 truffle create contract Demo Once this operation is completed, you\u0026rsquo;ll now have a project structure with the following items:\ncontracts/: Directory for Solidity contracts migrations/: Directory for scriptable deployment files test/: Directory for test files for testing your application and contracts truffle.js: Truffle configuration file Apart from previous directories, the content of a bare minimum project is as follows:\n1 2 3 4 5 6 7 8 9 10 11 . ├── contracts │ ├── Demo.sol │ └── Migrations.sol ├── migrations │ └── 1_initial_migration.js ├── package.json ├── test └── truffle-config.js 3 directories, 5 files Next thing we need to focus on: Solidity programming and contract design.\nBuilding a contract with Solidity For article purposes, we are going to design and build a simple example of Solidity contract that just writes arbitrary information to the ledger and reads data from it.\nFor this purpose, we assume following requirements:\nThe contract must be installable and must keep a reference to contract owner The contract must allow anyone to register the specified data model The contract must allow anyone to fetch the previously registered information. The lookup will be done by key. So, truffle created a sample file called Demo.sol with some basic code\n1 cat contracts/Demo.sol 1 2 3 4 5 6 7 // SPDX-License-Identifier: MIT pragma solidity \u0026gt;=0.4.22 \u0026lt;0.9.0; contract Demo { constructor() public { } } We need to update this Demo.sol file with our own code\nChange 1: setup latest Solidity compiler version We set the version of solidity v0.8.12. The modified code is\n1 2 3 4 5 6 7 // SPDX-License-Identifier: MIT pragma solidity 0.8.12; contract Demo { constructor() public { } } Change 2: we set the contract owner In order to set the contract owner, we need to modify constructor function so that the caller of the contract get stored in the Blockchain. To do so, we need to save this information as part of the contract state data.\n1 2 3 4 5 6 7 8 9 10 11 12 13 // SPDX-License-Identifier: MIT pragma solidity 0.8.12; contract Demo { // owner keeps the address of which installed the contract address private owner; constructor() public { // we store the address who installed this contract as owner owner = msg.sender; } } Change 3: create the data model Next step, is to defined the data model we need to store the information in the ledger. This is just a tiny example to show you that Solidity can hold more information that what usually is been saved in an ERC20, ERC721, etc.\nOur data model, will be called Record and will contain following attributes:\nId: numeric value that works as a key. This data is provided by the user. Data: string data. This data is provided by the user. Knowing previous information, we can model our structure as\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /** Record is our structure definition for our data model */ struct Record { /** id is the unique identifier of the record */ uint id; /** content is the arbitrary content of the record since this is an example, we do not focus on gas optimization */ string content; } You can define your own type by creating a struct. They are useful for grouping together related data. Structs can be declared outside of a contract and imported in another contract. Add our new struct Record to our contract and your code will look like:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // SPDX-License-Identifier: MIT pragma solidity 0.8.12; contract Demo { // owner keeps the address of which installed the contract address private owner; /** Record is our structure definition for our data model */ struct Record { /** id is the unique identifier of the record */ uint id; /** content is the arbitrary content of the record since this is an example, we do not focus on gas optimization */ string content; } constructor() public { // we store the address who installed this contract as owner owner = msg.sender; } } Change 4: create a function to read data from Blockchain According to our self assigned requirement:\nThe contract must allow anyone to fetch the previously registered information. The lookup will be done by key. we can model the Solidity function as\n1 2 3 4 function readRecord() external view returns(Record memory) { Record memory r; return r; } After populating the function with requested code it will look like:\n1 2 3 4 5 6 7 function readRecord(uint key) external view returns(Record memory) { // lookup requested record by given key Record memory r = recordData[key]; // if r is not found by key, returned r object will be populated with default values // default data Record { id: 0, content: \u0026#34;\u0026#34; } will works as NULL return r; } As you can see, there is a new variable called recordData that is new, and is defined as\n1 mapping(uint =\u0026gt; Record) private recordData; Change 5: create a function to write data to Blockchain According to our self assigned requirement:\nThe contract must allow anyone to register the specified data model we can model the Solidity function as\n1 2 3 function writeRecord(uint key, string memory content) external returns(bool) { return true; } After populating the function with requested code it will look like:\n1 2 3 4 5 6 7 function writeRecord(uint key, string memory data) external returns(bool) { // create a new record item from user input parameters Record memory r = Record({id:key, content:data}); // store item into the blockchain recordData[key]=r; return true; } Deploy our solidity smart contract After designing and building our Solidity contract, we get the following code\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // SPDX-License-Identifier: MIT pragma solidity 0.8.12; contract Demo { // owner keeps the address which installed the contract address private owner; /** Record is our structure definition for our data model */ struct Record { /** id is the unique identifier of the record */ uint id; /** content is the arbitrary content of the record since this is an example, we do not focus on gas optimization */ string content; } mapping(uint =\u0026gt; Record) private recordData; constructor() public { // we store the address who installed this contract as owner owner = msg.sender; } function writeRecord(uint key, string memory data) external returns(bool) { // create a new record item from user input parameters Record memory r = Record({id:key, content:data}); // store item into the blockchain recordData[key]=r; return true; } function readRecord(uint key) external view returns(Record memory) { // lookup requested record by given key Record memory r = recordData[key]; // if r is not found by key, returned r object will be populated with default values // default data Record { id: 0, content: \u0026#34;\u0026#34; } will works as NULL return r; } } Compiling the contract Now that our Demo contract is designed, our next step it to compile it. We will use truffle compile to do it.\n1 truffle compile 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Compiling your contracts... =========================== ✔ Fetching solc version list from solc-bin. Attempt #1 ✔ Downloading compiler. Attempt #1. \u0026gt; Compiling ./contracts/Demo.sol \u0026gt; Compiling ./contracts/Migrations.sol \u0026gt; Compilation warnings encountered: Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \u0026#34;abstract\u0026#34; is sufficient. --\u0026gt; project:/contracts/Demo.sol:27:3: | 27 | constructor() public { | ^ (Relevant source part starts here and spans across multiple lines). \u0026gt; Artifacts written to /home/r00t/demo/build/contracts \u0026gt; Compiled successfully using: - solc: 0.8.12+commit.f00d7308.Emscripten.clang Deploying the contract A way to see the result of the compilation is to review the file under ./build/contracts/Demo.json. Within that file, the compiled bytecode can be seen. In this example, this is the bytecode i get.\n1 0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610666806100606000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063f2e0d5741461003b578063fb891df81461006b575b600080fd5b610055600480360381019061005091906102d4565b61009b565b60405161006291906103e6565b60405180910390f35b6100856004803603810190610080919061053d565b61016a565b60405161009291906105b4565b60405180910390f35b6100a36101cd565b600060016000848152602001908152602001600020604051806040016040529081600082015481526020016001820180546100dd906105fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610109906105fe565b80156101565780601f1061012b57610100808354040283529160200191610156565b820191906000526020600020905b81548152906001019060200180831161013957829003601f168201915b505050505081525050905080915050919050565b600080604051806040016040528085815260200184815250905080600160008681526020019081526020016000206000820151816000015560208201518160010190805190602001906101be9291906101e7565b50905050600191505092915050565b604051806040016040528060008152602001606081525090565b8280546101f3906105fe565b90600052602060002090601f016020900481019282610215576000855561025c565b82601f1061022e57805160ff191683800117855561025c565b8280016001018555821561025c579182015b8281111561025b578251825591602001919060010190610240565b5b509050610269919061026d565b5090565b5b8082111561028657600081600090555060010161026e565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6102b18161029e565b81146102bc57600080fd5b50565b6000813590506102ce816102a8565b92915050565b6000602082840312156102ea576102e9610294565b5b60006102f8848285016102bf565b91505092915050565b61030a8161029e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561034a57808201518184015260208101905061032f565b83811115610359576000848401525b50505050565b6000601f19601f8301169050919050565b600061037b82610310565b610385818561031b565b935061039581856020860161032c565b61039e8161035f565b840191505092915050565b60006040830160008301516103c16000860182610301565b50602083015184820360208601526103d98282610370565b9150508091505092915050565b6000602082019050818103600083015261040081846103a9565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61044a8261035f565b810181811067ffffffffffffffff8211171561046957610468610412565b5b80604052505050565b600061047c61028a565b90506104888282610441565b919050565b600067ffffffffffffffff8211156104a8576104a7610412565b5b6104b18261035f565b9050602081019050919050565b82818337600083830152505050565b60006104e06104db8461048d565b610472565b9050828152602081018484840111156104fc576104fb61040d565b5b6105078482856104be565b509392505050565b600082601f83011261052457610523610408565b5b81356105348482602086016104cd565b91505092915050565b6000806040838503121561055457610553610294565b5b6000610562858286016102bf565b925050602083013567ffffffffffffffff81111561058357610582610299565b5b61058f8582860161050f565b9150509250929050565b60008115159050919050565b6105ae81610599565b82525050565b60006020820190506105c960008301846105a5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061061657607f821691505b6020821081141561062a576106296105cf565b5b5091905056fea2646970667358221220e245225e3554a6b6a54cc859d5a0d5d4744ee8e0d13146de68f3caa0f0510f7564736f6c634300080c0033 In order to deploy our contract in a testing environment, we use ganache tool, so that we can have a local EVM with some predefined accounts. To run ganache simply type in your terminal ganache.\n1 ganache And it will start a RPC server\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 ganache v7.0.3 (@ganache/cli: 0.1.4, @ganache/core: 0.1.4) Starting RPC server Available Accounts ================== (0) 0xeadcE979B7D8EBb7970417b452D08291c8265521 (1000 ETH) (1) 0x574537620d65FB8fB1d44dffFA1b6b350503dFdA (1000 ETH) (2) 0x1093BC537E6BEa991111B30280c737089b20af14 (1000 ETH) (3) 0x45ff62a6fAbb54020C16728eC9bC46E896BCb88E (1000 ETH) (4) 0xcabD449394A29f91b92cB790CD50edA32A11C23b (1000 ETH) (5) 0xA731Cf52A50af2a4C6653ACD4bbFeC72A2BC9A08 (1000 ETH) (6) 0x7440322BB3CDa08F31d454e710690D44b6b2A9ED (1000 ETH) (7) 0x83D600090213Bd86ccA983455728C92bFB433DC4 (1000 ETH) (8) 0xedf61b529F8feB023807C103d3336827BE6D88A7 (1000 ETH) (9) 0xE4c62D0eAce8C6f258505e24f5e2aD687501537F (1000 ETH) Private Keys ================== (0) 0x1677700009b08909aa22b9b37be7bb67b323e3de69dd07d7c771c24d75487950 (1) 0x61c335032c0eaae0c09f73c22355d34a3b7a91737152f4204c2c8141c4a6bbb6 (2) 0xedd34a9bb26c1e4386e8870f67048de1bb5c87c0253c0bca45c71c89bde63691 (3) 0x69a16039ac3a15dc53e0b109a0303f5dc3a744ed3533d6dd6b289fccd8446677 (4) 0x7a3f6ba6705545caecbd41f59784cc0e0c6a7b6f588344977e8a4014767879e7 (5) 0xffc5fa88ff2c879803ada4eb58173016d36172feb3c21fc6e87507022bddfc19 (6) 0xe0a2991cb878fd7ce0716a4aaa6c02c2e58679835c6b40240af20f72755e6c33 (7) 0xd79b1b95bcb3fd472217df57b908943d16ed4bc8cc7fcb067c6c5db77dee7fca (8) 0xe2f1af569e81be8f2df8a1b31cc755d048aaeb7b28f2172b76f5caf82ae94e5d (9) 0xb049f424e807571269e84c580b19e997a4ae48ac031ae0ab79c2572d13eeb31b HD Wallet ================== Mnemonic: drip purpose object edit traffic refuse fresh inherit entry length badge violin Base HD Path: m/44\u0026#39;/60\u0026#39;/0\u0026#39;/0/{account_index} Default Gas Price ================== 2000000000 BlockGas Limit ================== 30000000 Call Gas Limit ================== 50000000 Chain Id ================== 1337 RPC Listening on 127.0.0.1:8545 After running ganache it will provide you and endpoint to connect with. In my case the endpoint is located at http://127.0.0.1:8545.\nTo connect to this endpoint, modify the truffle-config.js file and define your test network as ganacheNet like following snippet\n1 2 3 4 5 6 networks: { ganacheNet: { host: \u0026#34;127.0.0.1\u0026#34;, port: 8545, network_id: \u0026#34;*\u0026#34; } Now, to deploy the contract against specified network, use truffle deploy command indicating which target network you want to use.\n1 truffle deploy --network ganacheNet where ganacheNet is just the name given in the truffle-config.js\nA successful contract deployment will report to you the contract address and the cost of the operation.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 Compiling your contracts... =========================== \u0026gt; Everything is up to date, there is nothing to compile. Starting migrations... ====================== \u0026gt; Network name: \u0026#39;ganache\u0026#39; \u0026gt; Network id: 1646908313472 \u0026gt; Block gas limit: 30000000 (0x1c9c380) 1_initial_migration.js ====================== Deploying \u0026#39;Migrations\u0026#39; ---------------------- \u0026gt; transaction hash: 0xfaa7a45c83ddedd424fa2e55f00e22d1255e032b86d8f93a8e7ec4aa0609f9c5 \u0026gt; Blocks: 0 Seconds: 0 \u0026gt; contract address: 0x5EeC2846bf49d445C405b67e59b56e335163a78C \u0026gt; block number: 1 \u0026gt; block timestamp: 1646908603 \u0026gt; account: 0xeadcE979B7D8EBb7970417b452D08291c8265521 \u0026gt; balance: 999.99915577075 \u0026gt; gas used: 250142 (0x3d11e) \u0026gt; gas price: 3.375 gwei \u0026gt; value sent: 0 ETH \u0026gt; total cost: 0.00084422925 ETH \u0026gt; Saving migration to chain. \u0026gt; Saving artifacts ------------------------------------- \u0026gt; Total cost: 0.00084422925 ETH Summary ======= \u0026gt; Total deployments: 1 \u0026gt; Final cost: 0.00084422925 ETH Deployed contract addess: 0x5EeC2846bf49d445C405b67e59b56e335163a78C gas used: 250142 gas price: 3.375 gwei It cost about $0.00084422925 \\ ETH$ using $250142$ gas. If we run this same deployment in the Ethereum mainnet, the $ETH$ gas cost today is $23$ gwei, so that the deployment cost would be\n$$ 250142 \\cdot 23 / 10^9 = 0.005753266 \\ ETH $$\nAt current exchange rate of $(1 \\ ETH = 2.357,66 \\ EUR)$, this would be $13,56 \\ €$ for our simple read-write contract.\nHowever, in our ganache TEST environment, all deployments are FREE.\nConclusion And this is all, the steps to prepare, design, build and deploy an smart contract into Ethereum or any other EVM compatible networks. I just would like to mention two thing:\nIf you are planning to deploy and run serious DApps on any Blockchain network, make sure you properly TEST all your features. If you deal with people money, make sure you relay on external security auditors to verify your code quality, errors, vulnerabilities and so on. Take into consideration some smart contract upgrade patterns. References https://docs.soliditylang.org/en/v0.8.12/ https://trufflesuite.com/docs/truffle/getting-started/creating-a-project.html https://trufflesuite.com/docs/truffle/getting-started/running-migrations#migration-files https://trufflesuite.com/docs/truffle/getting-started/interacting-with-your-contracts https://trufflesuite.com/docs/truffle/reference/configuration Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2022-03-12T00:00:00Z","image":"https://curiousstuff.eu/post/how-to-install-truffle-compile-and-run-our-first-smart-contract-with-solidity/ruth-georgiev-dvmiNXMh9d8-unsplash_hue0508e1d3b62552bc1dbc17d109c7088_605041_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/how-to-install-truffle-compile-and-run-our-first-smart-contract-with-solidity/","title":"How to install truffle, compile and run our first smart contract with Solidity"},{"content":"What is Rinkeby Testnet Rinkeby is an Ethereum test network that allows for blockchain development testing before deployment on Mainnet, the main Ethereum network.\nThe Proof-of-Authority test network was established in April 2017. It uses the Clique PoA consensus protocol, and is maintained by the Geth developer team.\nThe network is supported by Geth, Nethermind and Hyperledger Besu.\nSome features of the network are:\nTestnet / Live: Test Chain ID: 4 Network ID: 4 Live Since: April 2017 Block time: 15 seconds Consensus / block proposer: PoA – Proof-of-Authority Permissioned: Yes Governance / Authorities: Known developers who sign the blocks Meaning of PoA:\nRinkeby doesn\u0026rsquo;t run Proof of Work, it runs Proof of Authority. This means there are no miners. The people that create blocks are pre-authorized nodes. It\u0026rsquo;s a network where pre-selected and trusted people are allowed to create the blocks.\nWhy do we need testnets like Rinkeby? Before a project launches on the Ethereum blockchain (or before changes are made to the blockchain itself), a version is deployed to an Ethereum Test Network (“testnet”), which simulates Ethereum — this gives developers, the community, and you a chance to kick the tires before real assets are involved. Ether and tokens on a testnet are easy to obtain, and carry no real-world value — still, it can be fun to own 10,000 Ether or a trillion tokens on a testnet.\nTestnets There are three testnets currently in use, and each behaves similarly to the production blockchain (where your real Ether and tokens reside). Developers may have a personal preference or favorite testnet, and projects typically develop on only one of them.\nRopsten: A proof-of-work blockchain that most closely resembles Ethereum; you can easily mine faux-Ether. Kovan: A proof-of-authority blockchain, started by the Parity team. Ether can’t be mined; it has to be requested. Rinkeby: A proof-of-authority blockchain, started by the Geth team. Ether can’t be mined; it has to be requested. Steps for synchronizing a Full Node in Rinkeby A full node lets you access all state. There is a light node (state-on-demand) and wallet-only (no state) instructions as well, and these are even faster. I\u0026rsquo;m using this for dapp development, so I want access to all state.\nBefore running a FULL node, make sure your current hardware can support it. The documentation states the following:\nA full node synchronizes the blockchain by downloading the full chain from the genesis block to the current head block, but does not execute the transactions. Instead, it downloads all the transactions receipts along with the entire recent state. As the node downloads the recent state directly, historical data can only be queried from that block onward.\nInitial processing required to synchronize is more bandwidth intensive, but is light on the CPU and has significantly reduced disk requirements. Mid range machines with HDD storage, decent CPUs and 4GB+ RAM should be enough.\nDownload Geth First, install the latest geth version to your machine. For Ubuntu, you can follow the instructions on the official wiki.\n1 2 3 4 sudo apt-get install software-properties-common sudo add-apt-repository -y ppa:ethereum/ethereum sudo apt-get update sudo apt-get install ethereum If you\u0026rsquo;re just upgrade geth from a previous version, you can just run\n1 sudo apt install -y geth Start geth for Rinkeby Testnet To run a FULL node, start Geth with the Rinkeby flag\n1 geth --rinkeby After running geth, it will start the syncronization process of downloading previous blocks. Standard output logs should look like these\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 ze=26.96MiB INFO [03-05|17:40:43.021] Imported new block receipts count=35 elapsed=180.925ms number=10,122,322 hash=7ef043..cb2bc7 age=3w6d2h size=10.33MiB INFO [03-05|17:40:46.709] Imported new block receipts count=37 elapsed=147.743ms number=10,122,359 hash=baee14..59eb60 age=3w6d2h size=11.06MiB INFO [03-05|17:40:47.116] Imported new block receipts count=34 elapsed=124.763ms number=10,122,393 hash=af8329..1f4123 age=3w6d2h size=11.07MiB INFO [03-05|17:40:47.578] Imported new block receipts count=35 elapsed=141.193ms number=10,122,428 hash=c5aabf..bc3ab1 age=3w6d1h size=9.86MiB INFO [03-05|17:40:48.050] Imported new block receipts count=44 elapsed=162.263ms number=10,122,472 hash=173cae..1be7cd age=3w6d1h size=11.31MiB INFO [03-05|17:40:49.234] Imported new block receipts count=8 elapsed=17.250ms number=10,122,480 hash=185a26..26d615 age=3w6d1h size=2.35MiB INFO [03-05|17:40:50.208] Imported new block receipts count=765 elapsed=526.828ms number=10,123,245 hash=68ab3e..eda777 age=3w5d22h size=37.70MiB INFO [03-05|17:40:50.568] Imported new block receipts count=68 elapsed=36.988ms number=10,123,313 hash=7286bc..c39c0d age=3w5d22h size=2.78MiB INFO [03-05|17:40:50.723] State sync in progress synced=43.42% state=38.18GiB accounts=6,019,352@1.23GiB slots=142,131,047@29.08GiB codes=1,160,508@7.87GiB eta=1h17m45.825s INFO [03-05|17:40:52.332] Imported new block receipts count=322 elapsed=203.823ms number=10,123,635 hash=d4f829..016e69 age=3w5d20h size=13.99MiB INFO [03-05|17:40:53.225] Imported new block headers count=2048 elapsed=702.953ms number=10,161,539 hash=ebbebf..10688e age=2w6d34m INFO [03-05|17:40:55.920] Imported new block headers count=2048 elapsed=691.962ms number=10,163,587 hash=42a94f..895852 age=2w5d16h INFO [03-05|17:40:56.064] Imported new block receipts count=1140 elapsed=878.685ms number=10,124,775 hash=5b28a6..570969 age=3w5d16h size=44.93MiB You have to wait now, to a full syncronization. However, in the meantime you can open an interactive console connected to geth process via IPC and launch some commands. To do that, use the command below\n1 geth --datadir=$HOME/.ethereum/rinkeby attach ipc:$HOME/.ethereum/rinkeby/geth.ipc console On a successful execution, you shoud see a welcome message like this\n1 2 3 4 5 6 7 8 9 10 Welcome to the Geth JavaScript console! instance: Geth/v1.10.16-stable-20356e57/linux-amd64/go1.17.5 coinbase: 0x8163dfd2c2dcb1b9079075df37fad3aeec140b3c at block: 0 (Wed Apr 12 2017 16:59:06 GMT+0200 (CEST)) datadir: /home/r00t/.ethereum/rinkeby modules: admin:1.0 clique:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0 To exit, press ctrl-d or type exit \u0026gt; Check peer syncing status To check the peer syncing status, we need to connect to the peer using previous command to open an interactive geth console and then type\n1 eth.syncing The response contains the current state of our peer.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { currentBlock: 10276653, healedBytecodeBytes: 0, healedBytecodes: 0, healedTrienodeBytes: 0, healedTrienodes: 0, healingBytecode: 0, healingTrienodes: 0, highestBlock: 10276756, startingBlock: 9450883, syncedAccountBytes: 1475479684, syncedAccounts: 6733197, syncedBytecodeBytes: 9262134023, syncedBytecodes: 1268721, syncedStorage: 156218711, syncedStorageBytes: 34301295620 } When the process ends, you can search for any available Faucet and request some ETH for testing purposes.\nConclusion Movitated by the need to have a local copy of the ledger in my own machine so that I can research an analyze on existing data, contract, transactions, etc I show you in this article the steps required to do it by your own means. However take into account, that there is no real motivation for peer owners to do this process, since Rinkeby network has no mining process and does not reward people who contribute with nodes.\nReferences https://www.rinkeby.io/#stats https://rinkeby.etherscan.io/ Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2022-03-05T00:00:00Z","image":"https://curiousstuff.eu/post/running-an-ethereum-rinkeby-full-node-in-2022/marc-olivier-jodoin-NqOInJ-ttqM-unsplash_hu3e3be9c12914cd335dcc4802d796461d_384034_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/running-an-ethereum-rinkeby-full-node-in-2022/","title":"Running an Ethereum Rinkeby full node in 2022"},{"content":"The Ethereum Virtual Machine or EVM The Ethereum Virtual Machine is the software platform that developers can use to create decentralized applications (DApps) on Ethereum. At any given block in the chain, Ethereum has one and only one \u0026lsquo;canonical\u0026rsquo; state, and the EVM is what defines the rules for computing a new valid state from block to block.\nThe EVM design simplified The EVM behaves as a mathematical function would: Given an input, it produces a deterministic output. It therefore is quite helpful to more formally describe Ethereum as having a state transition function:\n$$ Y(S, T)= S\u0026rsquo; $$\nGiven an old valid state $(S)$ and a new set of valid transactions $(T)$, the Ethereum state transition function $Y(S, T)$ produces a new valid output state $S'$\nState In the context of Ethereum, the state is an enormous data structure called a modified Merkle Patricia Trie, which keeps all accounts linked by hashes and reducible to a single root hash stored on the blockchain. Transactions\nTransactions Transactions are cryptographically signed instructions from accounts. There are two types of transactions: those which result in message calls and those which result in contract creation.\nContract creation results in the creation of a new contract account containing compiled smart contract bytecode. Whenever another account makes a message call to that contract, it executes its bytecode.\nEVM instructions The EVM executes as a stack machine with a depth of 1024 items. Each item is a 256-bit word, which was chosen for the ease of use with 256-bit cryptography (such as Keccak-256 hashes or secp256k1 signatures).\nDuring execution, the EVM maintains a transient memory (as a word-addressed byte array), which does not persist between transactions.\nContracts, however, do contain a Merkle Patricia storage trie (as a word-addressable word array), associated with the account in question and part of the global state.\nCompiled smart contract bytecode executes as a number of EVM opcodes, which perform standard stack operations like XOR, AND, ADD, SUB, etc. The EVM also implements a number of blockchain-specific stack operations, such as ADDRESS, BALANCE, BLOCKHASH, etc.\nSo, we could define the EVM as a set of rules that allow us to write content in the blockchain according to conditions of the smart contracts.\nIt is important to note that, All implementations of the EVM must adhere to the specification described in the Ethereum Yellowpaper.\nEthereum OPCODE list Remember that: The size of a \u0026ldquo;word\u0026rdquo; in EVM is 256 bits.\nOpcode Name Description Extra Info Gas 0x00 STOP Halts execution - 0 0x01 ADD Addition operation - 3 0x02 MUL Multiplication operation - 5 0x03 SUB Subtraction operation - 3 0x04 DIV Integer division operation - 5 0x05 SDIV Signed integer division operation (truncated) - 5 0x06 MOD Modulo remainder operation - 5 0x07 SMOD Signed modulo remainder operation - 5 0x08 ADDMOD Modulo addition operation - 8 0x09 MULMOD Modulo multiplication operation - 8 0x0a EXP Exponential operation - 10* 0x0b SIGNEXTEND Extend length of two\u0026rsquo;s complement signed integer - 5 0x0c - 0x0f Unused Unused - 0x10 LT Less-than comparison - 3 0x11 GT Greater-than comparison - 3 0x12 SLT Signed less-than comparison - 3 0x13 SGT Signed greater-than comparison - 3 0x14 EQ Equality comparison - 3 0x15 ISZERO Simple not operator - 3 0x16 AND Bitwise AND operation - 3 0x17 OR Bitwise OR operation - 3 0x18 XOR Bitwise XOR operation - 3 0x19 NOT Bitwise NOT operation - 3 0x1a BYTE Retrieve single byte from word - 3 0x1b SHL Shift Left EIP145 3 0x1c SHR Logical Shift Right EIP145 3 0x1d SAR Arithmetic Shift Right EIP145 3 0x20 KECCAK256 Compute Keccak-256 hash - 30* 0x21 - 0x2f Unused Unused 0x30 ADDRESS Get address of currently executing account - 2 0x31 BALANCE Get balance of the given account - 700 0x32 ORIGIN Get execution origination address - 2 0x33 CALLER Get caller address - 2 0x34 CALLVALUE Get deposited value by the instruction/transaction responsible for this execution - 2 0x35 CALLDATALOAD Get input data of current environment - 3 0x36 CALLDATASIZE Get size of input data in current environment - 2* 0x37 CALLDATACOPY Copy input data in current environment to memory - 3 0x38 CODESIZE Get size of code running in current environment - 2 0x39 CODECOPY Copy code running in current environment to memory - 3* 0x3a GASPRICE Get price of gas in current environment - 2 0x3b EXTCODESIZE Get size of an account\u0026rsquo;s code - 700 0x3c EXTCODECOPY Copy an account\u0026rsquo;s code to memory - 700* 0x3d RETURNDATASIZE Pushes the size of the return data buffer onto the stack EIP 211 2 0x3e RETURNDATACOPY Copies data from the return data buffer to memory EIP 211 3 0x3f EXTCODEHASH Returns the keccak256 hash of a contract\u0026rsquo;s code EIP 1052 700 0x40 BLOCKHASH Get the hash of one of the 256 most recent complete blocks - 20 0x41 COINBASE Get the block\u0026rsquo;s beneficiary address - 2 0x42 TIMESTAMP Get the block\u0026rsquo;s timestamp - 2 0x43 NUMBER Get the block\u0026rsquo;s number - 2 0x44 DIFFICULTY Get the block\u0026rsquo;s difficulty - 2 0x45 GASLIMIT Get the block\u0026rsquo;s gas limit - 2 0x46 CHAINID Returns the current chain’s EIP-155 unique identifier EIP 1344 2 0x47 - 0x4f Unused - 0x48 BASEFEE Returns the value of the base fee of the current block it is executing in. EIP 3198 2 0x50 POP Remove word from stack - 2 0x51 MLOAD Load word from memory - 3* 0x52 MSTORE Save word to memory - 3* 0x53 MSTORE8 Save byte to memory - 3 0x54 SLOAD Load word from storage - 800 0x55 SSTORE Save word to storage - 20000** 0x56 JUMP Alter the program counter - 8 0x57 JUMPI Conditionally alter the program counter - 10 0x58 GETPC Get the value of the program counter prior to the increment - 2 0x59 MSIZE Get the size of active memory in bytes - 2 0x5a GAS Get the amount of available gas, including the corresponding reduction for the cost of this instruction - 2 0x5b JUMPDEST Mark a valid destination for jumps - 1 0x5c - 0x5f Unused - 0x60 PUSH1 Place 1 byte item on stack - 3 0x61 PUSH2 Place 2-byte item on stack - 3 0x62 PUSH3 Place 3-byte item on stack - 3 0x63 PUSH4 Place 4-byte item on stack - 3 0x64 PUSH5 Place 5-byte item on stack - 3 0x65 PUSH6 Place 6-byte item on stack - 3 0x66 PUSH7 Place 7-byte item on stack - 3 0x67 PUSH8 Place 8-byte item on stack - 3 0x68 PUSH9 Place 9-byte item on stack - 3 0x69 PUSH10 Place 10-byte item on stack - 3 0x6a PUSH11 Place 11-byte item on stack - 3 0x6b PUSH12 Place 12-byte item on stack - 3 0x6c PUSH13 Place 13-byte item on stack - 3 0x6d PUSH14 Place 14-byte item on stack - 3 0x6e PUSH15 Place 15-byte item on stack - 3 0x6f PUSH16 Place 16-byte item on stack - 3 0x70 PUSH17 Place 17-byte item on stack - 3 0x71 PUSH18 Place 18-byte item on stack - 3 0x72 PUSH19 Place 19-byte item on stack - 3 0x73 PUSH20 Place 20-byte item on stack - 3 0x74 PUSH21 Place 21-byte item on stack - 3 0x75 PUSH22 Place 22-byte item on stack - 3 0x76 PUSH23 Place 23-byte item on stack - 3 0x77 PUSH24 Place 24-byte item on stack - 3 0x78 PUSH25 Place 25-byte item on stack - 3 0x79 PUSH26 Place 26-byte item on stack - 3 0x7a PUSH27 Place 27-byte item on stack - 3 0x7b PUSH28 Place 28-byte item on stack - 3 0x7c PUSH29 Place 29-byte item on stack - 3 0x7d PUSH30 Place 30-byte item on stack - 3 0x7e PUSH31 Place 31-byte item on stack - 3 0x7f PUSH32 Place 32-byte (full word) item on stack - 3 0x80 DUP1 Duplicate 1st stack item - 3 0x81 DUP2 Duplicate 2nd stack item - 3 0x82 DUP3 Duplicate 3rd stack item - 3 0x83 DUP4 Duplicate 4th stack item - 3 0x84 DUP5 Duplicate 5th stack item - 3 0x85 DUP6 Duplicate 6th stack item - 3 0x86 DUP7 Duplicate 7th stack item - 3 0x87 DUP8 Duplicate 8th stack item - 3 0x88 DUP9 Duplicate 9th stack item - 3 0x89 DUP10 Duplicate 10th stack item - 3 0x8a DUP11 Duplicate 11th stack item - 3 0x8b DUP12 Duplicate 12th stack item - 3 0x8c DUP13 Duplicate 13th stack item - 3 0x8d DUP14 Duplicate 14th stack item - 3 0x8e DUP15 Duplicate 15th stack item - 3 0x8f DUP16 Duplicate 16th stack item - 3 0x90 SWAP1 Exchange 1st and 2nd stack items - 3 0x91 SWAP2 Exchange 1st and 3rd stack items - 3 0x92 SWAP3 Exchange 1st and 4th stack items - 3 0x93 SWAP4 Exchange 1st and 5th stack items - 3 0x94 SWAP5 Exchange 1st and 6th stack items - 3 0x95 SWAP6 Exchange 1st and 7th stack items - 3 0x96 SWAP7 Exchange 1st and 8th stack items - 3 0x97 SWAP8 Exchange 1st and 9th stack items - 3 0x98 SWAP9 Exchange 1st and 10th stack items - 3 0x99 SWAP10 Exchange 1st and 11th stack items - 3 0x9a SWAP11 Exchange 1st and 12th stack items - 3 0x9b SWAP12 Exchange 1st and 13th stack items - 3 0x9c SWAP13 Exchange 1st and 14th stack items - 3 0x9d SWAP14 Exchange 1st and 15th stack items - 3 0x9e SWAP15 Exchange 1st and 16th stack items - 3 0x9f SWAP16 Exchange 1st and 17th stack items - 3 0xa0 LOG0 Append log record with no topics - 375 0xa1 LOG1 Append log record with one topic - 750 0xa2 LOG2 Append log record with two topics - 1125 0xa3 LOG3 Append log record with three topics - 1500 0xa4 LOG4 Append log record with four topics - 1875 0xa5 - 0xaf Unused - 0xb0 JUMPTO Tentative libevmasm has different numbers EIP 615 0xb1 JUMPIF Tentative EIP 615 0xb2 JUMPSUB Tentative EIP 615 0xb4 JUMPSUBV Tentative EIP 615 0xb5 BEGINSUB Tentative EIP 615 0xb6 BEGINDATA Tentative EIP 615 0xb8 RETURNSUB Tentative EIP 615 0xb9 PUTLOCAL Tentative EIP 615 0xba GETLOCAL Tentative EIP 615 0xbb - 0xe0 Unused - 0xe1 SLOADBYTES Only referenced in pyethereum - - 0xe2 SSTOREBYTES Only referenced in pyethereum - - 0xe3 SSIZE Only referenced in pyethereum - - 0xe4 - 0xef Unused - 0xf0 CREATE Create a new account with associated code - 32000 0xf1 CALL Message-call into an account - Complicated 0xf2 CALLCODE Message-call into this account with alternative account\u0026rsquo;s code - Complicated 0xf3 RETURN Halt execution returning output data - 0 0xf4 DELEGATECALL Message-call into this account with an alternative account\u0026rsquo;s code, but persisting into this account with an alternative account\u0026rsquo;s code - Complicated 0xf5 CREATE2 Create a new account and set creation address to sha3(sender + sha3(init code)) % 2**160 - 0xf6 - 0xf9 Unused - - 0xfa STATICCALL Similar to CALL, but does not modify state - 40 0xfb Unused - - 0xfc TXEXECGAS Not in yellow paper - - 0xfd REVERT Stop execution and revert state changes, without consuming all provided gas and providing a reason - 0 0xfe INVALID Designated invalid instruction - 0 0xff SELFDESTRUCT Halt execution and register account for later deletion - 5000* Some additional notes Both suicide() and selfdestruct() Solidity calls are represented internally by opcode 0xff as SELFDESTRUCT. Push opcodes are the only way to add new content to the stack. References https://ethereum.github.io/yellowpaper/paper.pdf https://github.com/crytic/evm-opcodes https://www.ethervm.io Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2022-02-02T00:00:00Z","image":"https://curiousstuff.eu/post/understanding-evm-an-introduction-to-ethereum-opcodes/54-545357_turing-machine_hucf83894ffb8ab45e31ad58927aa81765_219010_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/understanding-evm-an-introduction-to-ethereum-opcodes/","title":"Understanding EVM: an introduction to Ethereum OPCODES"},{"content":"The easiest way to get Cargo is to install the current stable release of Rust by using rustup. Installing Rust using rustup will also install cargo.\nRust Installation On Linux and macOS systems, this is done as follows:\n1 curl https://sh.rustup.rs -sSf | sh After request the installation, you should see the script downloading all required tools\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 info: downloading installer Welcome to Rust! This will download and install the official compiler for the Rust programming language, and its package manager, Cargo. Rustup metadata and toolchains will be installed into the Rustup home directory, located at: /home/r00t/.rustup This can be modified with the RUSTUP_HOME environment variable. The Cargo home directory located at: /home/r00t/.cargo This can be modified with the CARGO_HOME environment variable. The cargo, rustc, rustup and other commands will be added to Cargo\u0026#39;s bin directory, located at: /home/r00t/.cargo/bin This path will then be added to your PATH environment variable by modifying the profile files located at: /home/r00t/.profile /home/r00t/.zshenv You can uninstall at any time with rustup self uninstall and these changes will be reverted. Current installation options: default host triple: x86_64-unknown-linux-gnu default toolchain: stable (default) profile: default modify PATH variable: yes 1) Proceed with installation (default) 2) Customize installation 3) Cancel installation \u0026gt;1 info: profile set to \u0026#39;default\u0026#39; info: default host triple is x86_64-unknown-linux-gnu info: syncing channel updates for \u0026#39;stable-x86_64-unknown-linux-gnu\u0026#39; info: latest update on 2022-01-13, rust version 1.58.0 (02072b482 2022-01-11) info: downloading component \u0026#39;cargo\u0026#39; info: downloading component \u0026#39;clippy\u0026#39; info: downloading component \u0026#39;rust-docs\u0026#39; info: downloading component \u0026#39;rust-std\u0026#39; info: downloading component \u0026#39;rustc\u0026#39; 53.2 MiB / 53.2 MiB (100 %) 45.9 MiB/s in 1s ETA: 0s info: downloading component \u0026#39;rustfmt\u0026#39; info: installing component \u0026#39;cargo\u0026#39; info: installing component \u0026#39;clippy\u0026#39; info: installing component \u0026#39;rust-docs\u0026#39; 18.9 MiB / 18.9 MiB (100 %) 11.2 MiB/s in 1s ETA: 0s info: installing component \u0026#39;rust-std\u0026#39; 25.1 MiB / 25.1 MiB (100 %) 13.4 MiB/s in 1s ETA: 0s info: installing component \u0026#39;rustc\u0026#39; 53.2 MiB / 53.2 MiB (100 %) 15.5 MiB/s in 3s ETA: 0s info: installing component \u0026#39;rustfmt\u0026#39; info: default toolchain set to \u0026#39;stable-x86_64-unknown-linux-gnu\u0026#39; stable-x86_64-unknown-linux-gnu installed - rustc 1.58.0 (02072b482 2022-01-11) Rust is installed now. Great! To get started you may need to restart your current shell. This would reload your PATH environment variable to include Cargo\u0026#39;s bin directory ($HOME/.cargo/bin). ## Rust environment setup To configure your current shell, run: source $HOME/.cargo/env If you want to configure your terminal, just use the command provided\n1 source $HOME/.cargo/env However, to make it permanent, you can edit your $HOME/.profile adding the line\n1 export PATH=$PATH:$HOME/.cargo/bin And this is all, rust should be installed and configured in your machine.\nReferences https://doc.rust-lang.org/cargo/getting-started/installation.html Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2022-01-18T00:00:00Z","image":"https://curiousstuff.eu/post/installing-rust-n-cargo/maxresdefault_huf81cd74c9a35988f0cb4d47c8bad792c_87807_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/installing-rust-n-cargo/","title":"Installing Rust n Cargo"},{"content":"Unlike many programming languages, Go distributes modules from repositories instead of a central package server. One benefit of this approach is that publishing a private module is very similar to publishing a public one. Instead of requiring a completely separate private package server, a Go private module is distributed via a private source code repository. Since most source code hosting options support this out of the box, there’s no need to set up an additional private server.\nIn order to use a private module, you’ll need to have access to a private Go module. In this section, you’ll create and publish a private module you can use later in the tutorial to access a private module from another Go program.\nProblem description I have a private repo/module that I own, that I want to use in my project that I\u0026rsquo;m working on locally. Running \u0026lsquo;go mod download\u0026rsquo; or \u0026rsquo;tidy\u0026rsquo; returns an error because it cannot access this repo (understandably). What is an appropriate way of accessing this repo?\nYou can see original issue at StackOverflow at https://stackoverflow.com/questions/52209721/go-mod-private-repo\nTo \u0026lsquo;fix\u0026rsquo; the issue of downloading go modules from private repositories, there are some alternatives we can use:\nAlternative 1: Configure our local git client to download go modules with SSH instead of HTTP. Alternative 2: Configure your local $HOME/.netrc file with a Git access token for private repos. Alternative 1: Configure your system to use go mod with SSH First step is to configure the project to tell go mod tool to download the private go modules using SSH connections instead of HTTP. This will allow an easier authentication with public-private key scheme. To apply this change, developers need to modify their .gitconfig\n1 2 [url \u0026#34;ssh://git@github.com/\u0026#34;] insteadOf = https://github.com/ Flag your private repos as private Next step is to configure your Go project to set which dependencies are considered to be private. To do so, we can use the Go environment variable GOPRIVATE. For example, to configure all my github repos to be considered private, I can use the following command to set the environment variable.\n1 go env -w GOPRIVATE=github.com/zerjioang After those steps, I can execute go mod again to download dependencies\n1 go mod tidy Alternative 2: Configure your local $HOME/.netrc Previous solutions tends to work in most Linux environments, but more elegant solution is using a ~/.netrc file. This file defines automatic logins for ftp, but other programs have also adopted it, including Git.\nIf your system does not include this file, you can create it with touch $HOME/.netrc. The file should have the following format:\n1 machine gitlab.company.com login USERNAME password TOKEN Replace gitlab.company.com, USERNAME, and TOKEN with your values. Now when you push or pull via HTTPS in Git, it will use that information to login you in. This is why you need the write_repository scope for local purposes.\nThis will also work with GitHub, Bitbucket, or GitLab.com and even private Gitlab VCS repositories.\n1 machine github.com login USERNAME password TOKEN One final thing that you’ll have to do is set a GOPRIVATE environment variable. This contains a comma-separated list of module prefixes. Save this value to your ~/.bashrc or ~/.zshrc.\nReferences https://help.github.com/articles/which-remote-url-should-i-use http://golang.org/doc/faq https://mirrors.edge.kernel.org/pub/software/scm/git/docs/git-config.html Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2022-01-12T00:00:00Z","image":"https://curiousstuff.eu/post/using-go-modules-with-private-repositories-at-github/arnold-francisca-f77Bh3inUpE-unsplash_hue248f563f7e5e22e3169a52e1b8049a9_200101_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/using-go-modules-with-private-repositories-at-github/","title":"Using Go Modules with private repositories at Github"},{"content":"Que son los datos abiertos u opendata? Los datos abiertos son datos que pueden ser utilizados, reutilizados y redistribuidos libremente por cualquier persona, y que se encuentran sujetos, cuando más, al requerimiento de atribución y de compartirse de la misma manera en que aparecen.\nDicha atribución, normalmente esta ligada a una licencia de uso o explotación que define que cosas puedes hacer con ellos y si tienes que dar algun tipo de autoria. Algunas de las licencias de explotación más comunes que se podrán encontrar son:\nMIT: Esta licencia es una Licencia de software libre permisiva lo que significa que impone muy pocas limitaciones en la reutilización y por tanto posee una excelente Compatibilidad de licencia. Apache: La licencia Apache (Apache License o Apache Software License para versiones anteriores a 2.0) es una licencia de software libre permisiva creada por la Apache Software Foundation (ASF).8​ La licencia Apache (/ əˈpætʃi/) (con versiones 1.0, 1.1 y 2.0) requiere la conservación del aviso de derecho de autor y el descargo de responsabilidad, pero no es una licencia copyleft, ya que no requiere la redistribución del código fuente cuando se distribuyen versiones modificadas. Creative Commons: Las licencias Creative Commons (CC) son una herramienta legal de carácter gratuito que permite a los usuarios (licenciatarios) usar obras protegidas por derecho de autor sin solicitar el permiso del autor de la obra. Caracteristicas de los datos abiertos Disponibilidad y acceso: la información debe estar disponible como un todo y a un costo razonable de reproducción, preferiblemente descargándola de internet. Además, la información debe estar disponible en una forma conveniente y modificable. Reutilización y redistribución: los datos deben ser provistos bajo términos que permitan reutilizarlos y redistribuirlos, e incluso integrarlos con otros conjuntos de datos. Participación universal: todos deben poder utilizar, reutilizar y redistribuir la información. No debe haber discriminación alguna en términos de esfuerzo, personas o grupos. Restricciones “no comerciales” que prevendrían el uso comercial de los datos; o restricciones de uso para ciertos propósitos (por ejemplo sólo para educación) no son permitidos. ¿De qué datos estamos hablando? La clave es que cuando se trata de abrir datos el foco se pone en información no personal, es decir, datos que no contienen información sobre individuos específicos. De manera similar, para algunos tipos de datos gubernamentales, pueden aplicar restricciones nacionales de seguridad.\nCaso de uso Bilbobus Ahora que ya conocemos el concepto de datos abiertos, veamoslo mejor con un ejemplo más ilustrativo. En este caso, he elegido el caso de uso de Bilbobus.\n¿Que es Bilbobus? El servicio municipal de transporte urbano de Bilbao, Bilbobus que cuenta en la actualidad con 44 líneas, 27 líneas convencionales, 9 Auzolineas y 8 Gautxoris, transportó el pasado año a casi 16 millones de personas. La flota de Bilbobus la componen 141 autobuses, y el servicio cuenta con 525 paradas en todo Bilbao, lo que supone que el 99,8% de la población tiene una a menos de 300 metros.\nImagen de un Bilbobus L30 de servicio. A través de la empresa Biobide, que desde 2012 es la encargada de ofrecer este servicio, Bilbobus se ha convertido en un referente de movilidad en la ciudad, consiguiendo año tras año una alta valoración entre los usuarios y usuarias.\nEn la actualidad la flota cuenta con 11 vehículos 100% eléctricos, y una unidad más se incorporará a lo largo de 2021; además, 60 unidades híbridas han ido sustituyendo a los vehículos de combustión, lo que muestra el compromiso del servicio con el Medio Ambiente y la sostenibilidad.\nLa apuesta de Bilbobus por los vehículos eléctricos forma parte de su compromiso con el medio ambiente, la sostenibilidad, y la búsqueda de soluciones para reducir el impacto de esta actividad en el medio ambiente. De los 148 vehículos de la flota que se mueven con combustible, 106 lo hacen con BIO 10 %.\nBilbobus está compuesta por una plantilla formada por 625 personas que trabajan cada día por ofrecer a la ciudadanía un servicio de transporte público de máxima calidad y para todos.\nEncontrando los datos abiertos sobre Bilbobus En este caso, los datos abiertos relacionados con el Ayuntamiento de Bilbao y sus diferentes servicios se encuentran disponibles en la página https://www.bilbao.eus/opendata/es/inicio. Desde allí, se puede acceder a los diferentes datos publicados con su información asociada.\nPágina web donde se publican los datos abiertos del ayuntamiento de Bilbao Gracias al buscador incorporado, o haciendo una busqueda en Google, podremos encontrar datasets que nos interesan. En la búsqueda que yo he realizado, se muestran 22 resultados encontrados.\nColecciones de datos abiertas que incluyen el término ‘Bilbobus’ Horarios teoricos de salida En este ejemplo, los horarios de salida se pueden consultar en la coleccion de datos publicada en http://www.bilbao.eus/aytoonline/jsp/opendata/bilbobus/od_horarios.jsp?idioma=c\u0026formato=csv\u0026tipo=cabecera\nInformación detallada del dataset Descripción: Detalle de los horarios teóricos de salida en cabecera de los autobuses Bilbobus. Formatos: CSV Publicador: Ayuntamiento de Bilbao Tema: Transporte Ámbito geográfico: Bilbao Idioma: Español Fecha de creación: 30/10/2014 Fecha de actualización: 13/12/2021 Frecuencia de actualización: Diaria Acceso en formato RDF: también se puede acceder al dataset en formato RDF mediante la URL https://www.bilbao.eus/opendata/es/catalogo/dato-bilbobus-horarios-teoricos-salida-cabecera/rdf\nA través de este dataset, deberiamos ser capaces de conocer los horarios de salida de las cabeceras de todas las lineas disponibles. Veamos si el fichero CSV descargado tiene alguna información extra. Para ello usaremos el comando head\n1 2 head -n 1 od_lineas.csv Temporada;Codigo linea;Descripcion linea;Tipo dia;Sentido;Horas de salida Estamos de suerte, este fichero CSV descargado SI que contiene, al menos, el nombre de cada columna, lo que nos puede dar pistas sobre que es lo que significa cada dato. En otros ficheros o datasets, no habrá esta información, con lo cual tendra que deducirse con dificultad.\nInformación disponible en el dataset: las columnas Temporada Codigo linea Descripcion linea Tipo dia Sentido Horas de salida Analizando los datos y su tipo Ahora que ya sabemos el nombre de cada columna, el siguiente paso es conocer que tipo de dato alberga. Como esta información no se ha definido en ningún sitio por el publicador del dataset, tendremos que deducirlo, de nuevo. Para ello, volvemos a usar el comando head para ver las primeras lineas del dataset CSV.\n1 2 3 4 5 6 7 head -n 5 od_lineas Temporada;Codigo linea;Descripcion linea;Tipo dia;Sentido;Horas de salida Invierno 2021 al 2022;01;PT-Semana / (PLAZA BIRIBILA) - IDA;Noche Buena / Noche Vieja;IDA;06:15:00,06:30:00,06:45:00,07:00:00,07:15:00,07:30:00,07:45:00,08:00:00,08:15:00,08:30:00,08:45:00,09:00:00,09:15:00,09:30:00,09:45:00,10:00:00,10:15:00,10:30:00,10:45:00,11:00:00,11:15:00,11:30:00,11:45:00,12:00:00,12:15:00,12:30:00,12:45:00,13:00:00,13:15:00,13:30:00,13:45:00,14:00:00,14:15:00,14:30:00,14:45:00,15:00:00,15:15:00,15:30:00,15:45:00,16:00:00,16:15:00,16:30:00,16:45:00,17:00:00,17:15:00,17:30:00,17:45:00,18:00:00,18:15:00,18:30:00,18:45:00,19:00:00,19:15:00,19:30:00,19:45:00,20:00:00,20:15:00,20:30:00,20:45:00,21:00:00,21:15:00,21:30:00,21:45:00,22:00:00 Invierno 2021 al 2022;01;PT-Semana / (ARANGOITI) - VLT - A;Noche Buena / Noche Vieja;VUELTA;06:30:00,06:45:00,07:00:00,07:15:00,07:30:00,07:45:00,08:00:00,08:15:00,08:30:00,08:45:00,09:00:00,09:15:00,09:30:00,09:45:00,10:00:00,10:15:00,10:30:00,10:45:00,11:00:00,11:15:00,11:30:00,11:45:00,12:00:00,12:15:00,12:30:00,12:45:00,13:00:00,13:15:00,13:30:00,13:45:00,14:00:00,14:15:00,14:30:00,14:45:00,15:00:00,15:15:00,15:30:00,15:45:00,16:00:00,16:15:00,16:30:00,16:45:00,17:00:00,17:15:00,17:30:00,17:45:00,18:00:00,18:15:00,18:30:00,18:45:00,19:00:00,19:15:00,19:30:00,19:45:00,20:00:00,20:15:00,20:30:00,20:45:00,21:00:00,21:15:00,21:30:00,21:45:00,22:00:00,22:15:00,22:30:00 Invierno 2021 al 2022;01;PT-Semana / (PLAZA BIRIBILA) - IDA;Navidad /Reyes S�bado;IDA;07:30:00,08:00:00,08:30:00,09:00:00,09:30:00,10:00:00,10:30:00,11:00:00,11:30:00,12:00:00,12:30:00,13:00:00,13:30:00,14:00:00,14:30:00,15:00:00,15:30:00,16:00:00,16:30:00,17:00:00,17:30:00,18:00:00,18:30:00,19:00:00,19:30:00,20:00:00,20:30:00,21:00:00,21:30:00,22:00:00,22:30:00 Invierno 2021 al 2022;01;PT-Semana / (ARANGOITI) - VLT - A;Navidad /Reyes S�bado;VUELTA;08:00:00,08:30:00,09:00:00,09:30:00,10:00:00,10:30:00,11:00:00,11:30:00,12:00:00,12:30:00,13:00:00,13:30:00,14:00:00,14:30:00,15:00:00,15:30:00,16:00:00,16:30:00,17:00:00,17:30:00,18:00:00,18:30:00,19:00:00,19:30:00,20:00:00,20:30:00,21:00:00,21:30:00,22:00:00,22:30:00 Te has fijado?\nOtra piedra más en el camino. El fichero original tiene una codificación de los datos que no soporta los acentos/tildes del castellano, con lo cual es otra cosa que tenemos que corregir antes de empezar a procesar los datos.\nVamos a validar la hipotesis. Para conocer la codificación o encoding del fichero actual, podemos usar el comando file de la siguiente manera:\n1 2 file -i od_lineas od_lineas.csv: text/plain; charset=iso-8859-1 ISO 8859-1 es una norma de la ISO que define la codificación del alfabeto latino, incluyendo los diacríticos (como letras acentuadas, ñ, ç), y letras especiales (como ß, Ø), necesarios para la escritura de las siguientes lenguas originarias de Europa occidental: afrikáans, alemán, español, catalán, euskera, danés, escocés, feroés, , francés, gaélico, gallego, inglés, islandés, italiano, neerlandés, noruego, portugués y sueco.\nTambién conocida como Alfabeto Latino n.º 1.\nEn efecto, detecta que el fichero esta codificado como iso-8859-1, pero por alguna razón los caracteres con tildes usados no corresponden con la especificación ISO y se muestran como �.\nProcesando el fichero CSV Ahora que el fichero ya es legible, para el proposito de integrar en un futuro el contenido en una aplicación web, vamos a convertir el fichero CSV a formato JSON. Para ello, podemos hacerlo manualmente, o usar alguna herramienta online como https://csvjson.com/csv2json. El resultado de la conversión será algo similar a lo siguiente\n1 2 3 4 5 6 7 8 { \u0026#34;Temporada\u0026#34;: \u0026#34;Invierno 2021 al 2022\u0026#34;, \u0026#34;Codigo linea\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;Descripcion linea\u0026#34;: \u0026#34;PT-Semana / (PLAZA BIRIBILA) - IDA\u0026#34;, \u0026#34;Tipo dia\u0026#34;: \u0026#34;Viernes Noche Buena / Noche Vieja\u0026#34;, \u0026#34;Sentido\u0026#34;: \u0026#34;IDA\u0026#34;, \u0026#34;Horas de salida\u0026#34;: \u0026#34;06:15:00,06:30:00,06:45:00,07:00:00,07:15:00,07:30:00,07:45:00,08:00:00,08:15:00,08:30:00,08:45:00,09:00:00,09:15:00,09:30:00,09:45:00,10:00:00,10:15:00,10:30:00,10:45:00,11:00:00,11:15:00,11:30:00,11:45:00,12:00:00,12:15:00,12:30:00,12:45:00,13:00:00,13:15:00,13:30:00,13:45:00,14:00:00,14:15:00,14:30:00,14:45:00,15:00:00,15:15:00,15:30:00,15:45:00,16:00:00,16:15:00,16:30:00,16:45:00,17:00:00,17:15:00,17:30:00,17:45:00,18:00:00,18:15:00,18:30:00,18:45:00,19:00:00,19:15:00,19:30:00,19:45:00,20:00:00,20:15:00,20:30:00,20:45:00,21:00:00,21:15:00,21:30:00,21:45:00,22:00:00\u0026#34; } Pero todavía se necesita procesar el JSON resultado para eliminar toda aquella información que no aporta valor y formatearlo correctamente.\nPor ejemplo, se puede convertir al siguiente modelo JSON\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 { \u0026#34;bus\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Viernes Noche Buena / Noche Vieja\u0026#34;, \u0026#34;route\u0026#34;: \u0026#34;ida\u0026#34;, \u0026#34;schedules\u0026#34;: [ \u0026#34;06:15\u0026#34;, \u0026#34;06:30\u0026#34;, \u0026#34;06:45\u0026#34;, \u0026#34;07:00\u0026#34;, \u0026#34;07:15\u0026#34;, \u0026#34;07:30\u0026#34;, \u0026#34;07:45\u0026#34;, \u0026#34;08:00\u0026#34;, \u0026#34;08:15\u0026#34;, \u0026#34;08:30\u0026#34;, \u0026#34;08:45\u0026#34;, \u0026#34;09:00\u0026#34;, \u0026#34;09:15\u0026#34;, \u0026#34;09:30\u0026#34;, \u0026#34;09:45\u0026#34;, \u0026#34;10:00\u0026#34;, \u0026#34;10:15\u0026#34;, \u0026#34;10:30\u0026#34;, \u0026#34;10:45\u0026#34;, \u0026#34;11:00\u0026#34;, \u0026#34;11:15\u0026#34;, \u0026#34;11:30\u0026#34;, \u0026#34;11:45\u0026#34;, \u0026#34;12:00\u0026#34;, \u0026#34;12:15\u0026#34;, \u0026#34;12:30\u0026#34;, \u0026#34;12:45\u0026#34;, \u0026#34;13:00\u0026#34;, \u0026#34;13:15\u0026#34;, \u0026#34;13:30\u0026#34;, \u0026#34;13:45\u0026#34;, \u0026#34;14:00\u0026#34;, \u0026#34;14:15\u0026#34;, \u0026#34;14:30\u0026#34;, \u0026#34;14:45\u0026#34;, \u0026#34;15:00\u0026#34;, \u0026#34;15:15\u0026#34;, \u0026#34;15:30\u0026#34;, \u0026#34;15:45\u0026#34;, \u0026#34;16:00\u0026#34;, \u0026#34;16:15\u0026#34;, \u0026#34;16:30\u0026#34;, \u0026#34;16:45\u0026#34;, \u0026#34;17:00\u0026#34;, \u0026#34;17:15\u0026#34;, \u0026#34;17:30\u0026#34;, \u0026#34;17:45\u0026#34;, \u0026#34;18:00\u0026#34;, \u0026#34;18:15\u0026#34;, \u0026#34;18:30\u0026#34;, \u0026#34;18:45\u0026#34;, \u0026#34;19:00\u0026#34;, \u0026#34;19:15\u0026#34;, \u0026#34;19:30\u0026#34;, \u0026#34;19:45\u0026#34;, \u0026#34;20:00\u0026#34;, \u0026#34;20:15\u0026#34;, \u0026#34;20:30\u0026#34;, \u0026#34;20:45\u0026#34;, \u0026#34;21:00\u0026#34;, \u0026#34;21:15\u0026#34;, \u0026#34;21:30\u0026#34;, \u0026#34;21:45\u0026#34;, \u0026#34;22:00\u0026#34; ] } Y tener las siguientes mejoras:\nLos nombres de las variables JSON son todas minusculas, siguiendo el estandar. Las horas de salida se han convertido de formato texto (String) a un formato de lista, y así poder iterar sobre ellas o realizar busquedas en caso de que sea necesario. Este proceso se tiene que repetir con toda la información original antes de poder usar los datos y extraer su valor.\nConclusiones Como ves, el que los datos de un determinado servicio estén publicados no quiere decir que sean procesables. Es necesario un trabajo previo, y más aun cuando no se tienen pistas de cómo está modelada la información. En este post hemos seleccionado un dataset facil de entender, pero te puedes encontrar otros que te pongan el trabajo más dificil, para muestra un botón.\nReferencias https://www.bilbao.eus/opendata/es/catalogo/dato-bilbobus-horarios-teoricos-salida-cabecera https://www.bilbao.eus/opendata/es/catalogo/dato-bilbobus-horarios-teoricos-salida-cabecera/rdf https://www.bilbao.eus/opendata/es/catalogo https://www.bilbao.eus/opendata/es/terminos-de-uso https://csvjson.com/csv2json Suscríbete, haz una donación o hazte premium ¿Te resulto de ayuda? Ayuda con tu granito de arena a mejorar este blog y obten ventajas exclusivas siendo miembro premium!\nSuscríbete 💬 Comparte!! ¡Gracias por leer esto y espero que hayas encontrado la información útil! Si tienes alguna duda no tardes en escribirme un comentario más abajo. Y si quieres ver más contenido, sólo házmelo saber y comparte este post con tus colegas, compañeros de trabajo, amigos, etc. Compartir por LinkedIn Compartir por Telegram Compartir por Twitter Compartir por Email Compartir por Whatsapp ","date":"2021-12-13T00:00:00Z","image":"https://curiousstuff.eu/post/conociendo-el-mundo-del-opendata-con-un-caso-real-bilbobus/linkedin_blog_head_hue27bc1ad9f733514d70dcb8ffe9a5e6c_1623374_120x120_fill_box_smart1_3.png","permalink":"https://curiousstuff.eu/post/conociendo-el-mundo-del-opendata-con-un-caso-real-bilbobus/","title":"Conociendo el mundo del opendata con un caso real: Bilbobus"},{"content":"Introducing LaTeX LaTeX is a text composition system, oriented to the creation of written documents with high typographic quality. Due to its characteristics and possibilities, it is used especially intensively in the generation of scientific articles and books that include, among other elements, mathematical expressions.\nLaTeX consists of a large set of TeX macros, written by Leslie Lamport in 1984, with the intention of facilitating the use of the typesetting language, TEX, created by Donald Knuth. It is widely used for the composition of academic articles, theses and technical books, since the typographic quality of documents produced in LaTeX is considered adequate for the needs of a first-line scientific publisher, many of which already use it.\nLaTeX is free software under LPPL license.\nInstalling latex packages Warning: sudo required\nTo execute following lines, sudo access is required. To install latex packages on apt based systems, run\n1 2 3 4 5 6 apt install texlive-luatex \\ texlive-latex-base \\ texlive-fonts-recommended \\ texlive-latex-recommended \\ texlive-fonts-extra \\ texlive-bibtex-extra Installing additional languages In my specific case, I also want to install both Spanish and English languages. In the same way as before, we can install them with apt\n1 2 3 apt install \\ texlive-lang-spanish \\ texlive-lang-english \\ What is Texmaker Texmaker is a free editor distributed under the GPL license for writing cross-platform text documents that integrates many tools needed to write LaTeX documents into a single application. Texmaker includes Unicode support, spell checking, auto-completion, code folding and a built-in pdf viewer with synctex support and continuous viewing mode.\nOverview of Texmaker application Installing Texmaker To install Texmaker application, you will need to download a installer file from https://www.xm1math.net/texmaker/\nSubscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2021-11-11T00:00:00Z","image":"https://curiousstuff.eu/post/installing-latex-and-texmaker-in-ubuntu-20.04/3134157_hu968f706e615475f7b129e4d146738074_81858_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/installing-latex-and-texmaker-in-ubuntu-20.04/","title":"Installing Latex and Texmaker in Ubuntu 20.04"},{"content":"Many of us who have a Raspberry Pi want to have access to it even from outside our network. Some use it to publish their blog or personal web page, others want to access a torrent server from which they can add downloads when they are not at home so that they are available when they arrive, and for others it could be a gateway to their entire home automation system, being able to control and monitor the status of their home when they are not at home.\nIf for any of these or other reasons you want your Raspberry Pi to be accessible from the Internet, I am sure you will find this post very useful.\nThe steps to access the Raspberry Pi remotely are not too complicated. In most cases we simply have to access the router or the portal that our operator provides us to \u0026ldquo;tinker\u0026rdquo; with its configuration and redirect the ports we need to the internal IP of our Raspberry.\nIntroducing Cloudflare The online platform Cloudflare does a lot of things that can be useful in different situations (and besides, most of its features are free). Today in this article, we are going to focus on one of them: Cloudflare acting as a DNS server.\nAs you know, the Internet uses the so-called IPs as addresses of everything connected to it, but when we enter, for example, https://curiousstuff.eu, we do not put any IP in the browser bar, but we type an address. This is due to an invisible \u0026ldquo;help\u0026rdquo; that makes the Internet more \u0026ldquo;human\u0026rdquo;: the DNS.\nWithout going into technical \u0026ldquo;stuff\u0026rdquo;, we can say that DNS are servers that \u0026ldquo;know\u0026rdquo; in which address other servers are located, converting addresses written with alphabet (easier to read and remember for people) in IPs. So, for example, in the case of writing http://google.es in our browser, thanks to the DNS server, we would actually be accessing something like 142.250.74.227.\n1 ping google.es 1 2 3 4 5 6 PING google.es (142.250.74.227) 56(84) bytes of data. 64 bytes from par10s40-in-f3.1e100.net (142.250.74.227): icmp_seq=1 ttl=114 time=33.8 ms ^C --- google.es ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 33.880/33.880/33.880/0.000 ms Did you notice that ping shows the IP 142.250.74.227 as the IP resolved for google.es?\nThat is! a DNS uses a kind of conversion table to go from URLs to IPs and CloudFlare allows us, for free, to make these conversions.\nIssues of home networking However, we encounter two problems:\nIn our house, almost 100% of the time we have a dynamic IP, that is, it changes over time and therefore we can not assign in that table of conversions.\nWe do not have a domain. The .com or .es or any other tld domains are paid and their price varies between providers but we can set at 12€ the average annual price of a .com domain.\nOn this last point, there are free alternatives for the user, so that some well-known companies give us for free a subdomain that is part of their own domain. I, for example, have used a lot noip.com, from where we can create a free subdomain such as rpi-homeland.hopto.org. This option is fine if you don\u0026rsquo;t have a domain already and you can\u0026rsquo;t get one, but it has the disadvantage that you will have to renew it every $N$ days (I think I remember it was every month) which in the long run becomes quite tedious.\nHaving a domain is better So purchase one and then keep reading. Once we have purchased a domain, we have to point it to our home IP, which is dynamic and therefore changeable. This is where we have to use Clouflare and do a little magic ;).\nConfiguring Cloudflare as our DDNS Step 1: define your subdomain in Cloudflare We log into our Cloudflare account and go to Domains tab. You should see something similar to below image, for your brand new added domain in Cloudflare.\nCloudflare DNS Record registration using dashboard. In the DNS tab click on add an A-record for our current home IP (remember that we are talking about the public IP, i.e. the IP that the router has facing the Internet). You can easily find it out through your Router management website or ISP provider\nNote: if you don\u0026rsquo;t know the IP, just put a valid IPv4 in the field, for example: 185.199.111.153. We\u0026rsquo;ll take care later in the update process of setting the right value.\nStep 2: Obtain a secret token to use Cloudflare v4 API Once the subdomain is defined, we need to get a token in order to make authenticated API calls. To get this token you must go to Account \u0026gt; Settings \u0026gt; API Tokens. The tab content should be similar to\nNow click on Create New Token button API Tokens tab As you can see, Cloudflare already provides some common used token templates. In this scenario, we can use the template called:\nSpanish Name: Editar zona de DNS English Name: Edit DNS zone Use template Edit DNS zone API Tokens tab Follow the process until you get your token and store it securely. For security reasons, cloudflare will only show you the token once.\nStep 3: Log into your Raspberry PI Using the Cloudflare API, we are going to update this value automatically so that it is always up to date. To do this, we access our Raspberry via SSH in order to get a session.\nThis is a required step, in order to execute following steps.\nUsually, to log in, you should use a command like\n1 ssh pi@rpi.local In the previous command, pi is the username you defined and rpi.local is the device name. you can also use the IP address to log in, of course.\nStep 4: Download a Cloudflare DDNS updater Download a DDNS updater in order to report the active device IP to Cloudflare.\nNote: source code of DDNS updater can be found at https://github.com/zerjioang/ddns-cloudflare\n1 2 3 4 5 cd /opt wget https://github.com/zerjioang/ddns-cloudflare/releases/download/0.3.1/ddns-cloudflare_0.3.1_Linux_$(arch).tar.gz tar -xf ddns-cloudflare_0.3.1_Linux_$(arch).tar.gz --one-top-level rm -rf ddns-cloudflare_0.3.1_Linux_$(arch).tar.gz cd ddns-cloudflare_0.3.1_Linux_$(arch)/bin/ After executing previous commands, you should have a DDNS updater ready to be used and installed in your raspberry pi. Check the application exists with ls command.\n1 2 total 6,1M -rwxr-xr-x 1 root root 6,1M oct 21 16:29 ddns-cloudflare Configure the DDNS-Updater In order to update your specific DNS record of your registered DNS domain, there are some things you need to configure. In this example, the 3 environment variables used by the ddns-updater are persisted to $HOME/.bashrc so that all session can have available those variables with their right content.\nTo write variable content to our .bashrc file\n1 2 3 echo \u0026#39;export X_CF_AGENT_TOKEN=yourtoken\u0026#39; \u0026gt;\u0026gt; $HOME/.bashrc echo \u0026#39;export X_CF_AGENT_ZONE=example.com\u0026#39; \u0026gt;\u0026gt; $HOME/.bashrc echo \u0026#39;export X_CF_AGENT_DNS_A_RECORD=rpi\u0026#39; \u0026gt;\u0026gt; $HOME/.bashrc to launch the DDNS updater\n1 /opt/ddns-cloudflare/bin/ddns-cloudflare update Previous command will try to update the DNS A Record of rpi.example.com with the host actual public IP\nAdding a cron job In order to refresh the current device IP every specific time window, we can use crontab for example.\nAccess to your cron file with crontab -e and add the following content. For example, in order to update the device IP eery 10 minutes you need to add\n1 2 # run a Cloudflare DDNS updater each 10 minutes */10 * * * * /opt/ddns-cloudflare/bin/ddns-cloudflare update You can verify the content of the crontab file with crontab -l. Your new crontab file should look like\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # Edit this file to introduce tasks to be run by cron. # # Each task to run has to be defined through a single line # indicating with different fields when the task will be run # and what command to run for the task # # To define the time you can provide concrete values for # minute (m), hour (h), day of month (dom), month (mon), # and day of week (dow) or use \u0026#39;*\u0026#39; in these fields (for \u0026#39;any\u0026#39;). # # Notice that tasks will be started based on the cron\u0026#39;s system # daemon\u0026#39;s notion of time and timezones. # # Output of the crontab jobs (including errors) is sent through # email to the user the crontab file belongs to (unless redirected). # # For example, you can run a backup of all your user accounts # at 5 a.m every week with: # 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/ # # For more information see the manual pages of crontab(5) and cron(8) # # m h dom mon dow command # run a Cloudflare DDNS updater each 10 minutes */10 * * * * /opt/ddns-cloudflare/bin/ddns-cloudflare update I need to understand better how crontab settings are configured, I recommend you to use https://crontab.guru/ if you want to easily learn how to configure the crontab timing.\nA success execution If everything went like planned, a success execution should generate following logs.\n1 2 3 4 5 6 7 8 9 2021/10/21 20:23:17 Updating device IP. Please wait... 2021/10/21 20:23:17 Requesting IP check for: rpi.curiousstuff.eu 2021/10/21 20:23:17 Reading current device IP. Please wait... 2021/10/21 20:23:17 Readed IP: A.B.C.D 2021/10/21 20:23:17 Connecting with Cloudflare services... 2021/10/21 20:23:19 Cloudflare ZONE ID: 705614125y14y234724565285723 2021/10/21 20:23:20 Cloudflare DNS RECORD found: 1 records 2021/10/21 20:23:20 Update successful 2021/10/21 20:23:20 cloudflare DDNS-updater took 2.478195385s After a success execution, you can go to your CloudFlare user dashboard and verify that the IP has indeed been updated.\nConclusion And now we have ready, and permanently, an address to point from the Internet to our router, which in turn, it will be redirecting the traffic to our Raspberry if we have configured it well.\nI hope this post has been useful. Now you can easily access your music, your printer or your devices taking advantage of your domain and, if you have followed these steps, it will not have taken you more than 10 minutes all the configuration.\nSubscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2021-10-14T00:00:00Z","image":"https://curiousstuff.eu/post/expose-the-raspberry-pi-to-internet-with-cloudflare/cloudflare_hu852939fb570d85fd002894a8b7fb0236_21093_120x120_fill_box_smart1_3.png","permalink":"https://curiousstuff.eu/post/expose-the-raspberry-pi-to-internet-with-cloudflare/","title":"Expose the Raspberry Pi to Internet with Cloudflare"},{"content":"This guide covers the basic instructions needed to install CUDA and verify that a CUDA application can run on Linux.\nCUDA on Linux can be installed using an RPM, Debian, Runfile, or Conda package, depending on the platform being installed on.\nInstalling CUDA Toolkit on Ubuntu When installing CUDA on Ubuntu, you can choose between the Runfile Installer and the Debian Installer. The Runfile Installer is only available as a Local Installer. The Debian Installer is available as both a Local Installer and a Network Installer. The Network Installer allows you to download only the files you need. The Local Installer is a stand-alone installer with a large initial download. In the case of the Debian installers, the instructions for the Local and Network variants are the same. For more details, refer to the Linux Installation Guide.\nPre-installation Actions Some actions must be taken before the CUDA Toolkit and Driver can be installed on Linux:\nVerify the system has a CUDA-capable GPU. Verify the system is running a supported version of Linux. Verify the system has gcc installed. Verify the system has the correct kernel headers and development packages installed. Download the NVIDIA CUDA Toolkit. Handle conflicting installation methods. Verify the system has a CUDA-capable GPU To verify that your GPU is CUDA-capable, go to your distribution\u0026rsquo;s equivalent of System Properties, or, from the command line, run:\n1 lspci | grep -i nvidia It must return your detected Graphic Card\n1 01:00.0 VGA compatible controller: NVIDIA Corporation GP107GL [Quadro P620] (rev a1) Verify the system is running a supported version of Linux The CUDA Development Tools are only supported on some specific distributions of Linux. These are listed in the CUDA Toolkit release notes.\nTo determine which distribution and release number you\u0026rsquo;re running, type the following at the command line:\n1 uname -m \u0026amp;\u0026amp; cat /etc/*release You should see output similar to the following, modified for your particular system:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 x86_64 DISTRIB_ID=Ubuntu DISTRIB_RELEASE=18.04 DISTRIB_CODENAME=bionic DISTRIB_DESCRIPTION=\u0026#34;Ubuntu 18.04.6 LTS\u0026#34; NAME=\u0026#34;Ubuntu\u0026#34; VERSION=\u0026#34;18.04.6 LTS (Bionic Beaver)\u0026#34; ID=ubuntu ID_LIKE=debian PRETTY_NAME=\u0026#34;Ubuntu 18.04.6 LTS\u0026#34; VERSION_ID=\u0026#34;18.04\u0026#34; HOME_URL=\u0026#34;https://www.ubuntu.com/\u0026#34; SUPPORT_URL=\u0026#34;https://help.ubuntu.com/\u0026#34; BUG_REPORT_URL=\u0026#34;https://bugs.launchpad.net/ubuntu/\u0026#34; PRIVACY_POLICY_URL=\u0026#34;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\u0026#34; VERSION_CODENAME=bionic UBUNTU_CODENAME=bionic Verify the system has gcc installed The gcc compiler is required for development using the CUDA Toolkit. It is not required for running CUDA applications. It is generally installed as part of the Linux installation, and in most cases the version of gcc installed with a supported version of Linux will work correctly.\nTo verify the version of gcc installed on your system, type the following on the command line:\n1 gcc --version 1 2 3 4 gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0 Copyright (C) 2017 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Verify the system has the correct kernel headers and development packages installed The kernel headers and development packages for the currently running kernel can be installed with:\n1 sudo apt-get install linux-headers-$(uname -r) Download the NVIDIA CUDA Toolkit The NVIDIA CUDA Toolkit is available at https://developer.nvidia.com/cuda-downloads.\nHandle conflicting installation methods. Before installing CUDA, any previously installations that could conflict should be uninstalled. This will not affect systems which have not had CUDA installed previously, or systems where the installation method has been preserved\nUsing Debian installer Basically, the steps to install using this method are. Install the repository meta-data, install GPG key, update the apt-get cache, and install CUDA.\nNote that is sudo is installed on your system, you need to execute following commands with sudo and the current user must be in sudoers.\n1 2 3 4 5 6 7 wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600 wget https://developer.download.nvidia.com/compute/cuda/11.4.2/local_installers/cuda-repo-ubuntu1804-11-4-local_11.4.2-470.57.02-1_amd64.deb sudo apt-key add /var/cuda-repo-ubuntu1804-11-4-local/7fa2af80.pub sudo dpkg -i cuda-repo-ubuntu1804-11-4-local_11.4.2-470.57.02-1_amd64.deb sudo apt-get update sudo apt-get -y install cuda Now you to reboot the machine and setup your environment.\n1 2 export PATH=/usr/local/cuda-11.4/bin${PATH:+:${PATH}} export LD_LIBRARY_PATH=/usr/local/cuda-11.4/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}} Finally, if you want the samples you can get them with\n1 2 3 4 cuda-install-samples-11.4.sh ~ cd ~/NVIDIA_CUDA-11.4_Samples/5_Simulations/nbody make ./nbody Remember that you have to run the samples by navigating to the executable\u0026rsquo;s location, otherwise it will fail to locate dependent resources.\nUsing runfile installer DISABLE Nouveau drivers Create a file at /etc/modprobe.d/blacklist-nouveau.conf with the following contents\n1 2 blacklist nouveau options nouveau modeset=0 Regenerate the kernel initramfs\n1 sudo update-initramfs -u After this step, reboot into runlevel 3 by temporarily adding the number 3 and the word nomodeset to the end of the system\u0026rsquo;s kernel boot parameters. Finally, run the installer:\n1 2 wget https://developer.download.nvidia.com/compute/cuda/11.4.2/local_installers/cuda_11.4.2_470.57.02_linux.run sudo sh cuda_11.4.2_470.57.02_linux.run --silent Create an xorg.conf file to use the NVIDIA GPU for display:\n1 sudo nvidia-xconfig CUDA Toolkit Post-installation steps The post-installation actions must be manually performed. These actions are split into mandatory, recommended, and optional sections.\nEnvironment Setup Install Persistence Daemon Install Persistence Daemon NVIDIA is providing a user-space daemon on Linux to support persistence of driver state across CUDA job runs. The daemon approach provides a more elegant and robust solution to this problem than persistence mode. For more details on the NVIDIA Persistence Daemon.\nThe NVIDIA Persistence Daemon can be started as the root user by running\n1 /usr/bin/nvidia-persistenced --verbose References https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html https://docs.nvidia.com/cuda/pdf/CUDA_Installation_Guide_Linux.pdf Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2021-10-07T00:00:00Z","image":"https://curiousstuff.eu/post/installing-cuda-toolkit-v11.4.2-on-ubuntu/cuda_hu6c8b155dc78411b275d31b1cc72ef8c8_167238_120x120_fill_box_smart1_3.png","permalink":"https://curiousstuff.eu/post/installing-cuda-toolkit-v11.4.2-on-ubuntu/","title":"Installing CUDA Toolkit v11.4.2 on Ubuntu"},{"content":"In this small article, I dig into some caveats that make your software development better when working with files. We talk about, how file reading can be done in Go using buffered readings to speedup data access and improve our overall programm experience.\nI will show you a basic example of file reading based on real example.\nA real example of file reading Most unix based systems, contains a small utility called wc with stands for word count and according to man documentation, states:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 WC(1) User Commands WC(1) NAME wc - print newline, word, and byte counts for each file SYNOPSIS wc [OPTION]... [FILE]... wc [OPTION]... --files0-from=F DESCRIPTION Print newline, word, and byte counts for each FILE, and a total line if more than one FILE is specified. A word is a non-zero-length sequence of characters delimited by white space. With no FILE, or when FILE is -, read standard input. The options below may be used to select which counts are printed, always in the following order: newline, word, character, byte, maximum line length. -c, --bytes print the byte counts -m, --chars print the character counts -l, --lines print the newline counts --files0-from=F read input from the files specified by NUL-terminated names in file F; If F is - then read names from standard input -L, --max-line-length print the maximum display width -w, --words print the word counts --help display this help and exit --version output version information and exit AUTHOR Written by Paul Rubin and David MacKenzie. REPORTING BUGS GNU coreutils online help: \u0026lt;http://www.gnu.org/software/coreutils/\u0026gt; Report wc translation bugs to \u0026lt;http://translationproject.org/team/\u0026gt; COPYRIGHT Copyright © 2017 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;http://gnu.org/licenses/gpl.html\u0026gt;. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. SEE ALSO Full documentation at: \u0026lt;http://www.gnu.org/software/coreutils/wc\u0026gt; or available locally via: info \u0026#39;(coreutils) wc invocation\u0026#39; GNU coreutils 8.28 January 2018 WC(1) A small utility that given a file, counts the number of words existing on it.\nRunning wc over Moby Dick. To test the output of wc commmand, we will use the Moby Dick by Herman Melville book downloaded from The Project Gutenberg as txt file. You can download the text file from here.\nTo count the number of words existing in our moby.txt file, we run following command:\n1 wc -w moby.txt The result of executing the wc command is\n1 214112 moby.txt Which means, wc returns that file moby.txt contains $214112$ words, according to wc word count algorithm. We also measure the execution time, so that we can compare later with of designed version.\nExecution time\n1 2 3 time wc -w moby.txt wc -w moby.txt 0,03s user 0,00s system 99% cpu 0,034 total The time required to count all words by wc was 0.034 seconds.\nBuilding a simple wc in Go To understand how efficiently read and process information from files in Go, we will implement a simple word count in Go using following algorithm:\nRead file by chunks using a buffer based reader. On each chunk, we will detect how many word are, considering a word a space separated text string. Increment the word counter by one. Move to the next data chunk. Go to 2 until chunks are ended. Open the file for reading The initial step in all programs that read data from files, it to get read access to the required file. In Go, we can get a file access with next code snippet.\n1 2 3 4 5 6 // open the file for reading f, err := os.Open(name) if err != nil { log.Fatal(err) } defer f.Close() Create a buffer reader Next step is to create a buffered reader to handle our input data efficienty.\n1 2 3 // create a buffered reader reader := bufio.NewReader(f) var part chunk The value of chunksize parameter with define the number of bytes that will be filled on each data chunk. In order to choose a good value, we could set arbitrary values and measure the performance. However, in this case, we will set this value according to our system memory pagesize value. This will allow the programm to fill memory pages with our chunks data. In my current laptop, the pagesize is 4096.\nWe also define a custom data type called chunk as follows\n1 2 3 4 5 const ( chunksize = 4096 ) type chunk [chunksize]byte Loop while chunks exists Next, we need to handle incoming data on each chunks until no more data is feeded by the file. The code block we use for this processing is as follows\n1 2 3 4 5 6 7 8 9 10 11 12 for { var totalread int if totalread, err = reader.Read(part[:]); err != nil { break } // TODO word count algorithm here } if err != io.EOF { log.Fatal(\u0026#34;error reading \u0026#34;, name, \u0026#34;: \u0026#34;, err) } else { err = nil } Implementing a word count algorithm Now that we know how to read all file chunks, the most important part is the algorithm that detects and counts how many words are in the data file. For simplicity purposes, the word count algorithm we implement is:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 previousWord := 0 for i := 0; i \u0026lt; totalread-1; i++ { c := part[i] n := part[i+1] isSep := c == \u0026#39; \u0026#39; || c == \u0026#39;\\n\u0026#39; || c == \u0026#39;\\r\u0026#39; || c == \u0026#39;\\t\u0026#39; isWord := n != \u0026#39; \u0026#39; \u0026amp;\u0026amp; n != \u0026#39;\\n\u0026#39; \u0026amp;\u0026amp; n != \u0026#39;\\r\u0026#39; \u0026amp;\u0026amp; n != \u0026#39;\\t\u0026#39; if isSep \u0026amp;\u0026amp; isWord { wordCount++ previousWord = i } } if previousWord != totalread { wordCount++ } The complete word count example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 package main import ( \u0026#34;bufio\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;log\u0026#34; \u0026#34;os\u0026#34; \u0026#34;testing\u0026#34; ) const ( chunksize = 4096 ) type chunk [chunksize]byte func countWords(name string) (wordCount int) { // open the file for reading f, err := os.Open(name) if err != nil { log.Fatal(err) } defer f.Close() // create a buffered reader reader := bufio.NewReader(f) var part chunk wordCount = 0 for { var totalread int if totalread, err = reader.Read(part[:]); err != nil { break } previousWord := 0 for i := 0; i \u0026lt; totalread-1; i++ { c := part[i] n := part[i+1] isSep := c == \u0026#39; \u0026#39; || c == \u0026#39;\\n\u0026#39; || c == \u0026#39;\\r\u0026#39; || c == \u0026#39;\\t\u0026#39; isWord := n != \u0026#39; \u0026#39; \u0026amp;\u0026amp; n != \u0026#39;\\n\u0026#39; \u0026amp;\u0026amp; n != \u0026#39;\\r\u0026#39; \u0026amp;\u0026amp; n != \u0026#39;\\t\u0026#39; if isSep \u0026amp;\u0026amp; isWord { wordCount++ previousWord = i } } if previousWord != totalread { wordCount++ } } if err != io.EOF { log.Fatal(\u0026#34;error reading \u0026#34;, name, \u0026#34;: \u0026#34;, err) } else { err = nil } return } As an extra we can create a simple execution example to run the designed countWords function\n1 2 3 4 func TestExample(t *testing.T) { count = countWords(\u0026#34;moby.txt\u0026#34;) fmt.Println(count) } Compile the counter As always, to compile we run go build command.\n1 go build -o wc wc.go Run the counter And to execute the binary on selected sample moby.txt file, we run\n1 ./wc moby.txt And returns the result\n1 214364 with the execution time of 0.015 seconds.\n1 2 time ./wc moby.txt ./wc moby.txt 0,01s user 0,01s system 103% cpu 0,015 total Is there any major difference? Without checking the source code of wc utility and just taking a look to syscalls made by both applications this is the information we can extract\nstrace of wc 1 2 3 4 5 6 7 8 9 10 openat(AT_FDCWD, \u0026#34;moby.txt\u0026#34;, O_RDONLY) = 3 fadvise64(3, 0, 0, POSIX_FADV_SEQUENTIAL) = 0 read(3, \u0026#34;**The Project Gutenberg Etext of\u0026#34;..., 16384) = 16384 . . trimmed read(3...) calls . write(1, \u0026#34;214112 moby.txt\\n\u0026#34;, 16214112 moby.txt) = 16 close(3) = 0 exit_group(0) = ? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 % time seconds usecs/call calls errors syscall ------ ----------- ----------- --------- --------- ---------------- 0.00 0.000000 0 78 read 0.00 0.000000 0 1 write 0.00 0.000000 0 7 close 0.00 0.000000 0 5 fstat 0.00 0.000000 0 7 mmap 0.00 0.000000 0 4 mprotect 0.00 0.000000 0 1 munmap 0.00 0.000000 0 3 brk 0.00 0.000000 0 3 3 access 0.00 0.000000 0 1 execve 0.00 0.000000 0 1 arch_prctl 0.00 0.000000 0 1 fadvise64 0.00 0.000000 0 5 openat ------ ----------- ----------- --------- --------- ---------------- 100.00 0.000000 117 3 total strace of our custom wc 1 2 3 4 5 6 7 8 9 openat(AT_FDCWD, \u0026#34;moby.txt\u0026#34;, O_RDONLY|O_CLOEXEC) = 3 read(3, \u0026#34;**The Project Gutenberg Etext of\u0026#34;..., 4096) = 4096 . . trimmed read(3...) calls . close(3) = 0 write(1, \u0026#34;214364\\n\u0026#34;, 7214364) = 7 exit_group(0) = ? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 % time seconds usecs/call calls errors syscall ------ ----------- ----------- --------- --------- ---------------- 89.33 0.000159 2 78 read 6.74 0.000012 12 1 write 3.93 0.000007 4 2 close 0.00 0.000000 0 19 mmap 0.00 0.000000 0 113 rt_sigaction 0.00 0.000000 0 8 rt_sigprocmask 0.00 0.000000 0 3 clone 0.00 0.000000 0 1 execve 0.00 0.000000 0 3 fcntl 0.00 0.000000 0 2 sigaltstack 0.00 0.000000 0 1 arch_prctl 0.00 0.000000 0 1 gettid 0.00 0.000000 0 1 futex 0.00 0.000000 0 1 sched_getaffinity 0.00 0.000000 0 3 2 epoll_ctl 0.00 0.000000 0 2 openat 0.00 0.000000 0 1 readlinkat 0.00 0.000000 0 1 epoll_create1 0.00 0.000000 0 1 pipe2 ------ ----------- ----------- --------- --------- ---------------- 100.00 0.000178 242 2 total Apart from syscalls made by each of the applications, the major difference regarding to our code, is that wc code buffer size is 16384 instead of our selected buffer size of 4096 bytes.\nConclusion We show you how you can efficiently read and process files input data using bufio.NewReader with a very tiny toy example algorithm of a word count. Even if our implemention return a result of 214364 comparing to the result of wc of 214112, meaning there is an error of 252 added words; the goal of this article was to introduce a good file reading techniques and not to focus on result accuracy. Hope you can start using this new approach when processing files data.\nSubscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2021-10-02T00:00:00Z","image":"https://curiousstuff.eu/post/building-a-word-counter-efficiently/glen-carrie-oHoBIbDj7lo-unsplash_hu54c014ddb46bd60981a70c2b32db2ec8_371069_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/building-a-word-counter-efficiently/","title":"Building a word counter efficiently"},{"content":"Should you care about LEDs usage? Have you ever wondered if you should start using LED lights? And you\u0026rsquo;ve never found the time to find out if they\u0026rsquo;re really worth it. Let me show a couple of examples of the consequences of using LED bulbs or lights in your projects, home or even vehicles.\nWhat a LED light really is A light-emitting diode or LED, is a light source consisting of a semiconductor material with two terminals. It is a P-N junction diode, which emits light when activated. If a suitable voltage is applied to the terminals, electrons recombine with holes in the P-N junction region of the device, releasing energy in the form of photons. This effect is called electroluminescence, and the color of the light generated (which depends on the energy of the photons emitted) is determined by the bandgap of the semiconductor. LEDs are usually small (less than 1 mm²) and some optical components are associated with them to configure a radiation pattern.\nSo, we know from this technical description that a LED is just:\na diode with two terminals that creates lights (fotons) when voltage applied. and color depends on wavelength and common use diodes for DIY projects have following schematics\nLED component schematics However, SMD leds have next schematics\nSMD component schematic SMD LEDs are currently the most used type of LED on the market. The large-scale production of manufacturers has reduced its price significantly and the development and continuous innovation in the luminescent part of the semiconductor crystals ensures that, year after year, LEDs offer more luminosity with the same power consumption.\nSMD LEDs are currently the most used type of LED on the market. The large-scale production of large manufacturers has reduced their price significantly. The development and innovation in the luminescent part of the semiconductor crystals offer brighter SMD LEDs year after year, with a lower power consumption. Due to this, SMD LEDs are widely used in domestic and industrial lighting systems, in vehicles, as well as personal electronic devices such as LED screens, televisions, projectors, and so on. SMD LEDs with the RGB system are used for decorative lighting and big full color image screens.\nSize dependant LED classification Depending on their size, LED types are classified with a 4-digit number: the first 2 digits for the length and the next 2 for the LED height in tenths of a millimeter. For example, a 5050 led is 5x5mm. The following table shows the most commonly used SMD LED types.\nSMD LED module Dimensions (mm x mm) Power (watt) Flux (lumen) CRI (Ra) Intensity (candela) Beam angle (degree) Heatsink (yes/no) Efficacy (min) (lm/W) Efficacy (max) (lm/W) Colors per SMD Package 8520 8.5 x 2.0 0.5 \u0026amp; 1 55–60 80 110 120 Monochrome 7020 7.0 x 2.0 0.5 \u0026amp; 1 40–55 75–85 80 110 Monochrome 7014 7.0 x 1.4 0.5 \u0026amp; 1 35–50 70–80 70 100 Monochrome 5736 5.7 x 3.6 0.5 40–55 80 15–18 120 no 80 110 5733 5.7 x 3.3 0.5 35–50 80 15–18 120 no 70 100 5730 5.7 x 3.0 0.5 30–45 75 15–18 120 no 60 90 5630 5.6 x 3.0 0.5 30–45 70 18.4 120 no 60 90 5060 5.0 x 6.0 0.2 26 no 130 Mono OR RGB 5050 5.0 x 5.0 0.2 24 no 120 Mono or RGB 4014 4.0 x 1.4 0.2 22–32 75–85 110 160 3535 3.5 x 3.5 0.5 35–42 75–80 70 84 3528 3.5 x 2.8 0.06–0.08 4–8 60–70 3 120 no 70 100 3030 3.0 x 3.0 0.9 110–120 120 130 3020 3.0 x 2.0 0.06 5.4 2.5 120 no 80 90 3014 3.0 x 1.4 0.1 9–12 75–85 2.1–3.5 120 yes 90 120 2835 2.8 x 3.5 0.2 14–25 75–85 8.4–9.1 120 yes 70 125 1206 1.2 x 0.6 3–6 55–60 1104 1.1 x 0.4 Current dependant LED classification Depending on required current intensity, we classify them in 3 main areas: Low Current Intensity, Intermediate or Common Range and High Current Intensity\nLow Current Intensity Prepared for a current of 2mA with about 2V (consumption of about 4 mW).\nIntermediate or Common Range $20mA$ LEDs (between $40mW$ and $90mW$) around:\n1.9 -2.1 V for red, orange yellow and traditional green. 3.0-3.4 V for pure green and blue. 2.9-4.2 V for violet, pink, purple and white. High Current Intensity For $20mA$ current and with 2 or 4-5 V, designed for viewing in direct sunlight. The 5 V and 12 V LEDs are normal miniature LEDs incorporating a series resistor for direct connection to a 5 or 12 V power supply.\nSome real life examples Let\u0026rsquo;s assume we have no idea which type of bulb is better, but we have the knowledge and tools to measure and take smart decisions. In following example, I show you how you can measure discover the operating current of a LED bulb and compare against others. Finally I will also make an estimation of a yearly cost of each of the options: LED light and halogen lamp.\nFor this example, I choose following two bulbs from Philips.\nYou can find them at Amazon Some reference images of the products\nAmazon Price of a Halogen Light Amazon Price of a LED Light Component Operating Voltage Bulb type Price on Amazon LED LIGHT 12V W5W 6 € HALOGEN 12V W5W 15 € There is no mathematical way to calculate the current consumtion, rather than measuring. To take measurements of the current drawn by each of the components we can easily connect an amperemeter or connect the device to be measured to a power supply that already contains one. For example, Im using following power supply\nMeasuring the current In order to figure out how good the halogen bulb is, from comsumption point of view, we need to measure:\nCurrent over time Expected lifetime provided by manufacturer data Measuring the current of each the halogen bulb $P = I \\cdot V$\nwhere $V = 12$ and $I$ is the value we need to find out. So measuring the $I$ value we find that\n$I = 0.35 \\: A$\n$P = 0.35 \\cdot 12V = 4.2 \\: W$\nMeasuring the current of each the led light $P = I \\cdot V$\nwhere $V = 12$ and $I$ is the value we need to find out. So measuring the $I$ value we find that\n$I = 0.04 \\: A$\n$P = 0.04 \\cdot 12V = 0.48 \\: W$\nComparing each of the results Finally, we can compare both results, as shown below\nComponent Current (A) Power (W) Temperature Price per year LED LIGHT 0.04 0.48 W 80 ºC 6 € HALOGEN 0.35 4.2 W 20º C 15 € The performance gain between both of them ($0.04A$ vs $0.35A$) is calculated then as $-88.57%$, meaning that LED techology helps you saving up to $88.57%$.\nWith an estimated energy cost of $0.3427 €/kWh$ and some math, we estime the yearly cost as:\n$$12 \\cdot 30 \\cdot 24 = 8640 \\: h/{year}$$ $$ P = I \\cdot V = 0.04 \\cdot 12 = 0.48 \\: W/h$$\nMaking a somehow unrealistic usage estimation of consumption during a year as\n$$W = 8640h/{year} \\cdot 0.48 W/h = 4147.2 \\: W/{year}$$\nFinally, converting $W$ to ${Eur}$ we get\n$$ {Cost} = 4147.2W/{year} \\cdot 0.3427 €/{kWh} \\cdot 1{kWh}/1000Wh $$\n$$ {Cost} = 1,42124544 \\: €/{year} $$\nAccording to captured data, each hour you use a LED light with analyzed features it cost you around $0,000164496 \\: €/h$\nConclusion It is clearly proven that LED usage is better for both our projects, bulb lifetime and our budget, they tend to have better performance and help ous to save money. So, now you know it, use LED light at home, in your car, bike, cat\u0026hellip;everywhere!\nSubscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2021-09-24T00:00:00Z","image":"https://curiousstuff.eu/post/should-you-care-about-leds-usage-consequences-of-using-them/tony-reid-PGdMhonLLZk-unsplash_hu3d3224bdd9ede964b0ab6cfc1e6df00f_76642_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/should-you-care-about-leds-usage-consequences-of-using-them/","title":"Should you care about LEDs usage? Consequences of using them"},{"content":"Introducing markov chains in Python So far, we read about how a Markov Chain works, the concept of transition matrix and how we can calculate a future state probability. However, we need to be able to create our own Markov Chains from our input data. This post will show you, how you can create your own markov chain using Python 3+\nWorking with Markov Chains, our first approach So, what markov chain implementation should I use to build my own chain?. To be honest, I have no idea of most used frameworks, so lets find them in Github: https://github.com/search?q=markov+chain\nmost relevant opensource projects related to markov chains As you can see there is a good candidate for Python called markovify. Lets try to use it and see how it works by running the provided example with a custom corpus\nDownloading a NLP corpus for training After a rapid search on Internet looking for some Spanish free text training data, I found a small corpus at https://www.corpusdata.org/spanish.asp\nInstead of downloading full corpus, I just downloaded a sample $1/100$ for testing purposes. The sample itself contains 2 Million words according to corpusdata.org. If you want to use this same corpus text, you can download it from https://www.corpusdata.org/span/samples/text.zip\nCreating a virtualenv for our Python project As a recommended way of development, we first create a virtualenv for Python and set it as active.\n1 2 python3 -m venv venv source venv/bin/activate In this case, the created virtualenv is called venv.\nInstalling Markovify To install markovify we just need to create a virtualenv and install it as a project dependency with pip.\n1 pip install markovify 1 2 3 4 5 6 7 8 9 10 11 Collecting markovify Using cached https://files.pythonhosted.org/packages/80/d2/e773267ac227a500d17224dc60c4a3b8e7015f843c467ebab925a5aa15c3/markovify-0.9.3.tar.gz Collecting unidecode (from markovify) Using cached https://files.pythonhosted.org/packages/9e/25/723487ca2a52ebcee88a34d7d1f5a4b80b793f179ee0f62d5371938dfa01/Unidecode-1.2.0-py2.py3-none-any.whl Building wheels for collected packages: markovify . . . Installing collected packages: unidecode, markovify Running setup.py install for markovify ... done Successfully installed markovify-0.9.3 unidecode-1.2.0 A successful install must show you the message Successfully installed markovify-0.9.3 unidecode-1.2.0.\nBuilding our markov chain with Markovify To build our markov chain, we need to write some code (obviously). In following script, I am telling that:\nI want to create a markov chain I want to use as input data the content of the file called corpus.txt I want to create an order 2 markov chain I want to measure the allocated memory while running I want to create a random sentence 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import markovify import tracemalloc import os trace_enabled = False if trace_enabled: # starting the monitoring tracemalloc.start() # Get raw text as string. with open(\u0026#34;markov-test/data/corpus.txt\u0026#34;) as f: text = f.read() # Build the model. text_model = markovify.Text(text, retain_original=True, state_size=2) text_model = text_model.compile() # Print a randomly-generated sentence print(text_model.make_sentence()) if trace_enabled: # displaying the memory print(tracemalloc.get_traced_memory()) # stopping the library tracemalloc.stop() After building our script, its time to get some measurements and see if the markov chain works as expected or not. To do so, we will run our script example.py\n1 python3 example.py The output of running example.py is\n1 Mejoras continuas 360 - El grado en que acá no pasa nada ; que quieren cobrar medio dignamente el largo y cerdoso mucho más grave cuando esas tierras permanecen indebidamente cultivadas . Y ciertamente a veces 5 en las acciones emprendidas para lograr una meta a . Relato b. So far, it seems it works and generates some meaninful arbitrary length texts.\nMeasuring execution time of markovify Now that we check, that markovify generates some output from input data, lets see how long does it take to generate the markov chain and compute an output.\nTo do so, we use time command of Unix system, and we run our test program several times. (remember the more times the more significant data you get)\n1 2 3 4 5 python3 example.py 4,57s user 0,06s system 99% cpu 4,645 total python3 example.py 4,59s user 0,06s system 99% cpu 4,644 total python3 example.py 4,52s user 0,06s system 99% cpu 4,583 total python3 example.py 4,56s user 0,07s system 99% cpu 4,639 total python3 example.py 4,64s user 0,02s system 99% cpu 4,664 total So, measuring markovify we discover that markov chain building time (data reading + generation + predicting) is about $4,55$ seconds in average for our example corpus text, taking into account that example corpus text has $2344418$ words according to wc and weights 12Mb\nMarkovify CPU usage During execution, we also take a look to CPU usage and we realize that only a single core was used while computing. However, this single core was set at $100\\%$ during execution, overloading the core instead of distributing the work among all available cores.\nCPU usage of markovify markovify conclusions After testing markovify as the most starred library on Github for building markov chains, here are my own conclusions about it\nAdvantages Disadvantages Easy to download and install Configurable state size (chain order) results can be exported as JSON easy to create random sentences does not return next probable state does not return transition probability information cannot get most probable state performance bottleneck to a single core processing no multithread support no recommended for high performance demanding applications Conclusions At the end, we learn how to build our own markov chain for our tiny toy projects. However, as seen by our simple analysis this is not enough for high performance demanding applications or high data use environments.\nIn the Part 3 of this series, I will design a Markov Chain implementation in Go to fulfill the disadvantages found in this example project and see if there is some room for improvements. Stay tuned!\nContinue reading You can continue reading more post about markov chains:\nPart 1: Introduction to markov chain Part 2: How to build a markov chain with Python References https://github.com/jsvine/markovify Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2021-09-02T00:00:00Z","image":"https://curiousstuff.eu/post/how-to-build-a-markov-chain-in-python/karine-avetisyan-ipuiM-36tAg-unsplash_hu34373ce7ca152804e39427c9760368a0_85263_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/how-to-build-a-markov-chain-in-python/","title":"How to build a markov chain in Python"},{"content":"What is a markov chain A Markov chain is a stochastic model describing a sequence of possible events in which the probability of each event depends only on the state attained in the previous event. A countably infinite sequence, in which the chain moves state at discrete time steps, gives a discrete-time Markov chain (DTMC). It is named after the Russian mathematician Andrei Markov (1856-1922), who introduced it in 1906.\nThese statistical models have a large number of real applications.\nWhere are Markov chain used? Markov chains have experienced an important real-world application in the field of business and finance. This, by allowing, as has been pointed out, to analyze and estimate future behavior patterns of individuals based on experience and previous results.\nThis can be reflected in different fields such as delinquency, the study of consumer behavior, seasonal demand for labor, among others.\nThe system elaborated by Markov is quite simple and has, as we have said, a fairly easy practical application. However, many critical voices point out that such a simplified model cannot be fully effective in complex processes.\nMarkov chain by example Imagine that there were two possible states for weather: sunny or cloudy. You can always directly observe the current weather state, and it is guaranteed to always be one of the two aforementioned states.\nNow, you decide you want to be able to predict what the weather will be like tomorrow. Intuitively, you assume that there is an inherent transition in this process, in that the current weather has some bearing on what the next day’s weather will be. So, being the dedicated person that you are, you collect weather data over several years, and calculate that the chance of a sunny day occurring after a cloudy day is 0.25. You also note that, by extension, the chance of a cloudy day occurring after a cloudy day must be 0.75, since there are only two possible states.\nYou can now use this distribution to predict weather for days to come, based on what the current weather state is at the time.\nA visualization of the weather example Markov Chain. Other Markov Chain use cases Meteorology If we consider the weather in a region over different days, it is possible to assume that the current state depends only on the last state and not on the whole history itself, so that Markov chains can be used to formulate basic climatological models. For example, rainfall recurrence models based on Markov chains have been developed.\nEpidemiological models An important application of Markov chains is in the Galton-Watson process. This is a branching process that can be used, among other things, to model the development of an epidemic (see mathematical modeling of epidemics)\nInternet The pagerank of a web page (used by Google in its search engines) is defined through a Markov chain, where the position that a page will have in the search engine will be determined by its weight in the stationary distribution of the chain.\nSimulation Markov chains are used to provide an analytical solution to certain simulation problems, for example in queueing theory the M/M/1 Model is in fact a Markov chain model.\nGames of chance Many games of chance can be modeled by means of a Markov chain. The Gambler\u0026rsquo;s ruin model, which establishes the probability that a person who bets on a game of chance will eventually end up out of money, is one of the applications of Markov chains in this area.\nEconomics and finance Markov chains can be used in simple option valuation models to determine when there is an arbitrage opportunity, as well as in modeling stock market crashes or determining price volatility. In business, Markov chains have been used to analyze the buying patterns of delinquent debtors, to plan staffing needs, and to analyze equipment replacement.\nGenetics Markov chains are used in population genetics theory to describe the change in gene frequencies in a small population with discrete generations subject to genetic drift. It has been used in the construction of Motō Kimura\u0026rsquo;s diffusion model.\nMusic Several music composition algorithms use Markov chains, for example Csound or Max software. One of the composers who used this technique in his compositions was Iannis Xenakis with his work Analoguique A et B (1958-59).\nOperations Markov chains are used in inventory, maintenance and process flow.\nNeural networks They are used in Boltzmann machines.\nModelling a Markov chain Markov chains may be modeled by finite state machines, and random walks provide a prolific example of their usefulness in mathematics. They arise broadly in statistical and information-theoretical contexts and are widely employed in economics, game theory, queueing (communication) theory, genetics, and finance.\nFormally, a Markov chain is a probabilistic automaton. The probability distribution of state transitions is typically represented as the Markov chain’s transition matrix. If the Markov chain has $N$ possible states, the matrix will be an $N x N$ matrix, such that entry $(i, j)$ is the probability of transitioning from state $i$ to state $j$. Additionally, the transition matrix must be a stochastic matrix, a matrix whose entries in each row must add up to exactly $1$. This makes complete sense, since each row represents its own probability distribution.\nGeneral view of a sample Markov chain, with states as circles, and transitions as edges. Previous chain visual representation, can also be described as following matrix\n$$ P = \\begin{bmatrix} 0.9 \u0026amp; 0.075 \u0026amp; 0.025 \\newline 0.15 \u0026amp; 0.8 \u0026amp; 0.05 \\newline 0.25 \u0026amp; 0.25 \u0026amp; 0.5 \\end{bmatrix} $$\nWe now know how to obtain the chance of transitioning from one state to another, but how about finding the chance of that transition occurring over multiple steps? To formalize this, we now want to determine the probability of moving from state $i$ to state $j$ over $m$ steps. As it turns out, this is actually very simple to find out. Given a transition matrix $P$ this can be determined by calculating the value of entry $(i, j)$ of the matrix obtained by raising $P$ to the power of $M$. For small values of $M$, this can easily be done by hand with repeated multiplication. However, for large values of $M$, if you are familiar with simple Linear Algebra, a more efficient way to raise a matrix to a power is to first diagonalize the matrix.\nContinue reading You can continue reading more post about markov chains:\nPart 1: Introduction to markov chain Part 2: How to build a markov chain with Python Part 3: How to build a markov chain with Go References https://setosa.io/ev/markov-chains/ https://brilliant.org/wiki/markov-chains/ https://www.comp.nus.edu.sg/~cs3260/MM1.pdf http://www.columbia.edu/~ks20/FE-Notes/4700-07-Notes-GR.pdf Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2021-08-25T00:00:00Z","image":"https://curiousstuff.eu/post/introduction-to-markov-chains/karine-avetisyan-ipuiM-36tAg-unsplash_hu34373ce7ca152804e39427c9760368a0_85263_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/introduction-to-markov-chains/","title":"Introduction to Markov chains"},{"content":"Blazinly fast PRNG 64 bit are here Sometimes, we require to have an identifier in order to store things, track behaviours etc. In this scenario, I was required to rapidly generate ID strings in order to be used as Request ID for an HTTP service. Those IDs would be included in HTTP service response X-Request-ID header and tracked in Opentracing. I did some initial implementation and saw a performance degradation that I did not like it. That\u0026rsquo;s the main reason to dig deeper in Go PRNG generator, to see how it works, and make some tweaks.\nWarning\nThe IDs created by this algorithm are not pure random nor based on a secure entropy origin. Do not use them for any crypto related stuff. If you want secure random IDs or low collision probability IDs, see crypto/rand package at https://pkg.go.dev/crypto/rand#Read Creating IDs: the common way I say it\u0026rsquo;s the common way because is the method used by many developers, as show in StackOverflow questions and other Internet resources:\nhttps://stackoverflow.com/questions/39925784/how-to-generate-unique-random-number-in-go-using-standard-library https://gobyexample.com/random-numbers https://flaviocopes.com/go-random/ https://www.calhoun.io/creating-random-strings-in-go/ https://golang.cafe/blog/golang-random-number-generator.html https://www.educba.com/golang-random-number/ So, Let\u0026rsquo;s follow this idea and assume we have a function gen() that creates a hexadecimal encoded UUID of $8$ bytes. The function can be described as follows:\n1 2 3 4 5 6 7 8 // gen creates a hex encoded string of 16 chars func gen() string { dst := make([]byte, 8) for i := 0; i \u0026lt; 8; i++ { dst[i] = byte(rand.Intn(256)) } return hex.EncodeToString(dst[:]) } And that\u0026rsquo;s all, the easiest way to create a random ID in Go, that creates outputs like\n1 336159b54b9e2839 Run it many times, and you will get different results each time.\ngen() function description There are several things gen() functions does under the hood:\nAt the beginning, gen() allocates a new byte slice to hold 8 bytes. Next, it fills the byte slice positions with pseudorandom values calling the function rand.Intn in where returned values will be in range $[0, 255]$, the range of the byte data type. Finally, it encodes the []byte slice result as hexadecimal and converts it to string gen() function known allocations As we know from other optimization post series such us Lightning fast stock market data parsing, we know that\n[]byte slice conversion to string requires allocating memory. gen() function known optimization points As we know from other optimization post series, we know that\nEncodeToString method of package hex makes an additional loop over input data. In this specific case, this extra loop could be avoided processing all in same initial loop for i:=0; i\u0026lt;8;i++. However, this time, we need to focus on rand.Intn implementation to see how it works, and if we have room for improvements.\nAfter, analyzing internal code of rand.Intn the conclusions are:\nIt has an internal data access lock to support concurrent code. We can remove this lock, and delegate this responsability on callers. This change will create an speedup on prng generation code. rand.Intn calculates the maximum size of the random number range, and applies different logic if number max value is $2^n$ or not. Since our max range is $256$, we fullfil the condition of $256 \\equiv 2^n \\equiv 2^8$ Finally, there are other minor tweaks we can do, on original function, such as:\nuse custom data type to tell Go compiler the expected size of slices instead of using []byte expand loops Optimization steps 1. Replace []byte with a custom data type In order to avoid data allocations as much as possible it is highly recommended to use custom Go data types when possible. In this scenario we need to replace our original byte slice with a custom data type. For this reason, we create a custom struct called RandUUID\n1 type RandUUID [16]byte As you can see, this struct doubles our initial size of $8$ bytes. The reason for this, is that its ready for holding the result already encoded as hexacimal, and hex format requires $2n$ bytes, being our original size $n=8$ bytes.\n2. Generate a non-negative pseudo random number In our original example, in where we call dst[i] = byte(rand.Intn(256)) we are generating on each loop round, a pseudo random number. However, internally, the pseudo random number generator, will generate a int64 number for each round.\nLuckily for us, with a single int64 number we can fill our original []byte slice of size $8$ and we can avoid the additional calls to rand.Intn, so instead of making $8$ calls, we make just $1$. We make this single call using the modified function Int63() defined below.\n1 2 3 4 // Int63 returns a non-negative pseudo-random 63-bit integer as an int64. func (rng *rngSource) Int63() int64 { return int64(rng.Uint64() \u0026amp; rngMask) } Original implementation of rgnSource can be found online at https://golang.org/src/math/rand/rng.go and https://github.com/golang/go/blob/master/src/math/rand/rng.go\nThe trick here, is that we need to process the returned int64 number to fill the []byte slice correctly.\n3. Processing the 63-bit integer as an int64 In order to process the generated int64 by function Int63(), we need to make some byte level processing. In this case, we do some right shifting for each othe bytes we need to get. Since our []byte slice is of $n = 8$, we need to make $8$ shifting as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 var uid RandUUID // generate a single int64 pseudo random number u := rng.Int63() // just in case, tell go compiler max byte size // to avoid continuous bound checking _ = uid[15] // process the original int64, shifting bytes uid[0] = byte(u) uid[2] = byte(u \u0026gt;\u0026gt; 8) uid[4] = byte(u \u0026gt;\u0026gt; 16) uid[6] = byte(u \u0026gt;\u0026gt; 24) uid[8] = byte(u \u0026gt;\u0026gt; 32) uid[10] = byte(u \u0026gt;\u0026gt; 40) uid[12] = byte(u \u0026gt;\u0026gt; 48) uid[14] = byte(u \u0026gt;\u0026gt; 56) At this point, our result RandUUID contains the $8$ bytes filled in their expected positions.\nDid you notice we did not fill the slice in sequentical positions?\nThis is because, we are using the same slice to hold final result encoded as hexadecimal format.\n4. Convert our result to hexadecimal format Our hexadecimal conversion of the []byte slice to string will be based on hex/encoding Go package function EncodeToString which is described at https://pkg.go.dev/encoding/hex#EncodeToString. The function indeed, has the following signature\n1 func EncodeToString(src []byte) string It receives a []byte slices, do some computation and converts the result to string\nHowever, we need to tweak the function to:\nDo not allocate a new []byte slice for the result Avoid data conversion betweeen []byte to string Taking a brief look to EncodeToString we discover the simple logic used to convert an arbitrary byte slice to hex format.\n1 2 3 4 5 6 7 8 9 func Encode(dst, src []byte) int { j := 0 for _, v := range src { dst[j] = hextable[v\u0026gt;\u0026gt;4] dst[j+1] = hextable[v\u0026amp;0x0f] j += 2 } return len(src) * 2 } So the final tweak we need to do, is to expand the loop. We can do this, because we have a fixed size input slice, that will be always constant with a value of $n=8$\n4.1 Expanding the loop To expand the loop, we just need to execute manually the $8$ iterations as follows in order to convert the data to hex format.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 // expanded for loop var v byte _ = uid[15] v = uid[0] uid[0] = hextable[v\u0026gt;\u0026gt;4] uid[1] = hextable[v\u0026amp;0x0f] v = uid[2] uid[2] = hextable[v\u0026gt;\u0026gt;4] uid[3] = hextable[v\u0026amp;0x0f] v = uid[4] uid[4] = hextable[v\u0026gt;\u0026gt;4] uid[5] = hextable[v\u0026amp;0x0f] v = uid[6] uid[6] = hextable[v\u0026gt;\u0026gt;4] uid[7] = hextable[v\u0026amp;0x0f] v = uid[8] uid[8] = hextable[v\u0026gt;\u0026gt;4] uid[9] = hextable[v\u0026amp;0x0f] v = uid[10] uid[10] = hextable[v\u0026gt;\u0026gt;4] uid[11] = hextable[v\u0026amp;0x0f] v = uid[12] uid[12] = hextable[v\u0026gt;\u0026gt;4] uid[13] = hextable[v\u0026amp;0x0f] v = uid[14] uid[14] = hextable[v\u0026gt;\u0026gt;4] uid[15] = hextable[v\u0026amp;0x0f] Measuring performance After all our efforts of having a fast prng, we need to measure in order to be sure of our results. To do so, we use Go built in benchmarking tool as follows:\nCompute a benchmark on our base gen() function and save it as old.txt Apply all our changes to gen() function Compute a benchmark on our modified gen() function and save it as new.txt Check results between both algorithms using benchstat 1. Compute a benchmark on our base gen() function and save it as old.txt\n1 go test -v -run=^$ -bench=^BenchmarkGen/\\$ -benchtime=2s -count=10 \u0026gt; old.txt 1 2 3 4 5 6 7 8 9 10 BenchmarkGen-0 4127385 596.6 ns/op 1.68 MB/s 32 B/op 2 allocs/op BenchmarkGen-0 3917702 621.9 ns/op 1.61 MB/s 32 B/op 2 allocs/op BenchmarkGen-0 4035345 583.7 ns/op 1.71 MB/s 32 B/op 2 allocs/op BenchmarkGen-0 4172944 588.9 ns/op 1.70 MB/s 32 B/op 2 allocs/op BenchmarkGen-0 4136286 586.1 ns/op 1.71 MB/s 32 B/op 2 allocs/op BenchmarkGen-0 3956214 597.3 ns/op 1.67 MB/s 32 B/op 2 allocs/op BenchmarkGen-0 4073704 589.3 ns/op 1.70 MB/s 32 B/op 2 allocs/op BenchmarkGen-0 3812052 603.9 ns/op 1.66 MB/s 32 B/op 2 allocs/op BenchmarkGen-0 4140816 599.4 ns/op 1.67 MB/s 32 B/op 2 allocs/op BenchmarkGen-0 3886472 594.8 ns/op 1.68 MB/s 32 B/op 2 allocs/op 2. Apply all our changes to gen() function\nApply our changes to the code.\n3. Compute a benchmark on our modified gen() function and save it as new.txt\n1 go test -v -run=^$ -bench=^BenchmarkGen/\\$ -benchtime=2s -count=10 \u0026gt; new.txt 1 2 3 4 5 6 7 8 9 10 BenchmarkGen-0 41574139 56.28 ns/op 17.77 MB/s 0 B/op 0 allocs/op BenchmarkGen-0 43105999 55.83 ns/op 17.91 MB/s 0 B/op 0 allocs/op BenchmarkGen-0 42470292 55.33 ns/op 18.07 MB/s 0 B/op 0 allocs/op BenchmarkGen-0 44294082 55.39 ns/op 18.05 MB/s 0 B/op 0 allocs/op BenchmarkGen-0 43065757 55.16 ns/op 18.13 MB/s 0 B/op 0 allocs/op BenchmarkGen-0 43489963 54.92 ns/op 18.21 MB/s 0 B/op 0 allocs/op BenchmarkGen-0 40353843 55.29 ns/op 18.09 MB/s 0 B/op 0 allocs/op BenchmarkGen-0 44173886 55.38 ns/op 18.06 MB/s 0 B/op 0 allocs/op BenchmarkGen-0 44519041 54.78 ns/op 18.26 MB/s 0 B/op 0 allocs/op BenchmarkGen-0 43383703 55.69 ns/op 17.96 MB/s 0 B/op 0 allocs/op 4. Check results between both algorithms using benchstat\nIn order to find if we have some performance gain or decrease, we compute the difference using benchstat tool comparing our both old.txt and new.txt files.\n1 2 3 4 5 6 7 8 9 10 11 12 13 benstat old.txt new.txt name old time/op new time/op delta Gen-0 593ns ± 2% 55ns ± 2% -90.66% (p=0.000 n=9+10) name old speed new speed delta Gen-0 1.69MB/s ± 2% 18.05MB/s ± 2% +970.22% (p=0.000 n=9+10) name old alloc/op new alloc/op delta Gen-0 32.0B ± 0% 0.0B -100.00% (p=0.000 n=10+10) name old allocs/op new allocs/op delta Gen-0 2.00 ± 0% 0.00 -100.00% (p=0.000 n=10+10) Putting results of time/op in a graph, we get a clear view of the performance improvements of that +90%\nchart Final results I show you how you can optimize programs and algorithms using a real example. As a gift, I assembled a library you can use as additional tool to create IDs, and published the library as opensource at Github. It\u0026rsquo;s up to you if it fits in your needs or not.\nExample Go script\n1 2 3 4 5 6 7 8 9 10 11 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/zerjioang/prng\u0026#34; ) func main(){ uuid := prng.New() fmt.Println(uuid) } Creates the output\n1 dca90c93b8848229 being +90% CPU and +970.22% memory faster with zero allocations.\nGet the code at Github You can download the code of the prng at Github visiting https://github.com/zerjioang/prng or you can import it in your Go project as module/library as\n1 2 3 import ( \u0026#34;github.com/zerjioang/prng\u0026#34; ) References https://yourbasic.org/golang/bitwise-operator-cheat-sheet/ Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2021-08-19T00:00:00Z","image":"https://curiousstuff.eu/post/a-pure-go-blazinly-fast-prng-64-bit-id-generator/mika-baumeister-Wpnoqo2plFA-unsplash_hu3419a6d92552f19cbfe4ee06b5c4800f_391784_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/a-pure-go-blazinly-fast-prng-64-bit-id-generator/","title":"A pure Go Blazinly fast PRNG 64 bit ID generator"},{"content":"Go 1.17 is released The 16 of August 2021, the Go Team releases the version 1.17 of Go\nThis release brings additional improvements to the compiler, namely a new way of passing function arguments and results. This change has shown about a 5% performance improvement in Go programs and reduction in binary sizes of around 2% for amd64 platforms. Support for more platforms will come in future releases.\nGo 1.17 also adds support for the 64-bit ARM architecture on Windows, letting gophers run Go natively on more devices.\nWhat are the changes of this version? Most of its changes are in the implementation of the toolchain, runtime, and libraries\nChanges to the language Go 1.17 includes three small enhancements to the language.\nConversions from slice to array pointer: An expression s of type [] may now be converted to array pointer type *[N]T. If a is the result of such a conversion, then corresponding indices that are in range refer to the same underlying elements: \u0026amp;a[i] == \u0026amp;s[i] for $0 \u0026lt;= i \u0026lt; N$. The conversion panics if len(s) is less than $N$. unsafe.Add: unsafe.Add(ptr, len) adds len to ptr and returns the updated pointer unsafe.Pointer(uintptr(ptr) + uintptr(len)). unsafe.Slice: For expression ptr of type *T, unsafe.Slice(ptr, len) returns a slice of type []T whose underlying array starts at ptr and whose length and capacity are len. Other minor changes It will require macOS 10.13 High Sierra or later 64-bit ARM architecture on Windows is now supported, including CGO support. The 64-bit MIPS architecture on OpenBSD (the openbsd/mips64 port) now supports cgo. Go programs now maintain stack frame pointers on the 64-bit ARM architecture on all operating systems loong64 GOARCH value reserved for future implementations. Pruned module graphs in go 1.17 modules 1 go mod tidy -go=1.17 1 go mod tidy -compat=1.17 Module deprecation comments. Module authors may deprecate a module by adding a // Deprecated:comment to go.mod The go command by default now suppresses SSH password prompts and Git Credential Manager prompts when fetching Git repositories using SSH, as it already did previously for other Git password prompts. The go command now understands //go:build lines and prefers them over // +build lines. The new syntax uses boolean expressions, just like Go, and should be less error-prone. gofmt (and go fmt) now synchronizes //go:build lines with // +build lines. If a file only has // +build lines, they will be moved to the appropriate location in the file, and matching //go:build lines will be added. Go vet has a new warning for calling signal.Notify on unbuffered channels. 1 2 3 4 c := make(chan os.Signal) // signals are sent on c before the channel is read from. // This signal may be dropped as c is unbuffered. signal.Notify(c, os.Interrupt) Users of signal.Notify should use channels with sufficient buffer space to keep up with the expected signal rate.\nNew warnings for Is, As and Unwrap methods The cover tool now uses an optimized parser from golang.org/x/tools/cover, which may be noticeably faster when parsing large coverage profiles. The runtime/cgo package now provides a new facility that allows to turn any Go values to a safe representation that can be used to pass values between C and Go safely. See runtime/cgo.Handle for detailed information. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package main /* #include \u0026lt;stdint.h\u0026gt; // for uintptr_t extern void MyGoPrint(uintptr_t handle); void myprint(uintptr_t handle); */ import \u0026#34;C\u0026#34; import \u0026#34;runtime/cgo\u0026#34; //export MyGoPrint func MyGoPrint(handle C.uintptr_t) { h := cgo.Handle(handle) val := h.Value().(string) println(val) h.Delete() } func main() { val := \u0026#34;hello Go\u0026#34; C.myprint(C.uintptr_t(cgo.NewHandle(val))) // Output: hello Go } and on the C side:\n1 2 3 4 5 6 7 8 9 #include \u0026lt;stdint.h\u0026gt; // for uintptr_t // A Go function extern void MyGoPrint(uintptr_t handle); // A C function void myprint(uintptr_t handle) { MyGoPrint(handle); } The crypto/ed25519 package has been rewritten, and all operations are now approximately twice as fast on amd64 and arm64. The observable behavior has not otherwise changed. CurveParams methods now automatically invoke faster and safer dedicated implementations for known curves (P-224, P-256, and P-521) when available. Note that this is a best-effort approach and applications should avoid using the generic, not constant-time CurveParams methods and instead use dedicated Curve implementations such as P256. The P521 curve implementation has been rewritten using code generated by the fiat-crypto project, which is based on a formally-verified model of the arithmetic operations. It is now constant-time and three times faster on amd64 and arm64. The observable behavior has not otherwise changed. The crypto/rand package now uses the getentropy syscall on macOS and the getrandom syscall on Solaris, Illumos, and DragonFlyBSD. binary.Uvarint will stop reading after 10 bytes to avoid wasted computations. If more than 10 bytes are needed, the byte count returned is -11. The math package now defines three more constants: MaxUint, MaxInt and MinInt. For 32-bit systems their values are $2^{32} - 1$, $2^{31} - 1$ and $-2^{31}$, respectively. For 64-bit systems their values are $2^{64} - 1$, $2^{63} - 1$ and $-2^{63}$, respectively. Regarding to pprof, block profiles are no longer biased to favor infrequent long events over frequent short events. The strconv package now uses Ulf Adams\u0026rsquo;s Ryū algorithm for formatting floating-point numbers. This algorithm improves performance on most inputs and is more than 99% faster on worst-case inputs. atomic.Value now has Swap and CompareAndSwap methods that provide additional atomic operations. You can check all changelog information at https://golang.org/doc/go1.17#language\nSubscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2021-08-17T00:00:00Z","image":"https://curiousstuff.eu/post/go-released-1.17/golang_hu25502f0987d3d2acd156755e37b68d74_37727_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/go-released-1.17/","title":"Go released 1.17"},{"content":"Requirements Install Arduino IDE. Visit their site for instructions. Add permission to use the serial connection and operate with it. Make sure your board is recognized properly. Add permission for serial operations In case your current user is not added to dialout group, you have to add it.\n1 2 sudo adduser $USER dialout sudo usermod -a -G dialout $USER Check if ESP32 board is connected to your computer The fastest way to check whether the board is connected to the computer or not is using lsusb command\n1 Bus 002 Device 003: ID 10c4:ea60 Cygnal Integrated Products, Inc. CP210x UART Bridge / myAVR mySmartUSB light You should see a line similar to previous one. If you dont, check your cable and board.\nFinish Arduino IDE installation After you download Arduino IDE files, you are required to execute install.sh script to complete installation, add shortcut, menu items, etc.\n1 ./install.sh If you run install.sh without root permissions, you will see following error message\n1 2 3 4 5 6 Adding desktop shortcut, menu item and file associations for Arduino IDE... ln: failed to create symbolic link \u0026#39;/usr/local/bin/arduino\u0026#39;: Permission denied Adding symlink failed. Hope that\u0026#39;s OK. If not then rerun as root with sudo. done! So, you need to execute install.sh script with sudo\n1 2 sudo ./install.sh [sudo] password for sergio: After that, the success results will be\n1 2 3 4 Adding desktop shortcut, menu item and file associations for Arduino IDE... done! Add support for EspressIf ESP 32 boards To add support to our brand new ESP32 board, we need to download official core files provided by the manufacturer from https://github.com/espressif/arduino-esp32\n1 2 mkdir espressif git clone https://github.com/espressif/arduino-esp32.git esp32 Wait for ESPRESSIF ESP32 framework to be downloaded\n1 2 3 4 5 6 7 8 Cloning into \u0026#39;esp32\u0026#39;... remote: Enumerating objects: 24105, done. remote: Counting objects: 100% (808/808), done. remote: Compressing objects: 100% (577/577), done. remote: Total 24105 (delta 321), reused 451 (delta 186), pack-reused 23297 Receiving objects: 100% (24105/24105), 610.81 MiB | 19.19 MiB/s, done. Resolving deltas: 100% (14919/14919), done. Checking out files: 100% (6178/6178), done. Now, go to esp32/tools folder to execute script to download required tools. I do have installed Python 3.6 so I call the script using this version.\n1 2 cd esp32/tools python3.6 get.py After executing the script, I get the success output.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 System: Linux, Bits: 64, Info: Linux-5.4.0-73-generic-x86_64-with-Ubuntu-18.04-bionic Platform: x86_64-pc-linux-gnu Downloading xtensa-esp32-elf-gcc8_4_0-esp-2020r3-linux-amd64.tar.gz ... Done Extracting xtensa-esp32-elf-gcc8_4_0-esp-2020r3-linux-amd64.tar.gz ... Downloading xtensa-esp32s2-elf-gcc8_4_0-esp-2020r3-linux-amd64.tar.gz ... Done Extracting xtensa-esp32s2-elf-gcc8_4_0-esp-2020r3-linux-amd64.tar.gz ... Downloading riscv32-esp-elf-gcc8_4_0-crosstool-ng-1.24.0-123-g64eb9ff-linux-amd64.tar.gz ... Done Extracting riscv32-esp-elf-gcc8_4_0-crosstool-ng-1.24.0-123-g64eb9ff-linux-amd64.tar.gz ... Downloading esptool-3.0.0.3-linux.tar.gz ... Done Extracting esptool-3.0.0.3-linux.tar.gz ... Downloading x86_64-linux-gnu.mklittlefs-c41e51a.200706.tar.gz ... Done Extracting x86_64-linux-gnu.mklittlefs-c41e51a.200706.tar.gz ... Downloading mkspiffs-0.2.3-arduino-esp32-linux64.tar.gz ... Done Extracting mkspiffs-0.2.3-arduino-esp32-linux64.tar.gz ... Renaming mkspiffs-0.2.3-arduino-esp32-linux64 to mkspiffs ... Platform Tools Installed After this, is time to restart the arduino IDE and check for right installation and support for ESP32 boards.\nArduino IDE with ESP32 board support Pyserial not installed error 1 2 3 4 5 6 7 Pyserial is not installed for /usr/bin/python. Check the README for installation instructions.Traceback (most recent call last): File \u0026#34;/home/sergio/Downloads/arduino-1.8.15/hardware/espressif/esp32/tools/esptool/esptool.py\u0026#34;, line 38, in \u0026lt;module\u0026gt; import serial ImportError: No module named serial exit status 1 Error compiling for board ESP32 Dev Module. The solution to previous error is to install PySerial. We can install easily with pip utility.\n1 pip install pyserial A success result will show\n1 2 3 4 5 Collecting pyserial Downloading https://files.pythonhosted.org/packages/07/bc/587a445451b253b285629263eb51c2d8e9bcea4fc97826266d186f96f558/pyserial-3.5-py2.py3-none-any.whl (90kB) 100% |████████████████████████████████| 92kB 1.8MB/s Installing collected packages: pyserial Successfully installed pyserial-3.5 After this, you can compile Arduino sketchs with no problem. The Arduino IDE will report to you sketch final size, for example\n1 2 Sketch uses 205592 bytes (15%) of program storage space. Maximum is 1310720 bytes. Global variables use 11976 bytes (3%) of dynamic memory, leaving 315704 bytes for local variables. Maximum is 327680 bytes. Flashing a Arduino code to ESP32 To verify the installation and support for ESP32, we will flash an example file. This sketch will make the builtin led to blink.\nESP32 board Flash Arduino Led Blink sketch to ESP32 This ESP32 board has a built in LED on pin D9, which we will control using a very simple Arduino program\n1 2 3 4 5 6 7 8 9 10 11 12 13 #define LED_BUILTIN 2 #define DELAY 1000 void setup() { pinMode(LED_BUILTIN, OUTPUT); } void loop() { digitalWrite(LED_BUILTIN, HIGH); delay(DELAY); digitalWrite(LED_BUILTIN, LOW); delay(DELAY); } In order to successfully complete the code flashing process, you need to press BOOT button of the board while you flash the sketch. The button must be kept hold until you see Writing at ... line.\nAn example success output should be like\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 Sketch uses 214148 bytes (16%) of program storage space. Maximum is 1310720 bytes. Global variables use 12304 bytes (3%) of dynamic memory, leaving 315376 bytes for local variables. Maximum is 327680 bytes. python /home/sergio/Downloads/arduino-1.8.15/hardware/espressif/esp32/tools/esptool/esptool.py --chip esp32 --port /dev/ttyUSB0 --baud 115200 --before default_reset --after hard_reset write_flash -z --flash_mode dio --flash_freq 80m --flash_size detect 0xe000 /home/sergio/Downloads/arduino-1.8.15/hardware/espressif/esp32/tools/partitions/boot_app0.bin 0x1000 /tmp/arduino_build_418056/empty.ino.bootloader.bin 0x10000 /tmp/arduino_build_418056/empty.ino.bin 0x8000 /tmp/arduino_build_418056/empty.ino.partitions.bin esptool.py v3.1-dev Serial port /dev/ttyUSB0 Connecting........_____....._ Chip is ESP32-D0WDQ6 (revision 1) Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None Crystal is 40MHz MAC: OFUSCATED_MAC_HERE Uploading stub... Running stub... Stub running... Configuring flash size... Auto-detected Flash size: 4MB Compressed 8192 bytes to 47... Writing at 0x0000e000... (100 %) Wrote 8192 bytes (47 compressed) at 0x0000e000 in 0.1 seconds (effective 703.8 kbit/s)... Hash of data verified. Compressed 18576 bytes to 12483... Writing at 0x00001000... (100 %) Wrote 18576 bytes (12483 compressed) at 0x00001000 in 1.3 seconds (effective 111.4 kbit/s)... Hash of data verified. Compressed 214288 bytes to 120110... Writing at 0x00010000... (12 %) Writing at 0x0001c9c3... (25 %) Writing at 0x00021f78... (37 %) Writing at 0x000273f9... (50 %) Writing at 0x0002c783... (62 %) Writing at 0x00035ed3... (75 %) Writing at 0x0003cef3... (87 %) Writing at 0x00042749... (100 %) Wrote 214288 bytes (120110 compressed) at 0x00010000 in 10.7 seconds (effective 160.0 kbit/s)... Hash of data verified. Compressed 3072 bytes to 128... Writing at 0x00008000... (100 %) Wrote 3072 bytes (128 compressed) at 0x00008000 in 0.1 seconds (effective 438.1 kbit/s)... Hash of data verified. Leaving... Hard resetting via RTS pin... By default, my ESP32 board each time is reset shows\n1 2 3 4 5 6 7 8 21:21:53.893 -\u0026gt; rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT) 21:21:53.893 -\u0026gt; configsip: 0, SPIWP:0xee 21:21:53.893 -\u0026gt; clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00 21:21:53.893 -\u0026gt; mode:DIO, clock div:1 21:21:53.964 -\u0026gt; load:0x3fff0030,len:1412 21:21:53.964 -\u0026gt; load:0x40078000,len:13400 21:21:53.964 -\u0026gt; load:0x40080400,len:3672 21:21:53.964 -\u0026gt; entry 0x400805f8 so beware in case you see similar output.\nVerify it works Verify that you see the onboard LED blinking on and off.\nReferences ESP32 core at Github: https://github.com/espressif/arduino-esp32 Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2021-05-18T00:00:00Z","image":"https://curiousstuff.eu/post/how-to-blink-the-damn-esp32-built-in-led/harrison-broadbent-fZB51omnY_Y-unsplash_huaf328d86ecd8a6781cd897387c7cb7d2_403452_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/how-to-blink-the-damn-esp32-built-in-led/","title":"How to blink the damn ESP32 built-in led"},{"content":"Cracking systems Breaking any encryption system can be done with unlimited time and unlimited computing power, both of which do not exist. Anything less than that unlimited power and time will require chance and good investigative skills. Several methods to break encryption include dictionary attacks, brute-force attacks, and rainbow tables.\nRainbow Tables A note on rainbow tables first:\nThey do not have rainbow colors\nA rainbow table is a precomputed compilation of plaintexts and matching ciphertexts (typically passwords and their matching hashes). Rainbow tables greatly speed up many types of password cracking attacks, often taking minutes to crack where other methods (such as dictionary, hybrid, and brute-force password cracking attempts) may take much longer.\nThough rainbow tables act as a database, they are more complex under the hood, relying on a time/memory trade-off to represent and recover passwords and hashes. Most rainbows tables can crack most, but not all, possible hashes.\nSo, in short, rainbow tables are created by precomputing the hash representation of passwords, and creating a lookup table to accelerate the process of checking for weak passwords.\nWhat are rainbow tables used for? Today, passwords are no longer stored unencrypted - or so it is hoped. When users of a platform set a password for their account, this sequence of characters does not appear in plain text in a database on some server, as it would not be secure: if he could find a way into it, a hacker would have a very easy time gaining access to all the accounts of a given user.\nFor eCommerce, online banking or online government services this would have fatal consequences. Instead, online services use various cryptographic mechanisms to encrypt their users\u0026rsquo; passwords so that only a hash value (summary value) of the key appears in the databases.\nEven if the originating cryptographic function is known, it is not possible to deduce the password from this hash value, because it is not possible to reconstruct the procedure in reverse. This leads cybercriminals to resort to brute-force attacks, in which a computer program tries to \u0026ldquo;guess\u0026rdquo; the correct sequence of characters constituting the password for as long as it takes.\nThis method can be combined with so-called password \u0026ldquo;dictionaries\u0026rdquo;. In these files, which circulate freely on the Internet, numerous passwords can be found that are either very popular or have already been intercepted in the past. Hackers first try out all the passwords in the dictionary, which saves time, although, depending on the complexity of the passwords (length and type of characters), this process can take longer and consume more resources than expected.\nEncryption technology Since cryptographic hash functions began to be applied in encryption, algorithms have continued to evolve and standards that ten years ago were considered unassailable are now seen as serious security breaches. They all have one thing in common, however, and that is that the content to be encrypted is subjected to various algorithms until a hash value is finally generated. This summary value is usually a hexadecimal cipher with a fixed length, which does not depend on the length of the initial content. At the end of the process, for example, a hash value of 128 bits always results.\nThree aspects are decisive in encryption:\nThe same input always generates the same hash value: only then can this value function as a checksum. Is the key entered identical to the one in the database? The system only authorizes access when both hash values match. A hash value should always be unique: two different entries should not generate the same summary value, as only being unique can guarantee that the correct key is entered. As the number of possible hash values is limited, but the number of possible entries is not, it is impossible to rule out such matches, called collisions in this context. Modern hash functions and hash values of sufficient length attempt to keep this risk at bay. Summary values are not reversible, i.e. it is not possible to deduce the original content (the key) from the summary value. Therefore it is also not possible to decrypt summary values, as is sometimes somewhat inaccurately claimed. They can only be reconstructed. Hash functions must be very complex, but not too complex: if an algorithm works too fast, it makes the attackers\u0026rsquo; job easier and can no longer guarantee security. But the transformation should not be overly complex either, because it ultimately has to be put into practice. Reduction functions The hash values contained in rainbow tables are not created during an attack, but beforehand, so that hackers can get hold of them and use them to find access keys. But since these files are very large, a memory-saving reduction function is applied. This function converts the hash value into a plain text - it does not return the original value of the hash value, i.e. the original password, as this is not possible, but generates a completely new text.\nFrom this text another new summary value is created, a process that in a rainbow table does not happen only once, but many times, so that a string is generated. In the final table, however, only the first key and the last summary value of the string appear. With this information and using the same reduction functions it is possible to find out all the other values. The hash value to be broken is reduced and summarized again and again following the same rules, checking each result against the values in the table to find its corresponding key.\nThe challenge in creating a table lies in the fact that the initial word representing the beginning of a string cannot appear as plaintext in another preceding string.\nThis method can greatly reduce the size of these tables, even if they still have a volume of several hundred gigabytes.\nRainbow tables properties Scaling properties Fast lookups means bigger tables, assuming coverage stays the same. Better coverage means either slower lookups, or bigger tables. Smaller tables means either slower lookups, or worse coverage. Rainbow table computation time To understand Rainbow table computation time, lets see an example!\nIf a hash+reduction operation takes a $1 \\mu s$, then generating a table with a $1 \\cdot 10^6$ chains and $1 \\cdot 10^4$ reductions per chain would take about $3$ hours: $$ chainLength × chainCount / reductionsPerSecond / secondsPerHour = $$\n$$ 1 \\cdot 10^4 × 1 \\cdot 10^6 / 1 \\cdot 10^6 / 3600 = 2.8h $$\nRainbow table lookup time Usually, rainbow tables are considered to have a lookup time of $O(n)$\nCreate rainbow tables with rtgen Now the time to generate the rainbow tables. There is an utility called rtgen or rtgen.exe if you work with Windows. This tool is the rainbow table generator.\nDefault supported charsets 1 2 3 4 5 6 7 8 9 10 11 12 13 14 numeric = [0123456789] alpha = [ABCDEFGHIJKLMNOPQRSTUVWXYZ] alpha-numeric = [ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789] loweralpha = [abcdefghijklmnopqrstuvwxyz] loweralpha-numeric = [abcdefghijklmnopqrstuvwxyz0123456789] mixalpha = [abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ] mixalpha-numeric = [abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789] ascii-32-95 = [ !\u0026#34;#$%\u0026amp;\u0026#39;()*+,-./0123456789:;\u0026lt;=\u0026gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~] ascii-32-65-123-4 = [ !\u0026#34;#$%\u0026amp;\u0026#39;()*+,-./0123456789:;\u0026lt;=\u0026gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`{|}~] alpha-numeric-symbol32-space = [ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^\u0026amp;*()-_+=~`[]{}|\\:;\u0026#34;\u0026#39;\u0026lt;\u0026gt;,.?/ ] rtgen Command To run rtgen, the command to be used needs to have following parameters\n1 rtgen hash_algorithm charset plaintext_len_min plaintext_len_max table_index chain_len chain_num part_index For example, to compute MD5 hash based rainbow table of length 1-7 and a chain length of 3800, we would use the command\n1 rtgen md5 loweralpha-numeric 1 7 0 3800 35000000 0 Parameters description hash_algorithm: rainbow table is hash algorithm specific. Rainbow table for a certain hash algorithm only helps to crack hashes of that type. The rtgen program natively support lots of hash algorithms like lm, ntlm, md5, sha1, mysqlsha1, halflmchall, ntlmchall, oracle-SYSTEM and md5-half. In the example above, we generate md5 rainbow tables that speed up cracking of md5 hashes. charset: The charset includes all possible characters for the plaintext. \u0026ldquo;loweralpha-numeric\u0026rdquo; stands for \u0026ldquo;abcdefghijklmnopqrstuvwxyz0123456789\u0026rdquo;, which is defined in configuration file charset.txt. plaintext_len_min, plaintext_len_max: these two parameters limit the plaintext length range of the rainbow table. In the example above, the plaintext length range is 1 to 7. So plaintexts like \u0026ldquo;a\u0026rdquo; and \u0026ldquo;abcdefg\u0026rdquo; are likely contained in the rainbow table generated. But plaintext \u0026ldquo;abcdefgh\u0026rdquo; with length 8 will not be contained. table_index: the table_index parameter selects the reduction function. Rainbow table with different table_index parameter uses different reduction function. chain_len: this is the rainbow chain length. Longer rainbow chain stores more plaintexts and requires longer time to generate. chain_num: number of rainbow chains to generate. Rainbow table is simply an array of rainbow chains. Size of each rainbow chain is 16 bytes. part_index: to store a large rainbow table in many smaller files, use different number in this parameter for each part and keep all other parameters identical. And that\u0026rsquo;s all. This is the basics about how to create your own rainbow tables. Remember that this is your only requirements:\nCPU time Enough storage space Patient Conclusion Rainbow tables can be considered a time-memory trade-off: one stores only a small part of the table and recovers it through some extra computation on lookup time. Configure them wisdomly or buy already computed tables (that\u0026rsquo;s a business too)!\nHow to protect data againts rainbow tables Both MD5 and SHA-1 have been considered insecure for some time now and their rainbow tables are easily found on the Internet. With them, hashed keys can be found very easily. It is therefore the duty of the web administrator to keep up to date on the existence of new algorithms or the effectiveness of the hash function that has been used. SHA-2 and its best-known variant, SHA-256, are still valid, but SHA-3 has now been released, which promises even more security for longer.\nEasy:\nChoose strong hashing algorithm with collisions resistance. Choose secret/salt based hashing algorithms. Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2021-05-12T00:00:00Z","image":"https://curiousstuff.eu/post/fast-hash-decryption-with-rtgen-and-rainbow-tables/pwdrtgen_hu37ecf0394a97c1125b0f125f31d7214f_100072_120x120_fill_box_smart1_3.png","permalink":"https://curiousstuff.eu/post/fast-hash-decryption-with-rtgen-and-rainbow-tables/","title":"Fast hash decryption with rtgen and Rainbow Tables"},{"content":" Easy to fix solution to common Ubuntu printing CUPS error:\nCups error as: \u0026quot;Unauthorized\u0026quot; This error usually happens because network connected printing device cannot authenticate you as a legit user. The most easiesy way to fix this error is being sure the password is still valid and you entered correctly.\nPossible reasons to have this error On a corporate environment, you entered the wrong username or password, and hence, domain connected printer cannot authenticate you. You did not realize, buy your password expired. Solution The way it worker for me to fix this error is to execute the following command:\n1 2 3 4 5 6 7 8 9 #!/bin/bash echo \u0026#34;fixing CUPS error\u0026#34; systemctl cups status echo \u0026#34;stopping CUPS\u0026#34; systemctl cups stop echo \u0026#34;check content of cups config\u0026#34; sudo nano /etc/cups/printers.conf Make sure line DeviceURI smb:// has correctly setup your user and password. For example DeviceURI smb://jhon:p4ssw0rd@printer/id\nAnd after that, always remember to restart!\n1 2 #!/bin/bash systemctl cups restart cups.conf example file As an example, I show you my current CUPS configuration file content.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 # /etc/cups/printers.conf # Printer configuration file for CUPS v1.7.2 # Written by cupsd # DO NOT EDIT THIS FILE WHEN CUPSD IS RUNNING \u0026lt;DefaultPrinter MyHomePrinter\u0026gt; UUID urn:uuid: 4d336de3-c3f1-4566-b5d7-7a97af980658 AuthInfoRequired username,password Info My home printer Location Home DeviceURI smb://jhon:p4ssw0rd@printer/01 PPDTimeStamp * State Idle StateTime 1500452070 Type 8433692 Accepting Yes Shared Yes ColorManaged Yes JobSheets none none QuotaPeriod 0 PageLimit 0 KLimit 0 OpPolicy default ErrorPolicy retry-job Option media 1 Option media-col media-bottom-margin Option output-bin 0 Option print-color-mode color Option print-quality 5 \u0026lt;/Printer\u0026gt; Conclusion This is a simple solution that works in many cases, where the problem is just an authentication issue. Hope it works for you too.\nSubscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2021-05-10T00:00:00Z","image":"https://curiousstuff.eu/post/easy-solution-to-how-to-fix-cups-unauthorized-error/trac-vu-x6q8HNPoS0M-unsplash_hu205979a8ad70b222679d8e4b4b5b2705_248259_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/easy-solution-to-how-to-fix-cups-unauthorized-error/","title":"Easy solution to how to fix CUPS unauthorized error"},{"content":"Con el confinamiento por el Coronavirus y esta situación tan caótica, uno tiene más tiempo para estar delante del ordenador y hacer cosas locas; o frikadas como me gusta llamarlas! Una de ellas es procesar datos de la Bolsa, y como esta es mi primera experiencia con ello, he empezado con la Bolsa española: BME, que es la que más cerca tengo, aunque técnicamente da igual cual elegir porque lo importante son los datos en sí.\nAunque bien es cierto que para esta explicación nos sirve cualquier fuente de datos que nos ofrezca datos de tipo numerico. Podriamos usar, metricas de aplicaciones web, información meteorológica, criptomonedas, etc. La fuente de datos, es lo de menos realmente.\nMi intención La idea es obtener datos de cotización de una o más empresas para procesarlos con el objetivo de, a posteriori, poder analizarlos sin conexión. Por lo que he podido leer en Internet, en la actualidad existen muchas fuentes de datos de donde se puede obtener esta información. Obviamente cuanto más precisa queramos que esta información más nos costará. Y es que recordad, que la información es el petroleo del siglo XXI.\nDependiendo del proveedor y la calidad de los datos, este coste podrá variar en 4€ hasta 40€ al mes por la información en tiempo real. Sin embargo, para hacer este ejercicio, no necesitamos datos en tiempo real, no somos traders.\nFuentes de información Yo me mantengo para mi, en secreto, el origen de los datos, pero vosotros podeis obtenerlos de las siguientes forma:\nMediante el servicio gratuito de Alpha vantage ( https://www.alphavantage.co/) Mediante APIs de pago o gratuitas ( https://www.quandl.com/) Mediante Google Finance. Mediante páginas webs especializadas como la propia de BME, Bolsamania ( https://www.bolsamania.com/indice/IBEX-35), etc. Recolección a mano al cierre del mercado. NOTA: leeros las condiciones del servicio que vayais a usar, por si podeis incurrir en algún delito.\nDatos a manejar La idea es hacer un pequeño programa (algoritmo), que dada una entrada de datos en formato texto (string), nos genere su correspondiente valor en formato flotante (float64) y en caso de error, nos devuelva un valor error por defecto.\nEl formato de los datos de entrada representará:\nEl valor de cotización de una acción. El porcentaje de variación en el precio, que podrá ser positivo o negativo. La oferta. La demanda. El volumen. Los precios de apertura y cierre. Los precios máximos y mínimos de la sesión. Como veis, algunos datos serán numéricos, otros en formato porcentaje, otros en formato moneda, etc\u0026hellip; con lo que nuestros formatos datos de entrada serán:\nFormato moneda: € 150,00 Formato porcentaje: +1,50% -1,50% Formato numérico: 1.500,00 El algoritmo a diseñar tendrá que ser totalmente válido con las entradas anteriores.\nNuestro algoritmo La primera idea que nos puede venir a la mente es hacer lo siguiente:\nDado el dato de entrada, eliminar del string original todos los caracteres que no sean numéricos. Es una buena opción, vamos a ver cómo quedaría. Para ello os dejo el siguiente snippet de Go con una propuesta de solución para esta opción:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; \u0026#34;strings\u0026#34; ) const ( erroredValue = -1 missingText = \u0026#34; \u0026#34; ) // stringToFloat converts string to a numeric currency value as float64 func stringToFloat(str string) float64 { if str != \u0026#34;\u0026#34; \u0026amp;\u0026amp; str != missingText { isNeg := str[0] == \u0026#39;-\u0026#39; // remove from input string any character that should not be there value := strings.Replace(str, \u0026#34;€\u0026#34;, \u0026#34;\u0026#34;, 1) value = strings.Replace(value, \u0026#34; \u0026#34;, \u0026#34;\u0026#34;, 1) value = strings.Replace(value, \u0026#34;%\u0026#34;, \u0026#34;\u0026#34;, 1) value = strings.Replace(value, \u0026#34;.\u0026#34;, \u0026#34;\u0026#34;, -1) value = strings.Replace(value, \u0026#34;+\u0026#34;, \u0026#34;\u0026#34;, 1) value = strings.Replace(value, \u0026#34;,\u0026#34;, \u0026#34;.\u0026#34;, -1) value = strings.Replace(value, \u0026#34;-\u0026#34;, \u0026#34;\u0026#34;, -1) if s, err := strconv.ParseFloat(value, 64); err == nil { if isNeg { return -1*s } return s } fmt.Println(\u0026#34;failed to convert string to number: \u0026#34;, str, value) } return erroredValue } Probando el algoritmo Lanzamos un par de tests con posibles valores de entrada y monitorizamos el rendimiento de este código. Para ello escribimos el siguiente test de evaluación del comportamiento de la función, lo lanzamos, y anotamos sus valores.\n1 2 3 4 5 6 7 8 9 10 func BenchmarkFloatParser(b *testing.B) { b.Run(\u0026#34;implementation\u0026#34;, func(b *testing.B) { b.ReportAllocs() b.SetBytes(1) b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { _ = stringToFloat(\u0026#34;€ 2,69\u0026#34;) } }) } Cuando lanzamos el test, obtenemos los siguientes resultados\n1 BenchmarkFloatParser/implementation-12 3577545\t335 ns/op\t2.99 MB/s\t32 B/op\t6 allocs/op A pesar de que podemos tener una primera visión de como se comporta nuestra función y cuanto \u0026lsquo;consume\u0026rsquo;, no podemos fiarnos completamente de este test porque el resultado de lanzar un único test no sirve de nada, debido a que es una muestra estadística muy pequeña. Tenemos que lanzarlo muchas veces. En este ejemplo concreto, voy a lanzarlo 10 veces y guardar los 10 resultados en un fichero de texto. Para ello hago uso del siguiente comando:\n1 go test -v -run=^$ -bench=^BenchmarkFloatParser -benchtime=5s -count=10 \u0026gt; code-1.txt El resultado del comando anterior, nos lanza 10 veces el mismo test con una duración individual de 5 segundos. Una vez finalizado, en el fichero code-1.txt se guardar el resultado, que en mi caso contiene:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 goos: linux goarch: amd64 BenchmarkFloatParser BenchmarkFloatParser/implementation BenchmarkFloatParser/implementation-12 18215869\t335 ns/op\t2.98 MB/s\t32 B/op\t6 allocs/op BenchmarkFloatParser/implementation-12 17971228\t340 ns/op\t2.94 MB/s\t32 B/op\t6 allocs/op BenchmarkFloatParser/implementation-12 18184957\t334 ns/op\t3.00 MB/s\t32 B/op\t6 allocs/op BenchmarkFloatParser/implementation-12 18079708\t335 ns/op\t2.99 MB/s\t32 B/op\t6 allocs/op BenchmarkFloatParser/implementation-12 18088509\t334 ns/op\t2.99 MB/s\t32 B/op\t6 allocs/op BenchmarkFloatParser/implementation-12 18035506\t330 ns/op\t3.03 MB/s\t32 B/op\t6 allocs/op BenchmarkFloatParser/implementation-12 18191371\t333 ns/op\t3.00 MB/s\t32 B/op\t6 allocs/op BenchmarkFloatParser/implementation-12 18232878\t332 ns/op\t3.01 MB/s\t32 B/op\t6 allocs/op BenchmarkFloatParser/implementation-12 18062023\t335 ns/op\t2.98 MB/s\t32 B/op\t6 allocs/op BenchmarkFloatParser/implementation-12 18180204\t332 ns/op\t3.01 MB/s\t32 B/op\t6 allocs/op Ahora sí que tenemos unos resultados estadisticamente más precisos que antes, y cuantas más veces ejecutemos, más precisos serán. El resultado agregado de los 10 tests anteriores lo podemos ver con otro comando:\n1 benchstat code-1.txt Que nos enseña tanto el resultado como su desviación.\n1 2 3 4 5 6 7 8 9 10 11 name time/op FloatParser/implementation-12 333ns ± 1% name speed FloatParser/implementation-12 2.99MB/s ± 2% name alloc/op FloatParser/implementation-12 32.0B ± 0% name allocs/op FloatParser/implementation-12 6.00 ± 0% Ahora, con estos datos recogidos podemos hacer modificaciones en nuestro código original para ver si tenemos una mejora y poder medirla con datos reales.\nMejorando (o no) el algoritmo La segunda aproximación que vamos a tomar, se trata en seleccionar del string original únicamente los caracteres que formen parte del numero, es decir, se seleccionarán unicamente los digitos del 0 al 9 dejando lo que no lo sea fuera (simbolos de euro, porcentaje, etc).\nModificamos el algoritmo anterior hasta llegar a ello. En mi caso, el código con las modificaciones aplicadas es el siguiente:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 import ( \u0026#34;strconv\u0026#34; ) const ( erroredValue = -1 missingText = \u0026#34; \u0026#34; ) // stringToFloat converts string to a numeric currency value as float64 // This implementations expects to work better than previous stringToFloat func stringToFloat(str string) float64 { if str != \u0026#34;\u0026#34; { dst := make([]byte, len(str)) insert := 0 isNeg := str[0] == \u0026#39;-\u0026#39; for i := 0; i \u0026lt; len(str); i++ { c := str[i] if c \u0026gt;= \u0026#39;0\u0026#39; \u0026amp;\u0026amp; c \u0026lt;= \u0026#39;9\u0026#39; { dst[insert] = c insert++ } else if c == \u0026#39;,\u0026#39; { // replace comma char by point since // float64 uses point char for decimals dst[insert] = \u0026#39;.\u0026#39; insert++ } } s, err := strconv.ParseFloat(string(dst[0:insert]), 64) if err == nil { if isNeg { return -1 * s } return s } } return erroredValue } Con el nuevo código en la mano, volvemos a ejecutar el mismo test anterior con los mismos datos de entrada. Igual que antes, lo ejecutamos 10 veces para tener una muestra mayor de los datos.\n1 go test -v -run=^$ -bench=^BenchmarkFloatParser -benchtime=5s -count=10 \u0026gt; code-2.txt Esta vez, al fichero donde guardamos los datos le damos otro nombre, para no perder los datos anteriores. Después de aproximadamente 50 segundos, el test habrá acabado. Mis resultados son:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 goos: linux goarch: amd64 BenchmarkFloatParser BenchmarkFloatParser/implementation BenchmarkFloatParser/implementation-12 72433752\t72.7 ns/op\t13.75 MB/s\t16 B/op\t2 allocs/op BenchmarkFloatParser/implementation-12 84055232\t72.4 ns/op\t13.81 MB/s\t16 B/op\t2 allocs/op BenchmarkFloatParser/implementation-12 84153592\t71.6 ns/op\t13.96 MB/s\t16 B/op\t2 allocs/op BenchmarkFloatParser/implementation-12 84468678\t72.9 ns/op\t13.72 MB/s\t16 B/op\t2 allocs/op BenchmarkFloatParser/implementation-12 83495444\t71.7 ns/op\t13.96 MB/s\t16 B/op\t2 allocs/op BenchmarkFloatParser/implementation-12 85193980\t71.8 ns/op\t13.93 MB/s\t16 B/op\t2 allocs/op BenchmarkFloatParser/implementation-12 85055626\t72.3 ns/op\t13.83 MB/s\t16 B/op\t2 allocs/op BenchmarkFloatParser/implementation-12 85064064\t72.1 ns/op\t13.87 MB/s\t16 B/op\t2 allocs/op BenchmarkFloatParser/implementation-12 83808258\t71.3 ns/op\t14.03 MB/s\t16 B/op\t2 allocs/op BenchmarkFloatParser/implementation-12 79048755\t71.3 ns/op\t14.03 MB/s\t16 B/op\t2 allocs/op Y agregados con benchstat:\n1 benchstat code-2.txt 1 2 3 4 5 6 7 8 9 10 11 name time/op FloatParser/implementation-12 72.0ns ± 1% name speed FloatParser/implementation-12 13.9MB/s ± 1% name alloc/op FloatParser/implementation-12 16.0B ± 0% name allocs/op FloatParser/implementation-12 2.00 ± 0% Comparando la mejora LLegados a este punto tenemos los datos de ambas ejecuciones por separado (code-1.txt y code-2.txt). La única tarea pendiente es compararlos para ver si ha habido una mejora relevante, irrelevante o empeoramiento. Para ello, el propio benchstat incluye un comparador que nos permite conocer los resultados.\n1 benchstat code-1.txt code-2.txt 1 2 3 4 5 6 7 8 9 10 11 name old time/op new time/op delta FloatParser/implementation-12 333ns ± 1% 72ns ± 1% -78.40% (p=0.000 n=9+10) name old speed new speed delta FloatParser/implementation-12 2.99MB/s ± 2% 13.89MB/s ± 1% +364.05% (p=0.000 n=10+10) name old alloc/op new alloc/op delta FloatParser/implementation-12 32.0B ± 0% 16.0B ± 0% -50.00% (p=0.000 n=10+10) name old allocs/op new allocs/op delta FloatParser/implementation-12 6.00 ± 0% 2.00 ± 0% -66.67% (p=0.000 n=10+10) Por lo tanto podemos concluir que la mejora realizada es la siguiente:\n78% más rapido en ejecución. Capaz de procesar 364% más de datos de entrada a nivel de velocidad de memoria. Capaz de obtener el mismo resultado usando un 50% menos bytes Capaz de obtener el mismo resultado usando un 66% menos de allocs El código se podria llegar a mejorar un poco más eliminando la conversion a string que se usa al llamar a\n1 s, err := strconv.ParseFloat(string(dst[0:insert]), 64) pero eso requeriría usar el paquete unsafe o modificar la función ParseFloat para que reciba un []byte. En cualquier caso, eso lo dejo para otro dia.\nSuscríbete, haz una donación o hazte premium ¿Te resulto de ayuda? Ayuda con tu granito de arena a mejorar este blog y obten ventajas exclusivas siendo miembro premium!\nSuscríbete 💬 Comparte!! ¡Gracias por leer esto y espero que hayas encontrado la información útil! Si tienes alguna duda no tardes en escribirme un comentario más abajo. Y si quieres ver más contenido, sólo házmelo saber y comparte este post con tus colegas, compañeros de trabajo, amigos, etc. Compartir por LinkedIn Compartir por Telegram Compartir por Twitter Compartir por Email Compartir por Whatsapp ","date":"2021-05-07T00:00:00Z","image":"https://curiousstuff.eu/post/lightning-fast-stock-market-data-parsing.-get-a-boost-of-70/markus-spiske-5gGcn2PRrtc-unsplash_huf27879a2f1bf14ad69cd47cab16108c2_238438_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/lightning-fast-stock-market-data-parsing.-get-a-boost-of-70/","title":"Lightning fast stock market data parsing. Get a boost of 70%"},{"content":"Vamos a analizar algunos de los principales problemas de la infraestructura existente. Esto le ayudará a entender por qué este proyecto es realmente importante.\nGestión de identidades centralizada En primer lugar, veamos qué ha hecho la gestión centralizada de identidades durante todos estos años. En realidad, Internet se construyó para conectar a las personas sin depender de un intermediario. Sin embargo, a medida que Internet comenzó a privatizarse, empezaron a surgir intermediarios de terceros.\nY por fin, ahora se convirtió en una parte fundamental de esta infraestructura. De todos modos, el fundamento se basa en un modelo centralizado que viene con una única entidad de control que tiene acceso a todo.\nEn realidad, la autoridad centralizada puede hacer cambios en tu contenido, puede robar tu información e incluso hacer un mal uso de ella de la forma que quiera.\nEs más, aunque no la roben, siguen recopilando una enorme cantidad de información personal que los hackers pueden conseguir fácilmente. Además, el enorme volumen de información también aumenta las posibilidades de que se produzcan violaciones de datos.\nPor eso, estos sistemas centralizados de gestión de la identidad fallan estrepitosamente y pueden dar lugar a estos problemas.\nFalta de transparencia Como no hay transparencia en los sistemas centralizados, parece que han surgido muchos problemas de violación de la privacidad a lo largo de los años. Por ejemplo, el intercambio ilegal de datos de pacientes por parte de DeepMind, el escándalo de Cambridge Analytica y la multa a Facebook por robar información de los usuarios para anuncios.\nTodas estas fuentes no confirmaron si el usuario tenía consentimiento o no. Es más, no siguieron ninguna norma de privacidad y rastrearon todo su historial para producir anuncios.\nFalta de control Otro gran defecto del sistema centralizado es que no tienes ningún control sobre él. En muchos casos, su información se utilizará según las necesidades de las autoridades. Por ejemplo, aunque elimines tu cuenta de Facebook, ésta seguirá conservando parte de la información en el servidor.\nPor lo tanto, nunca podrás eliminar toda la información de ellos. En cualquier caso, ésta es sólo una de las malas consecuencias que conlleva un modelo de servidor centralizado.\nRobo de identidad Cualquier hacker puede hackear fácilmente todos los datos que has compartido en Internet sin sudar. Más aún, el problema viene cuando alguien secuestra tus datos y exige un alto rescate para recuperarlos.\nPuede ser cualquier tipo de información, como los datos de tu cuenta bancaria, los datos sensibles de tu empresa o incluso tus archivos personales que no quieres que salgan a la luz.\nSegún el Breach Level Index, cada segundo se roban o se pierden 214 registros. Esto significa que, en un día, se roban 18.525.816 registros. Incluso tus datos pueden estar en esa lista, y ni siquiera lo sabrás.\nComo puedes ver, con esta cantidad de hackeos de datos que ocurren cada día, es evidente que los sistemas centralizados están fallando mucho a la hora de proteger la información de los hackers.\nSin identidad global Los sistemas centralizados no tienen ningún sistema de registro global, lo que puede dificultar la solicitud de ciertos documentos como el pasaporte, el permiso de conducir, la tarjeta PAN, etc. Por tanto, hay que presentar los mismos documentos cada vez que se solicitan.\nEn realidad, esto puede llevar mucho tiempo y hace que el proceso sea engorroso. En la actualidad, no hay ninguna autoridad mundial que pueda autentificar tus documentos con una sola identificación.\nPor ello, conseguir estos documentos puede resultar realmente difícil cuando se va de un país a otro. Además, el proceso de recopilación de toda esta información es un trabajo tedioso.\nCarga económica El sistema de gestión de la identidad abarca actualmente a sus principales interesados: los titulares de la identidad, las empresas verificadoras y las partes que verifican a los usuarios. En general, el pago de cada sector cuesta una cantidad considerable de dinero.\nDe todos modos, las empresas de KYC tienen que procesar la información de muchas organizaciones, como compañías de seguros, hospitales, bancos, etc., lo que hace que esté sobrecargado y necesite más recursos.\nPara cumplir con todas las demandas de mano de obra, las empresas cobran un alto coste de verificación, y eso se convierte en una tarifa de procesamiento oculta para los individuos.\nComo puede ver, al final será usted quien pague más por verificar sus credenciales. Según una encuesta, las empresas de KYC gastan más de 48 millones de dólares cada año sólo por el proceso de verificación.\nAdemás, el tiempo para autorizar a un individuo es de 26 días, y también, si el usuario quiere hacer algún cambio, tarda 20 días en hacerlo, lo cual es mucho tiempo.\nPor lo tanto, a la larga se convierte en una carga para todos los interesados. En cualquier caso, las identidades federales podrían utilizar una única identidad para muchos fines con el consentimiento del usuario. Sin embargo, al estar almacenada en un servidor centralizado, tampoco es transparente para los usuarios.\nIdentidad centrada en el usuario Así, tras el fracaso de todos los modelos, el enfoque se desplazó hacia una identidad más centrada en el usuario, donde éste controlará qué información se comparte. Pero también se limitó al registro de la identidad que puede revocar el acceso cuando quiera.\nAsí, empezó a surgir el concepto de identidades autosoberanas, que mantendrá la información en manos del usuario en lugar de en las organizaciones o terceros. Pero la base de la arquitectura necesita una plataforma descentralizada.\nY aquí es donde entra en juego la arquitectura Hyperledger Indy. Al ser una plataforma descentralizada, puede ser la solución perfecta para todos los problemas. Además, la arquitectura Hyperledger Indy es específica para soluciones basadas en la identidad.\nConclusión Como ves son muchos los puntos en los que las identidades digitales autosoberanas aportan gran valor, siempre y cuando el proyecto se lleve a cabo respetando las normas y la \u0026lsquo;filosofía de ssi\u0026rsquo;. En otro post, romperemos con algunos de los mitos de SSI para que se entienda mejor este tipo de tecnología.\nReferencias [1] https://sovrin.org/faq/what-is-hyperledger-indy/ [2] https://wiki.hyperledger.org/display/indy/Hyperledger+Indy [3] https://www.hyperledger.org/use/hyperledger-indy Suscríbete, haz una donación o hazte premium ¿Te resulto de ayuda? Ayuda con tu granito de arena a mejorar este blog y obten ventajas exclusivas siendo miembro premium!\nSuscríbete 💬 Comparte!! ¡Gracias por leer esto y espero que hayas encontrado la información útil! Si tienes alguna duda no tardes en escribirme un comentario más abajo. Y si quieres ver más contenido, sólo házmelo saber y comparte este post con tus colegas, compañeros de trabajo, amigos, etc. Compartir por LinkedIn Compartir por Telegram Compartir por Twitter Compartir por Email Compartir por Whatsapp ","date":"2021-05-02T00:00:00Z","image":"https://curiousstuff.eu/post/porque-considerar-hyperledger-indy-para-un-proyecto-ssi/sovrin-cover_hu4b36a22065d5b6bf20ac73edbfb83c9f_2595484_120x120_fill_box_smart1_3.png","permalink":"https://curiousstuff.eu/post/porque-considerar-hyperledger-indy-para-un-proyecto-ssi/","title":"¿Porque considerar Hyperledger Indy para un proyecto SSI?"},{"content":"¿Por qué Hyperledger Indy es importante para las identidades digitales? Hyperledger Indy puede devolverle el control sobre su propia identidad y sus datos. ¿Te sientes intrigado? Analicemos la plataforma desde su núcleo para entender cómo funciona este proyecto.\nCon la evolución del mundo digital, todos queremos estar siempre conectados. Sin embargo, al realizar diversas tareas, es posible que tengas que revelar tu información personal en múltiples plataformas. Especialmente cuando compras en línea, tienes que dar tu información financiera para comprar cualquier cosa.\nY por eso la necesidad de contar con identidades digitales es mayor que nunca. Pues bien, por muy seguras que digan ser las plataformas online, parece que hay un número abrumador de robos de identidad en todos los casos.\nDesde el momento en que revelas tu información personal, ésta se almacena en múltiples bases de datos. Y estas bases de datos no están protegidas de los hackers. Es más, ahora las plataformas utilizan nuestros datos sin nuestro consentimiento. Además, estas plataformas también venden tu información a clientes publicitarios.\nDefinitivamente, no parece que tengas el control, ¿verdad? Y aquí es donde entra en juego Hyperledger Indy.\n¿Que es Hyperledger Indy? La Fundación Sovrin publicó el código base utilizado para crear la Red Sovrin y contribuyó con el código inicial a Hyperledger Indy, un proyecto dedicado a la cadena de bloques bajo el paraguas de la Fundación Linux. Hyperledger Indy es un libro de contabilidad distribuido, creado especialmente para la identidad descentralizada. Los desarrolladores pueden utilizar las herramientas y bibliotecas de Hyperledger Indy para crear soluciones de identidad interoperables entre jurisdicciones y organismos. Esta interoperabilidad permite a los desarrolladores crear soluciones intersectoriales, como las de Fintech y Sanidad, que pueden trabajar juntas y obedecer las normas reguladoras de cada una.\nHyperledger Indy cuenta con especificaciones completas de código abierto, terminología y patrones de diseño que permiten el desarrollo de soluciones de identidad descentralizadas.\nCaracteristicas principales Libro mayor distribuido diseñado para la identidad descentralizada Resistente a la correlación por diseño DIDs (Identificadores Descentralizados) que son globalmente únicos y resolubles (a través de un ledger) sin requerir ninguna autoridad de resolución centralizada Los identificadores por pares crean relaciones seguras 1:1 entre dos entidades cualesquiera Credenciales verificables en un formato interoperable para el intercambio de atributos y relaciones de identidad digital, actualmente en proceso de estandarización en el W3C Pruebas de conocimiento cero que demuestran que algunos o todos los datos de un conjunto de afirmaciones son verdaderos sin revelar ninguna información adicional, incluida la identidad del probador Auto-soberanía Por la documentación de Hyperledger Indy, sabrás que el marco almacena las identidades en un libro mayor distribuido. Hay artefactos especiales que la plataforma almacenará para ti. Básicamente, estos artefactos incluirán acumuladores criptográficos, pruebas de existencia, claves públicas y muchos más. Sólo tú puedes cambiar o eliminar tu identidad.\nPrivacidad Por defecto, la plataforma preservará toda tu privacidad. En realidad, la documentación de Hyperledger Indy describe cómo preservará la configuración de la privacidad y cómo puede operar sin ninguna contradicción con ninguna parte. Además, también sabrá cómo puede proporcionar seguridad en un sistema descentralizado.\nDeclaraciones verificables En realidad, las reclamaciones de identidad pueden tener credenciales similares, como en la licencia de conducir o la certificación de nacimiento o en el pasaporte. Pero se pueden combinar para que sean aún más potentes. Además, puede demostrar su identidad con una sola identificación del libro mayor, sin necesidad de presentar toda la documentación en cada caso.\nDiseñado especialmente para ello Está diseñado exclusivamente para identidades descentralizadas. Según la documentación de Hyperledger Indy, utiliza la plataforma preparada para su integración en cualquier empresa que se ocupe de las identidades. Por lo tanto, no tendrá que recurrir a ninguna otra solución o crear su propia plataforma únicamente para incorporarla a sus industrias.\nIdentidad resistente a la correlación Esta es la mejor parte de Hyperledger Indy. Según la documentación de Hyperledger Indy, es completamente resistente a la correlación de identidades. Por lo tanto, no tendrá que preocuparse de dejar ningún rastro de un ID a otro. Es más, no hay forma de que la plataforma conecte dos IDs o tenga dos identificaciones similares en el libro mayor.\nIdentificadores descentralizados (DID) De acuerdo con la documentación de Hyperledger Indy, todos los identificadores descentralizados son globalmente resolubles y únicos sin necesidad de ninguna parte central en la mezcla. Así, cada identidad descentralizada en la plataforma tendrá un identificador único que le pertenecerá exclusivamente a usted. Nadie podrá reclamar ni utilizar su identidad como propia. Por lo tanto, el problema del robo de identidad se reduciría en gran medida.\nConexión entre pares Según el tutorial de Hyperledger Indy, la plataforma tiene una conexión entre pares. Por lo tanto, cualquier comunicación se produciría entre dos pares. En realidad, es diferente de cualquier otro servidor centralizado porque, en ellos, el servidor actuaría como intermediario. Pero en Hyperledger Indy, no habrá ningún intermediario.\nPruebas de conocimiento cero Con la ayuda de las pruebas de conocimiento cero, puedes revelar sólo la información necesaria sin nada más. Así, cuando tengas que demostrar tus credenciales, sólo podrás elegir revelar la información que necesites. Por ejemplo, si necesita revelar su certificado de nacimiento, puede elegir sólo eso. Así, esto le da una cantidad adicional de control sobre su información.\nReferencias [1] https://sovrin.org/faq/what-is-hyperledger-indy/ [2] https://wiki.hyperledger.org/display/indy/Hyperledger+Indy [3] https://www.hyperledger.org/use/hyperledger-indy Suscríbete, haz una donación o hazte premium ¿Te resulto de ayuda? Ayuda con tu granito de arena a mejorar este blog y obten ventajas exclusivas siendo miembro premium!\nSuscríbete 💬 Comparte!! ¡Gracias por leer esto y espero que hayas encontrado la información útil! Si tienes alguna duda no tardes en escribirme un comentario más abajo. Y si quieres ver más contenido, sólo házmelo saber y comparte este post con tus colegas, compañeros de trabajo, amigos, etc. Compartir por LinkedIn Compartir por Telegram Compartir por Twitter Compartir por Email Compartir por Whatsapp ","date":"2021-05-02T00:00:00Z","image":"https://curiousstuff.eu/post/que-es-hyperledger-indy/sovrin-cover_hu4b36a22065d5b6bf20ac73edbfb83c9f_2595484_120x120_fill_box_smart1_3.png","permalink":"https://curiousstuff.eu/post/que-es-hyperledger-indy/","title":"¿Que es Hyperledger Indy?"},{"content":" Guía completa que explica paso a paso cómo instalar y configurar el SDK de Indy por primera vez.\n¿Que es el SDK de Indy? Indy SDK es el SDK oficial de Hyperledger Indy, que proporciona una base basada en un libro distribuido para la identidad auto-soberana. Indy proporciona un ecosistema de software para la identidad privada, segura y robusta, y el SDK de Indy hace posible diseñar clientes que lo utilicen. El principal artefacto del SDK es una biblioteca que se puede llamar desde diferentes lenguajes de programación como si de una librería en C se tratase; también hay envolturas de conveniencia para varios lenguajes de programación y la herramienta Indy CLI.\nElementos incluidos en este SDK libindy El principal artefacto del SDK es una biblioteca invocable en C que proporciona los bloques de construcción básicos para la creación de aplicaciones sobre Hyperledger Indy. Está disponible para las plataformas de escritorio, móviles y de servidor más populares.\nEnvoltorios o Wrappers de Libindy Un conjunto de envoltorios libindy para desarrollar aplicaciones basadas en Indy en su lenguaje de programación favorito. El SDK de Indy proporciona envolturas libindy para los siguientes lenguajes de programación y plataformas:\nJava Python iOS NodeJS .Net Rust Indy CLI Indy CLI es la interfaz oficial de línea de comandos que ayuda a los desarrolladores y administradores de Indy.\nLibnullpay Libnullpay es un plugin de libindy que puede ser utilizado para el desarrollo de aplicaciones que utilizan la API de pagos del SDK de Indy.\nLibvcx Libvcx es una librería con capacidad de llamada en c construida sobre libindy que proporciona un protocolo de intercambio de credenciales de alto nivel. Simplifica la creación de aplicaciones de agentes y proporciona una mejor interoperabilidad agente-2-agente para la infraestructura Hyperledger Indy.\nEsta biblioteca se encuentra actualmente en estado experimental y no forma parte de las versiones oficiales.\nPerfecto!! 👏👏👏. Ahora que conocemos las diferentes partes del SDK, vamos a ver cómo podemos instalarlo en nuestro ordenador desde cero.\nRequisitos previos a la instalación Para la instalación los únicos requisitos serán:\nContar con un ordenador/servidor con Linux o algún derivado (Centos, Fedora, Debian, etc) Conexión a Internet. Como yo ya lo tengo instalado, voy a realizar una instalación limpia dentro de un contenedor docker linux con una imagen base de Ubuntu\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 docker run -it --entrypoint=sh ubuntu:21.04 Unable to find image \u0026#39;ubuntu:21.04\u0026#39; locally 21.04: Pulling from library/ubuntu c830499a6a92: Pull complete b38f134463e2: Pull complete 2fd6a415fd8e: Pull complete Digest: sha256:be154cc2b1211a9f98f4d708f4266650c9129784d0485d4507d9b0fa05d928b6 Status: Downloaded newer image for ubuntu:21.04 # root@33d565de992e:~# lsb_release -a No LSB modules are available. Distributor ID:\tUbuntu Description:\tUbuntu 21.04 Release:\t21.04 Codename:\thirsute Instalación de los requisitos de libindy Para instalar la librería libindy, en nuestro sistema se requiere ejecutar\n1 apt install -y gnupg sudo software-properties-common Si ya se tienen los paquetes instalados, el paso anterior se puede obviar.\nDespués de ello, podremos añadir el repositorio oficial de Sovrin a nuestro sistema\n1 sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys CE7709D068DB5E88 El resultado de añadir la clave correctamente es\n1 2 3 4 5 Warning: apt-key is deprecated. Manage keyring files in trusted.gpg.d instead (see apt-key(8)). Executing: /tmp/apt-key-gpghome.pihgNovR0A/gpg.1.sh --keyserver keyserver.ubuntu.com --recv-keys CE7709D068DB5E88 gpg: key CE7709D068DB5E88: public key \u0026#34;Sovrin-Repo-Master (Master key for repo.sovring.org) \u0026lt;repo@sovrin.org\u0026gt;\u0026#34; imported gpg: Total number processed: 1 gpg: imported: 1 Instalación y descarga de libindy Ahora, una vez que se cumplen con los requisitos, se puede añadir el repositorio y actualizar los índices de los paquetes locales.\n1 2 sudo add-apt-repository \u0026#34;deb https://repo.sovrin.org/sdk/deb bionic stable\u0026#34; sudo apt-get update Finalmente, se instala libindy\n1 sudo apt-get install -y libindy Verificación de libindy Si todo se ha instalado correctamente vereis el mensaje\n1 2 3 4 5 6 7 8 9 10 11 ... Unpacking libindy (1.16.0-bionic) ... Setting up libsodium23:amd64 (1.0.18-1) ... Setting up libpgm-5.3-0:amd64 (5.3.128~dfsg-2) ... Setting up libnorm1:amd64 (1.5.9+dfsg-2) ... Setting up libmd0:amd64 (1.0.3-3build1) ... Setting up libbsd0:amd64 (0.11.3-1ubuntu2) ... Setting up libzmq5:amd64 (4.3.4-1) ... Setting up libindy (1.16.0-bionic) ... deb https://repo.sovrin.org/sdk/deb hirsute stable Processing triggers for libc-bin (2.33-0ubuntu5) ... donde se indica perfectamente que libindy se ha instalado en su version 1.16.0-bionic junto con el resto de dependencias necesarias.\nOtra forma que existe de verificar si libindy ha sido instalado correctamente es verificar si la librería se ha instalado en el path /usr/lib/ y que existe el fichero /usr/lib/libindy.so.\n1 2 root@33d565de992e:~# ls -alh /usr/lib/libindy.so -rw-r--r-- 1 root root 11M Feb 20 18:52 /usr/lib/libindy.so En mi caso, vemos que la ubicación es correcta y que la librería ocupa 11 Mb. Por lo tanto, todo correcto! 👍👍\nInstalación de los requisitos de indy-sdk para Node.js Para instalar el SDK de NodeJS, se requieren las siguientes dependencias directas e indirectas:\ncurl nvm Tanto curl como nvm se instalan mediante\n1 2 3 apt update apt install -y curl curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash 1 2 3 export NVM_DIR=\u0026#34;$HOME/.nvm\u0026#34; [ -s \u0026#34;$NVM_DIR/nvm.sh\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;$NVM_DIR/nvm.sh\u0026#34; # This loads nvm [ -s \u0026#34;$NVM_DIR/bash_completion\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;$NVM_DIR/bash_completion\u0026#34; # This loads nvm bash_completion Una vez ambas instaladas, instalamos la versión de node que necesita libindy según su documentación, que indica $node \u0026gt;= 8$\n1 2 3 4 5 6 7 8 root@33d565de992e:/# nvm install v8.10.0 Downloading and installing node v8.10.0... Downloading https://nodejs.org/dist/v8.10.0/node-v8.10.0-linux-x64.tar.gz... ######################################## 100.0% Computing checksum with sha256sum Checksums matched! Now using node v8.10.0 (npm v5.6.0) Creating default alias: default -\u0026gt; v8.10.0 Si no tenemos la versión v8.10.0 activada, podemos hacerlo con\n1 2 root@33d565de992e:/# nvm use v8.10.0 Now using node v8.10.0 (npm v5.6.0) Una vez instalada, podemos crear un nuevo proyecto de Node e instalar las dependencias necesarias via npm. Para ello:\n1 2 3 cd $HOME mkdir indy-example \u0026amp;\u0026amp; cd indy-example npm init Después del comando npm init se te pedirá que introduzcas una serie de datos para crear el nuevo proyecto.\nPuedes poner datos coherentes, o pulsar ENTER hasta llegar al final.\nEn cualquier caso, el resultado del contenido del fichero package.json deberá ser similar al siguiente:\n1 2 3 4 5 6 7 8 9 10 11 { \u0026#34;name\u0026#34;: \u0026#34;indy-example\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; } Llegados a este punto podemos proceder a instalar el SDK de indy para Node.js.\nInstalar el SDK de Indy para Node.js via indy-sdk Para instalar indy-sdk de Node.js, podemos hacerlo con el comando\n1 npm install --save indy-sdk Si has llegado hasta aqui, es posible que te de el siguiente error al intentar instalar\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 root@33d565de992e:~# npm install --save indy-sdk npm WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142 npm WARN deprecated har-validator@5.1.5: this library is no longer supported \u0026gt; indy-sdk@1.15.0-dev-1628 install /root/node_modules/indy-sdk \u0026gt; node-gyp rebuild gyp ERR! configure error gyp ERR! stack Error: Can\u0026#39;t find Python executable \u0026#34;python\u0026#34;, you can set the PYTHON env variable. gyp ERR! stack at PythonFinder.failNoPython (/root/.nvm/versions/node/v8.10.0/lib/node_modules/npm/node_modules/node-gyp/lib/configure.js:483:19) gyp ERR! stack at PythonFinder.\u0026lt;anonymous\u0026gt; (/root/.nvm/versions/node/v8.10.0/lib/node_modules/npm/node_modules/node-gyp/lib/configure.js:397:16) gyp ERR! stack at F (/root/.nvm/versions/node/v8.10.0/lib/node_modules/npm/node_modules/which/which.js:68:16) gyp ERR! stack at E (/root/.nvm/versions/node/v8.10.0/lib/node_modules/npm/node_modules/which/which.js:80:29) gyp ERR! stack at /root/.nvm/versions/node/v8.10.0/lib/node_modules/npm/node_modules/which/which.js:89:16 gyp ERR! stack at /root/.nvm/versions/node/v8.10.0/lib/node_modules/npm/node_modules/which/node_modules/isexe/index.js:42:5 gyp ERR! stack at /root/.nvm/versions/node/v8.10.0/lib/node_modules/npm/node_modules/which/node_modules/isexe/mode.js:8:5 gyp ERR! stack at FSReqWrap.oncomplete (fs.js:152:21) gyp ERR! System Linux 4.15.0-142-generic gyp ERR! command \u0026#34;/root/.nvm/versions/node/v8.10.0/bin/node\u0026#34; \u0026#34;/root/.nvm/versions/node/v8.10.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\u0026#34; \u0026#34;rebuild\u0026#34; gyp ERR! cwd /root/node_modules/indy-sdk gyp ERR! node -v v8.10.0 gyp ERR! node-gyp -v v3.6.2 gyp ERR! not ok npm WARN root@1.0.0 No description npm WARN root@1.0.0 No repository field. npm ERR! code ELIFECYCLE npm ERR! errno 1 npm ERR! indy-sdk@1.15.0-dev-1628 install: `node-gyp rebuild` npm ERR! Exit status 1 npm ERR! npm ERR! Failed at the indy-sdk@1.15.0-dev-1628 install script. npm ERR! This is probably not a problem with npm. There is likely additional logging output above. npm ERR! A complete log of this run can be found in: npm ERR! /root/.npm/_logs/2021-04-29T19_21_32_586Z-debug.log El error anterior basicamente significa que te falta por instalar python. Para solucionarlo basta con instalar alguna de las versiones recomendadas por Hyperledger Indy. De momento la version recomendada es Python 2.\nInstalar Python 2 para resolver el error Para resolver el error anterior, instalaremos Python 2 con el comando\n1 sudo apt install -y python Verificar que Python 2 se instala correctamente Para verificar que Python 2 se ha instalado correctamente\n1 2 root@33d565de992e:~# python --version Python 2.7.18 Una vez instalado Python 2, se ejecuta el proceso de instalación de indy-sdk de nuevo.\nInstalar C++ Build tools Si a pesar de instalar Python 2 se siguen recibiendo errores como este\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 root@33d565de992e:~# npm install --save indy-sdk npm WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142 npm WARN deprecated har-validator@5.1.5: this library is no longer supported \u0026gt; indy-sdk@1.15.0-dev-1628 install /root/node_modules/indy-sdk \u0026gt; node-gyp rebuild gyp ERR! build error gyp ERR! stack Error: not found: make gyp ERR! stack at getNotFoundError (/root/.nvm/versions/node/v8.10.0/lib/node_modules/npm/node_modules/which/which.js:13:12) gyp ERR! stack at F (/root/.nvm/versions/node/v8.10.0/lib/node_modules/npm/node_modules/which/which.js:68:19) gyp ERR! stack at E (/root/.nvm/versions/node/v8.10.0/lib/node_modules/npm/node_modules/which/which.js:80:29) gyp ERR! stack at /root/.nvm/versions/node/v8.10.0/lib/node_modules/npm/node_modules/which/which.js:89:16 gyp ERR! stack at /root/.nvm/versions/node/v8.10.0/lib/node_modules/npm/node_modules/which/node_modules/isexe/index.js:42:5 gyp ERR! stack at /root/.nvm/versions/node/v8.10.0/lib/node_modules/npm/node_modules/which/node_modules/isexe/mode.js:8:5 gyp ERR! stack at FSReqWrap.oncomplete (fs.js:152:21) gyp ERR! System Linux 4.15.0-142-generic gyp ERR! command \u0026#34;/root/.nvm/versions/node/v8.10.0/bin/node\u0026#34; \u0026#34;/root/.nvm/versions/node/v8.10.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\u0026#34; \u0026#34;rebuild\u0026#34; gyp ERR! cwd /root/node_modules/indy-sdk gyp ERR! node -v v8.10.0 gyp ERR! node-gyp -v v3.6.2 gyp ERR! not ok npm WARN root@1.0.0 No description npm WARN root@1.0.0 No repository field. npm ERR! code ELIFECYCLE npm ERR! errno 1 npm ERR! indy-sdk@1.15.0-dev-1628 install: `node-gyp rebuild` npm ERR! Exit status 1 npm ERR! npm ERR! Failed at the indy-sdk@1.15.0-dev-1628 install script. npm ERR! This is probably not a problem with npm. There is likely additional logging output above. npm ERR! A complete log of this run can be found in: npm ERR! /root/.npm/_logs/2021-04-29T19_26_03_607Z-debug.log Será necesario instalar las herramientas de compilacion de C++. Para ello,\n1 sudo apt install -y make gcc g++ Una vez instaladas, ahora si, es el momento de instalar definitivamente y sin más errores indy-sdk. Volvemos a lanzar el comando de instalación\n1 npm install --save indy-sdk Este proceso de instalación compila el SDK para vuestra arquitectura y genera como resultado Release/obj.target/indynodejs/src/indy.o. Es por esta razón que durante el proceso de instalación aparecen Warnings del compilador.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 npm WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142 npm WARN deprecated har-validator@5.1.5: this library is no longer supported \u0026gt; indy-sdk@1.15.0-dev-1628 install /root/node_modules/indy-sdk \u0026gt; node-gyp rebuild make: Entering directory \u0026#39;/root/node_modules/indy-sdk/build\u0026#39; CXX(target) Release/obj.target/indynodejs/src/indy.o In file included from /root/.node-gyp/8.10.0/include/node/node.h:63, from ../../nan/nan.h:56, from ../src/indy.cc:4: /root/.node-gyp/8.10.0/include/node/v8.h: In static member function \u0026#39;static void v8::V8::SetAllowCodeGenerationFromStringsCallback(v8::DeprecatedAllowCodeGenerationFromStringsCallback)\u0026#39;: /root/.node-gyp/8.10.0/include/node/v8.h:10229:7: warning: cast between incompatible function types from \u0026#39;v8::DeprecatedAllowCodeGenerationFromStringsCallback\u0026#39; {aka \u0026#39;bool (*)(v8::Local\u0026lt;v8::Context\u0026gt;)\u0026#39;} to \u0026#39;v8::FreshNewAllowCodeGenerationFromStringsCallback\u0026#39; {aka \u0026#39;bool (*)(v8::Local\u0026lt;v8::Context\u0026gt;, v8::Local\u0026lt;v8::String\u0026gt;)\u0026#39;} [-Wcast-function-type] 10229 | reinterpret_cast\u0026lt;FreshNewAllowCodeGenerationFromStringsCallback\u0026gt;( | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 10230 | callback)); | ~~~~~~~~~ /root/.node-gyp/8.10.0/include/node/v8.h: In static member function \u0026#39;static void v8::V8::RemoveGCPrologueCallback(v8::GCCallback)\u0026#39;: /root/.node-gyp/8.10.0/include/node/v8.h:10275:7: warning: cast between incompatible function types from \u0026#39;v8::GCCallback\u0026#39; {aka \u0026#39;void (*)(v8::GCType, v8::GCCallbackFlags)\u0026#39;} to \u0026#39;v8::Isolate::GCCallback\u0026#39; {aka \u0026#39;void (*)(v8::Isolate*, v8::GCType, v8::GCCallbackFlags)\u0026#39;} [-Wcast-function-type] 10275 | reinterpret_cast\u0026lt;Isolate::GCCallback\u0026gt;(callback)); | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ /root/.node-gyp/8.10.0/include/node/v8.h: In static member function \u0026#39;static void v8::V8::RemoveGCEpilogueCallback(v8::GCCallback)\u0026#39;: /root/.node-gyp/8.10.0/include/node/v8.h:10282:7: warning: cast between incompatible function types from \u0026#39;v8::GCCallback\u0026#39; {aka \u0026#39;void (*)(v8::GCType, v8::GCCallbackFlags)\u0026#39;} to \u0026#39;v8::Isolate::GCCallback\u0026#39; {aka \u0026#39;void (*)(v8::Isolate*, v8::GCType, v8::GCCallbackFlags)\u0026#39;} [-Wcast-function-type] 10282 | reinterpret_cast\u0026lt;Isolate::GCCallback\u0026gt;(callback)); | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ In file included from ../../nan/nan.h:56, from ../src/indy.cc:4: ../src/indy.cc: At global scope: /root/.node-gyp/8.10.0/include/node/node.h:475:7: warning: cast between incompatible function types from \u0026#39;void (*)(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE)\u0026#39; {aka \u0026#39;void (*)(v8::Local\u0026lt;v8::Object\u0026gt;)\u0026#39;} to \u0026#39;node::addon_register_func\u0026#39; {aka \u0026#39;void (*)(v8::Local\u0026lt;v8::Object\u0026gt;, v8::Local\u0026lt;v8::Value\u0026gt;, void*)\u0026#39;} [-Wcast-function-type] 475 | (node::addon_register_func) (regfunc), \\ | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ /root/.node-gyp/8.10.0/include/node/node.h:506:3: note: in expansion of macro \u0026#39;NODE_MODULE_X\u0026#39; 506 | NODE_MODULE_X(modname, regfunc, NULL, 0) // NOLINT (readability/null_usage) | ^~~~~~~~~~~~~ ../src/indy.cc:3833:1: note: in expansion of macro \u0026#39;NODE_MODULE\u0026#39; 3833 | NODE_MODULE(indynodejs, InitAll) | ^~~~~~~~~~~ In file included from /root/.node-gyp/8.10.0/include/node/node.h:63, from ../../nan/nan.h:56, from ../src/indy.cc:4: /root/.node-gyp/8.10.0/include/node/v8.h: In instantiation of \u0026#39;void v8::PersistentBase\u0026lt;T\u0026gt;::SetWeak(P*, typename v8::WeakCallbackInfo\u0026lt;P\u0026gt;::Callback, v8::WeakCallbackType) [with P = node::ObjectWrap; T = v8::Object; typename v8::WeakCallbackInfo\u0026lt;P\u0026gt;::Callback = void (*)(const v8::WeakCallbackInfo\u0026lt;node::ObjectWrap\u0026gt;\u0026amp;)]\u0026#39;: /root/.node-gyp/8.10.0/include/node/node_object_wrap.h:85:78: required from here /root/.node-gyp/8.10.0/include/node/v8.h:9253:16: warning: cast between incompatible function types from \u0026#39;v8::WeakCallbackInfo\u0026lt;node::ObjectWrap\u0026gt;::Callback\u0026#39; {aka \u0026#39;void (*)(const v8::WeakCallbackInfo\u0026lt;node::ObjectWrap\u0026gt;\u0026amp;)\u0026#39;} to \u0026#39;Callback\u0026#39; {aka \u0026#39;void (*)(const v8::WeakCallbackInfo\u0026lt;void\u0026gt;\u0026amp;)\u0026#39;} [-Wcast-function-type] 9253 | reinterpret_cast\u0026lt;Callback\u0026gt;(callback), type); | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ /root/.node-gyp/8.10.0/include/node/v8.h: In instantiation of \u0026#39;void v8::PersistentBase\u0026lt;T\u0026gt;::SetWeak(P*, typename v8::WeakCallbackInfo\u0026lt;P\u0026gt;::Callback, v8::WeakCallbackType) [with P = Nan::ObjectWrap; T = v8::Object; typename v8::WeakCallbackInfo\u0026lt;P\u0026gt;::Callback = void (*)(const v8::WeakCallbackInfo\u0026lt;Nan::ObjectWrap\u0026gt;\u0026amp;)]\u0026#39;: ../../nan/nan_object_wrap.h:65:61: required from here /root/.node-gyp/8.10.0/include/node/v8.h:9253:16: warning: cast between incompatible function types from \u0026#39;v8::WeakCallbackInfo\u0026lt;Nan::ObjectWrap\u0026gt;::Callback\u0026#39; {aka \u0026#39;void (*)(const v8::WeakCallbackInfo\u0026lt;Nan::ObjectWrap\u0026gt;\u0026amp;)\u0026#39;} to \u0026#39;Callback\u0026#39; {aka \u0026#39;void (*)(const v8::WeakCallbackInfo\u0026lt;void\u0026gt;\u0026amp;)\u0026#39;} [-Wcast-function-type] In file included from /usr/include/string.h:519, from /usr/include/c++/10/cstring:42, from ../../nan/nan.h:60, from ../src/indy.cc:4: In function \u0026#39;char* strncpy(char*, const char*, size_t)\u0026#39;, inlined from \u0026#39;char* copyCStr(const char*)\u0026#39; at ../src/indy.cc:13:12: /usr/include/x86_64-linux-gnu/bits/string_fortified.h:95:34: warning: \u0026#39;char* __builtin_strncpy(char*, const char*, long unsigned int)\u0026#39; output truncated before terminating nul copying as many bytes from a string as its length [-Wstringop-truncation] 95 | return __builtin___strncpy_chk (__dest, __src, __len, | ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~ 96 | __glibc_objsize (__dest)); | ~~~~~~~~~~~~~~~~~~~~~~~~~ ../src/indy.cc: In function \u0026#39;char* copyCStr(const char*)\u0026#39;: ../src/indy.cc:11:24: note: length computed here 11 | size_t len = strlen(original); | ~~~~~~^~~~~~~~~~ SOLINK_MODULE(target) Release/obj.target/indynodejs.node COPY Release/indynodejs.node make: Leaving directory \u0026#39;/root/node_modules/indy-sdk/build\u0026#39; npm notice created a lockfile as package-lock.json. You should commit this file. npm WARN root@1.0.0 No description npm WARN root@1.0.0 No repository field. + indy-sdk@1.15.0-dev-1628 added 103 packages in 20.884s root@33d565de992e:~# Lo importante es que el proceso acaba correctamente y nos notifica que de indy-sdk se ha instalado en su version 1.15.0-dev-1628\n1 2 + indy-sdk@1.15.0-dev-1628 added 103 packages in 20.884s Verificación del SDK de Node.js Para acabar, será necesario comprobar que efectivamente, la librería de libindy y el indy-sdk se cargan correctamente en nuestra aplicación de Node.js. Este funcionamiento lo comprobaremos mediante un sencillo ejemplo. Para ello crearemos un fichero llamado example.js y añadiremos el siguiente contenido:\n1 2 3 4 \u0026#34;use strict\u0026#34;; const indy = require(\u0026#39;indy-sdk\u0026#39;); console.log(indy); Si tenemos todo correctamente instalado, a la hora de ejecutar el fichero example.js veremos la siguiente salida por consola\n{ capi: { issuerCreateSchema: [Function], issuerCreateAndStoreCredentialDef: [Function], issuerRotateCredentialDefStart: [Function], issuerRotateCredentialDefApply: [Function], issuerCreateAndStoreRevocReg: [Function], issuerCreateCredentialOffer: [Function], issuerCreateCredential: [Function], issuerRevokeCredential: [Function], issuerMergeRevocationRegistryDeltas: [Function], proverCreateMasterSecret: [Function], proverCreateCredentialReq: [Function], proverStoreCredential: [Function], proverGetCredentials: [Function], proverGetCredential: [Function], proverSearchCredentials: [Function], proverFetchCredentials: [Function], proverCloseCredentialsSearch: [Function], proverGetCredentialsForProofReq: [Function], proverSearchCredentialsForProofReq: [Function], proverFetchCredentialsForProofReq: [Function], proverCloseCredentialsSearchForProofReq: [Function], proverDeleteCredential: [Function], proverCreateProof: [Function], verifierVerifyProof: [Function], createRevocationState: [Function], updateRevocationState: [Function], generateNonce: [Function], toUnqualified: [Function], openBlobStorageReader: [Function], openBlobStorageWriter: [Function], createKey: [Function], setKeyMetadata: [Function], getKeyMetadata: [Function], cryptoSign: [Function], cryptoVerify: [Function], cryptoAuthCrypt: [Function], cryptoAuthDecrypt: [Function], cryptoAnonCrypt: [Function], cryptoAnonDecrypt: [Function], packMessage: [Function], unpackMessage: [Function], createAndStoreMyDid: [Function], replaceKeysStart: [Function], replaceKeysApply: [Function], storeTheirDid: [Function], keyForDid: [Function], keyForLocalDid: [Function], setEndpointForDid: [Function], getEndpointForDid: [Function], setDidMetadata: [Function], getDidMetadata: [Function], getMyDidWithMeta: [Function], listMyDidsWithMeta: [Function], abbreviateVerkey: [Function], qualifyDid: [Function], signAndSubmitRequest: [Function], submitRequest: [Function], submitAction: [Function], signRequest: [Function], multiSignRequest: [Function], buildGetDdoRequest: [Function], buildNymRequest: [Function], buildAttribRequest: [Function], buildGetAttribRequest: [Function], buildGetNymRequest: [Function], parseGetNymResponse: [Function], buildSchemaRequest: [Function], buildGetSchemaRequest: [Function], parseGetSchemaResponse: [Function], buildCredDefRequest: [Function], buildGetCredDefRequest: [Function], parseGetCredDefResponse: [Function], buildNodeRequest: [Function], buildGetValidatorInfoRequest: [Function], buildGetTxnRequest: [Function], buildPoolConfigRequest: [Function], buildPoolRestartRequest: [Function], buildPoolUpgradeRequest: [Function], buildRevocRegDefRequest: [Function], buildGetRevocRegDefRequest: [Function], parseGetRevocRegDefResponse: [Function], buildRevocRegEntryRequest: [Function], buildGetRevocRegRequest: [Function], parseGetRevocRegResponse: [Function], buildGetRevocRegDeltaRequest: [Function], parseGetRevocRegDeltaResponse: [Function], buildAuthRuleRequest: [Function], buildAuthRulesRequest: [Function], buildGetAuthRuleRequest: [Function], buildTxnAuthorAgreementRequest: [Function], buildDisableAllTxnAuthorAgreementsRequest: [Function], buildGetTxnAuthorAgreementRequest: [Function], buildAcceptanceMechanismsRequest: [Function], buildGetAcceptanceMechanismsRequest: [Function], buildLedgersFreezeRequest: [Function], buildGetFrozenLedgersRequest: [Function], appendTxnAuthorAgreementAcceptanceToRequest: [Function], appendRequestEndorser: [Function], getResponseMetadata: [Function], addWalletRecord: [Function], updateWalletRecordValue: [Function], updateWalletRecordTags: [Function], addWalletRecordTags: [Function], deleteWalletRecordTags: [Function], deleteWalletRecord: [Function], getWalletRecord: [Function], openWalletSearch: [Function], fetchWalletSearchNextRecords: [Function], closeWalletSearch: [Function], getSchema: [Function], getCredDef: [Function], purgeSchemaCache: [Function], purgeCredDefCache: [Function], isPairwiseExists: [Function], createPairwise: [Function], listPairwise: [Function], getPairwise: [Function], setPairwiseMetadata: [Function], createPaymentAddress: [Function], listPaymentAddresses: [Function], addRequestFees: [Function], parseResponseWithFees: [Function], buildGetPaymentSourcesRequest: [Function], buildGetPaymentSourcesWithFromRequest: [Function], parseGetPaymentSourcesResponse: [Function], parseGetPaymentSourcesWithFromResponse: [Function], buildPaymentReq: [Function], parsePaymentResponse: [Function], preparePaymentExtraWithAcceptanceData: [Function], buildMintReq: [Function], buildSetTxnFeesReq: [Function], buildGetTxnFeesReq: [Function], parseGetTxnFeesResponse: [Function], buildVerifyPaymentReq: [Function], parseVerifyPaymentResponse: [Function], createPoolLedgerConfig: [Function], getRequestInfo: [Function], signWithAddress: [Function], verifyWithAddress: [Function], openPoolLedger: [Function], refreshPoolLedger: [Function], listPools: [Function], closePoolLedger: [Function], deletePoolLedgerConfig: [Function], setProtocolVersion: [Function], createWallet: [Function], openWallet: [Function], exportWallet: [Function], importWallet: [Function], closeWallet: [Function], deleteWallet: [Function], generateWalletKey: [Function], setRuntimeConfig: [Function], getCurrentError: [Function], setDefaultLogger: [Function], setLogger: [Function], path: \u0026#39;/root/node_modules/indy-sdk/build/Release/indynodejs.node\u0026#39; }, setRuntimeConfig: [Function: setRuntimeConfig], setDefaultLogger: [Function: setDefaultLogger], setLogger: [Function: setLogger], issuerCreateSchema: [Function: issuerCreateSchema], issuerCreateAndStoreCredentialDef: [Function: issuerCreateAndStoreCredentialDef], issuerRotateCredentialDefStart: [Function: issuerRotateCredentialDefStart], issuerRotateCredentialDefApply: [Function: issuerRotateCredentialDefApply], issuerCreateAndStoreRevocReg: [Function: issuerCreateAndStoreRevocReg], issuerCreateCredentialOffer: [Function: issuerCreateCredentialOffer], issuerCreateCredential: [Function: issuerCreateCredential], issuerRevokeCredential: [Function: issuerRevokeCredential], issuerMergeRevocationRegistryDeltas: [Function: issuerMergeRevocationRegistryDeltas], proverCreateMasterSecret: [Function: proverCreateMasterSecret], proverCreateCredentialReq: [Function: proverCreateCredentialReq], proverStoreCredential: [Function: proverStoreCredential], proverGetCredentials: [Function: proverGetCredentials], proverGetCredential: [Function: proverGetCredential], proverSearchCredentials: [Function: proverSearchCredentials], proverFetchCredentials: [Function: proverFetchCredentials], proverCloseCredentialsSearch: [Function: proverCloseCredentialsSearch], proverGetCredentialsForProofReq: [Function: proverGetCredentialsForProofReq], proverSearchCredentialsForProofReq: [Function: proverSearchCredentialsForProofReq], proverFetchCredentialsForProofReq: [Function: proverFetchCredentialsForProofReq], proverCloseCredentialsSearchForProofReq: [Function: proverCloseCredentialsSearchForProofReq], proverDeleteCredential: [Function: proverDeleteCredential], proverCreateProof: [Function: proverCreateProof], verifierVerifyProof: [Function: verifierVerifyProof], createRevocationState: [Function: createRevocationState], updateRevocationState: [Function: updateRevocationState], generateNonce: [Function: generateNonce], toUnqualified: [Function: toUnqualified], openBlobStorageReader: [Function: openBlobStorageReader], openBlobStorageWriter: [Function: openBlobStorageWriter], createKey: [Function: createKey], setKeyMetadata: [Function: setKeyMetadata], getKeyMetadata: [Function: getKeyMetadata], cryptoSign: [Function: cryptoSign], cryptoVerify: [Function: cryptoVerify], cryptoAuthCrypt: [Function: cryptoAuthCrypt], cryptoAuthDecrypt: [Function: cryptoAuthDecrypt], cryptoAnonCrypt: [Function: cryptoAnonCrypt], cryptoAnonDecrypt: [Function: cryptoAnonDecrypt], packMessage: [Function: packMessage], unpackMessage: [Function: unpackMessage], createAndStoreMyDid: [Function: createAndStoreMyDid], replaceKeysStart: [Function: replaceKeysStart], replaceKeysApply: [Function: replaceKeysApply], storeTheirDid: [Function: storeTheirDid], keyForDid: [Function: keyForDid], keyForLocalDid: [Function: keyForLocalDid], setEndpointForDid: [Function: setEndpointForDid], getEndpointForDid: [Function: getEndpointForDid], setDidMetadata: [Function: setDidMetadata], getDidMetadata: [Function: getDidMetadata], getMyDidWithMeta: [Function: getMyDidWithMeta], listMyDidsWithMeta: [Function: listMyDidsWithMeta], abbreviateVerkey: [Function: abbreviateVerkey], qualifyDid: [Function: qualifyDid], signAndSubmitRequest: [Function: signAndSubmitRequest], submitRequest: [Function: submitRequest], submitAction: [Function: submitAction], signRequest: [Function: signRequest], multiSignRequest: [Function: multiSignRequest], buildGetDdoRequest: [Function: buildGetDdoRequest], buildNymRequest: [Function: buildNymRequest], buildAttribRequest: [Function: buildAttribRequest], buildGetAttribRequest: [Function: buildGetAttribRequest], buildGetNymRequest: [Function: buildGetNymRequest], parseGetNymResponse: [Function: parseGetNymResponse], buildSchemaRequest: [Function: buildSchemaRequest], buildGetSchemaRequest: [Function: buildGetSchemaRequest], parseGetSchemaResponse: [Function: parseGetSchemaResponse], buildCredDefRequest: [Function: buildCredDefRequest], buildGetCredDefRequest: [Function: buildGetCredDefRequest], parseGetCredDefResponse: [Function: parseGetCredDefResponse], buildNodeRequest: [Function: buildNodeRequest], buildGetValidatorInfoRequest: [Function: buildGetValidatorInfoRequest], buildGetTxnRequest: [Function: buildGetTxnRequest], buildPoolConfigRequest: [Function: buildPoolConfigRequest], buildPoolRestartRequest: [Function: buildPoolRestartRequest], buildPoolUpgradeRequest: [Function: buildPoolUpgradeRequest], buildRevocRegDefRequest: [Function: buildRevocRegDefRequest], buildGetRevocRegDefRequest: [Function: buildGetRevocRegDefRequest], parseGetRevocRegDefResponse: [Function: parseGetRevocRegDefResponse], buildRevocRegEntryRequest: [Function: buildRevocRegEntryRequest], buildGetRevocRegRequest: [Function: buildGetRevocRegRequest], parseGetRevocRegResponse: [Function: parseGetRevocRegResponse], buildGetRevocRegDeltaRequest: [Function: buildGetRevocRegDeltaRequest], parseGetRevocRegDeltaResponse: [Function: parseGetRevocRegDeltaResponse], buildAuthRuleRequest: [Function: buildAuthRuleRequest], buildAuthRulesRequest: [Function: buildAuthRulesRequest], buildGetAuthRuleRequest: [Function: buildGetAuthRuleRequest], buildTxnAuthorAgreementRequest: [Function: buildTxnAuthorAgreementRequest], buildDisableAllTxnAuthorAgreementsRequest: [Function: buildDisableAllTxnAuthorAgreementsRequest], buildGetTxnAuthorAgreementRequest: [Function: buildGetTxnAuthorAgreementRequest], buildAcceptanceMechanismsRequest: [Function: buildAcceptanceMechanismsRequest], buildGetAcceptanceMechanismsRequest: [Function: buildGetAcceptanceMechanismsRequest], buildLedgersFreezeRequest: [Function: buildLedgersFreezeRequest], buildGetFrozenLedgersRequest: [Function: buildGetFrozenLedgersRequest], appendTxnAuthorAgreementAcceptanceToRequest: [Function: appendTxnAuthorAgreementAcceptanceToRequest], appendRequestEndorser: [Function: appendRequestEndorser], getResponseMetadata: [Function: getResponseMetadata], addWalletRecord: [Function: addWalletRecord], updateWalletRecordValue: [Function: updateWalletRecordValue], updateWalletRecordTags: [Function: updateWalletRecordTags], addWalletRecordTags: [Function: addWalletRecordTags], deleteWalletRecordTags: [Function: deleteWalletRecordTags], deleteWalletRecord: [Function: deleteWalletRecord], getWalletRecord: [Function: getWalletRecord], openWalletSearch: [Function: openWalletSearch], fetchWalletSearchNextRecords: [Function: fetchWalletSearchNextRecords], closeWalletSearch: [Function: closeWalletSearch], getSchema: [Function: getSchema], getCredDef: [Function: getCredDef], purgeSchemaCache: [Function: purgeSchemaCache], purgeCredDefCache: [Function: purgeCredDefCache], isPairwiseExists: [Function: isPairwiseExists], createPairwise: [Function: createPairwise], listPairwise: [Function: listPairwise], getPairwise: [Function: getPairwise], setPairwiseMetadata: [Function: setPairwiseMetadata], createPaymentAddress: [Function: createPaymentAddress], listPaymentAddresses: [Function: listPaymentAddresses], addRequestFees: [Function: addRequestFees], parseResponseWithFees: [Function: parseResponseWithFees], buildGetPaymentSourcesRequest: [Function: buildGetPaymentSourcesRequest], buildGetPaymentSourcesWithFromRequest: [Function: buildGetPaymentSourcesWithFromRequest], parseGetPaymentSourcesResponse: [Function: parseGetPaymentSourcesResponse], parseGetPaymentSourcesWithFromResponse: [Function: parseGetPaymentSourcesWithFromResponse], buildPaymentReq: [Function: buildPaymentReq], parsePaymentResponse: [Function: parsePaymentResponse], preparePaymentExtraWithAcceptanceData: [Function: preparePaymentExtraWithAcceptanceData], buildMintReq: [Function: buildMintReq], buildSetTxnFeesReq: [Function: buildSetTxnFeesReq], buildGetTxnFeesReq: [Function: buildGetTxnFeesReq], parseGetTxnFeesResponse: [Function: parseGetTxnFeesResponse], buildVerifyPaymentReq: [Function: buildVerifyPaymentReq], parseVerifyPaymentResponse: [Function: parseVerifyPaymentResponse], getRequestInfo: [Function: getRequestInfo], signWithAddress: [Function: signWithAddress], verifyWithAddress: [Function: verifyWithAddress], createPoolLedgerConfig: [Function: createPoolLedgerConfig], openPoolLedger: [Function: openPoolLedger], refreshPoolLedger: [Function: refreshPoolLedger], listPools: [Function: listPools], closePoolLedger: [Function: closePoolLedger], deletePoolLedgerConfig: [Function: deletePoolLedgerConfig], setProtocolVersion: [Function: setProtocolVersion], createWallet: [Function: createWallet], openWallet: [Function: openWallet], exportWallet: [Function: exportWallet], importWallet: [Function: importWallet], closeWallet: [Function: closeWallet], deleteWallet: [Function: deleteWallet], generateWalletKey: [Function: generateWalletKey] } Recuerda que para ejecutarlo correctamente se tiene que hacer con el comando\n1 node example.js Referencias [1] https://github.com/hyperledger/indy-sdk [2] https://github.com/hyperledger/indy-sdk/tree/master/samples/nodejs [3] https://github.com/nvm-sh/nvm Suscríbete, haz una donación o hazte premium ¿Te resulto de ayuda? Ayuda con tu granito de arena a mejorar este blog y obten ventajas exclusivas siendo miembro premium!\nSuscríbete 💬 Comparte!! ¡Gracias por leer esto y espero que hayas encontrado la información útil! Si tienes alguna duda no tardes en escribirme un comentario más abajo. Y si quieres ver más contenido, sólo házmelo saber y comparte este post con tus colegas, compañeros de trabajo, amigos, etc. Compartir por LinkedIn Compartir por Telegram Compartir por Twitter Compartir por Email Compartir por Whatsapp ","date":"2021-04-29T00:00:00Z","image":"https://curiousstuff.eu/post/instalando-indy-sdk-para-node.js-por-primera-vez-en-ubuntu-21.04/heylagostechie-vII7qKAk-9A-unsplash_hud18bcf57dec7becdc5d7cab5b477ec0d_252009_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/instalando-indy-sdk-para-node.js-por-primera-vez-en-ubuntu-21.04/","title":"Instalando Indy SDK para Node.js por primera vez en Ubuntu 21.04"},{"content":"What is WASM WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.\nThe official documentation of WASM can be found at https://webassembly.org/\nHow fast WASM is? The Wasm stack machine is designed to be encoded in a size- and load-time-efficient binary format. WebAssembly aims to execute at native speed by taking advantage of common hardware capabilities available on a wide range of platforms.\nIs WASM memory safe? WebAssembly describes a memory-safe, sandboxed execution environment that may even be implemented inside existing JavaScript virtual machines. When embedded in the web, WebAssembly will enforce the same-origin and permissions security policies of the browser.\nWhat browsers supports WASM? In November 2017, WebAssembly CG members representing four browsers, Chrome, Edge, Firefox, and WebKit, reached consensus that the design of the initial (MVP) WebAssembly API and binary format is complete to the extent that no further design work is possible without implementation experience and significant usage.\nAfter the initial release, WebAssembly has been gaining new features through the standardization process. For the complete list of current proposals and their respective stages.\nWhat features are implemented on each Browser? That depends on the target browser. As a reference, you can take a look to following table\nWASM features compatibility table for different web browsers How to create a WASM application in Go To create a WASM application in Go, there are several constraints that needs to be met. From my point of view, the most recommended one is that WASM files should always start with\n1 //+build js, wasm to tell Go compiler that those files are WASM compilation variant only.\nWASM development constraints and limitations When working with Go and WASM there are some limitations that we need to be aware. Those basic limitations are known as\nPackage \u0026quot;syscall/js\u0026quot; needs to be imported to have access to Javascript bindings and some features. Function main must register all Go functions that we need to expose to JS using method js.Global().Set(functionName, fn). Function main must keep running during whole WASM module lifetime to avoid premature exit. To do this, a channel implementation can be used. All exposed JS functions must have same function signature as: func functionName(this js.Value, args []js.Value) interface{} Example WASM exercise To show you how to build your first WASM application, we are going to build a simple WASM module that expose function Add. This function Add will sum two integers and return their sum value as:\n$$ c = a + b $$\nSimple, right?\nFinal complete example The complete add.go file should be similar to this\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 //+build js, wasm package main import ( \u0026#34;errors\u0026#34; \u0026#34;syscall/js\u0026#34; ) func main() { c := make(chan struct{}, 0) println(\u0026#34;WASM Go Initialized\u0026#34;) // Expose Go function to Javascript js.Global().Set(\u0026#34;add\u0026#34;, js.FuncOf(add)) \u0026lt;-c } func add(this js.Value, args []js.Value) interface{} { if len(args) != 3 { return errors.New(\u0026#34;two arguments of type int are required\u0026#34;) } b := args[2] a := args[1] return a.Int() + b.Int() } Compile GO code to WASM To compile our previous add.go file, we need to tell Go compiler to generate a WASM file instead of the default binary. The required parameters that needs to be define on compilation command are GOARCH and GOOS. The command to compile wasm is:\n1 GOARCH=wasm GOOS=js go build -o add.wasm add.go That will build the package and produce an executable WebAssembly module file named add.wasm. The .wasm file extension will make it easier to serve it over HTTP with the correct Content-Type header later on.\nNote that you can only compile main packages. Otherwise, you will get an object file that cannot be run in WebAssembly. If you have a package that you want to be able to use with WebAssembly, convert it to a main package and build a binary.\nCompilation result The compilation result of executing go build for WASM should be afile with *.wasm extension as shown below\n1 2 3 4 5 6 ls -alh total 1,4M drwxrwxr-x 3 root root 4,0K abr 21 10:15 . drwxrwxr-x 25 root root 4,0K abr 15 09:51 .. -rw-rw-r-- 1 root root 474 abr 21 10:15 add.go -rwxrwxr-x 1 root root 1,4M abr 21 10:15 add.wasm We specified a custom file name with -o add.wasm parameter.\nRun Go compiled WASM in the browser To execute add.wasm in a browser, we’ll also need a JavaScript support file, and a HTML page to connect everything together.\nThis support file is known as the glue that makes possible the interaction between WASM module and JS environment. Copy the JavaScript support file (provided by Go language files) with\n1 cp \u0026#34;$(go env GOROOT)/misc/wasm/wasm_exec.js\u0026#34; . WARNING: You are required to have setup GOROOT environment variable before running previous command. Otherwise copy command will fail. By default, the value of GOROOT is /usr/local/go/misc/wasm\nThis wasm_exec.js file needs to be included in your html. As a reference, below example is given:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;/\u0026gt; \u0026lt;script src=\u0026#34;wasm_exec.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const go = new Go(); WebAssembly.instantiateStreaming(fetch(\u0026#34;add.wasm\u0026#34;), go.importObject) .then((result) =\u0026gt; { go.run(result.instance); // call our exposed WASM function const c = add(20,10); console.log(c) }); \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Once the index.html file is created, serve the three files (index.html, wasm_exec.js, and add.wasm) from a web server. For example, with Python basic server, run:\n1 2 python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... Now, visit http://0.0.0.0:8000/ on your web browser, open Developer Console and you should see the output of the sum $20+10$ on the screen.\nTo finish serving files, go back to Python application and press Ctrl+C to exit\n1 2 ^C Keyboard interrupt received, exiting. Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2021-04-24T00:00:00Z","image":"https://curiousstuff.eu/post/building-a-wasm-application-from-scratch/luca-bravo-XJXWbfSo2f0-unsplash_huc43817cc39ed5c87f2bd8eeaa4f3e44c_199046_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/building-a-wasm-application-from-scratch/","title":"Building a WASM application from scratch"},{"content":" Una vez inaugurado oficialmente el blog y migrados los artículos que tenía escritos en Medium, es hora de cerrar la cuenta de Medium para siempre (y ejercer mi derecho al olvido) y centrar todos los esfuerzos en este nuevo proyecto.\n¿Por qué cierro mi cuenta en Medium.com? Básicamente por una razón muy simple. Me he cansado de sufrir las políticas que tiene Medium de cara a monetizar el contenido mediante las suscripciones mensuales y limitando el número de artículos que se pueden ver diariamente a 3. Vale que borrando las cookies se resetea el contador otra vez, pero no es una solución elegante.\nAdemás, esto no solo me afecta a mi como lector, sino que afecta a todas aquellas personas que pudieran estar interesadas en leer los post que esporádicamente escribía en la web de Medium.\nLa parte buena que tiene medium Eso sí, creo que Medium también tiene su parte destacable. Entre otras cosas:\nLos artículos escritos en Medium se indexan en Google mucho más rápido y por lo general aparecen más arriba en los resultados de búsqueda. Solamente necesitan tener una cuenta en Medium para poder empezar a publicar. El sistema de reconocimiento o gamificación que tienen implementado en formato de \u0026lsquo;claps\u0026rsquo;. Medium se encarga por ti de generar toda la metainformación que mejora el SEO de tu web, entre otros los twitter card, el contenido en formato open graph, el formato del contenido, etc. Puedes llegar a monetizar tus artículos. Te incluye métricas de cuantos visitantes has tenido, cuánto tiempo han pasado leyendo tus artículos, etc. La parte mala de medium Mayor dificultad para añadir trozos de código o snippets directamente en el cuerpo del artículo No cuenta con syntax highligthing. Limitación a la hora de colocar imágenes en los artículos en cuanto a posición y tamaño se refiere. Tienes que cumplir con las reglas de contenido que tienen definidas. ¿Cómo es posible tener online un blog personal minimizando el coste? Técnicamente hay varias formas, pero la más extendida entre gente con cierto perfil técnico es la de usar algún sistema de generación de contenido estático mediante Jekyll, Ghost o Hugo.\nUna vez generado el contenido estático, este se publica en un CDN global como Fastly, Amazon S3, en Github Pages o en cualquier sistema similar. Una vez elegido el proveedor de ficheros estáticos, voilà, el blog estará publicado. En mi caso concreto he decidido realizarlo con:\nGithub Pages: como proveedor de contenido. Hugo: como sistema de diseño, maquetación y producción del blog. Cómo configurar un despliegue de Hugo para producción Para que te hagas una idea del potencial de esto, este mismo blog que estás leyendo está diseñado y construido con Hugo como te acabo de mencionar. Hugo no deja de ser una de las herramientas disponibles para generar webs estáticas. Pero es que además, el diseño de este blog, también cuenta con:\nProtección de Cloudflare: entre otras muchas cosas el candadito verde del navegador y el HTTPS. Aunque también da soporte frente a ataques DDOS, filtrado de tráfico, anti bots, js challenge, y muchas cosas más. Alojado totalmente gratis en Github: haciendo uso del sistema de Github Pages que permite a los desarrolladores publicar contenido estático. Integrado con Google Search Console: para monitorizar métricas básicas y posibles errores de AMP o visualización móvil. Con un CI/CD: que automáticamente genera una nueva versión del contenido web y la publica automáticamente gracias a los workers y al sistema de pipelining de Github Actions. Ahora en cada push que se haga en la rama máster, se ejecuta el proceso y se despliega la nueva versión de forma transparente, siempre y cuando todo haya salido bien. Así que en resumen, tenemos:\nUn blog online totalmente personalizable según nuestras necesidades Coste mensual de mantenimiento: 0 € Coste mensual de SSL: 0 € Y además, con unos resultados excelentes en el famoso test SSL-labs. Sin embargo, en cuanto a cabeceras de seguridad obtiene un D en el test de Security Headers por la configuración aplicada por defecto por parte de Github. No está mal, pero podría ser mejorable!\nComparación de las plataformas de creación de contenido más usadas en la actualidad Por supuesto, antes de decantarme por elegir la combinación de Hugo + Github Pages, revisé algunas de las plataformas de creación de contenido más usadas en la actualidad. Aquí os dejo la tabla comparativa\nProveedor Coste anual Coste mensual Permite personalizacion Detalles de la oferta Medium.com 50 € 5 € No https://medium.com/membership Wordpress.com 96 € 8 € Básica https://wordpress.com/pricing/ Wix.com 102 € 8,5 € Básica https://www.wix.com/upgrade/website Y con Hugo\nProveedor Coste anual Coste mensual Permite personalizacion Detalles de la oferta Hugo 0 € 0 € Completa https://gohugo.io/ Si quieres saber cómo puedes hacer tu propio blog en detalle o te ha surgido alguna pregunta, no dudes en dejarme un comentario!\nSuscríbete, haz una donación o hazte premium ¿Te resulto de ayuda? Ayuda con tu granito de arena a mejorar este blog y obten ventajas exclusivas siendo miembro premium!\nSuscríbete 💬 Comparte!! ¡Gracias por leer esto y espero que hayas encontrado la información útil! Si tienes alguna duda no tardes en escribirme un comentario más abajo. Y si quieres ver más contenido, sólo házmelo saber y comparte este post con tus colegas, compañeros de trabajo, amigos, etc. Compartir por LinkedIn Compartir por Telegram Compartir por Twitter Compartir por Email Compartir por Whatsapp ","date":"2021-04-23T00:00:00Z","image":"https://curiousstuff.eu/post/adios-medium.com-hola-hugo/glenn-carstens-peters-npxXWgQ33ZQ-unsplash_huc1b9935c9845e4073887c68671901e8f_167462_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/adios-medium.com-hola-hugo/","title":"Adios Medium.com, Hola Hugo"},{"content":"Today I will show you the most basic password cracking attack that pentesters needs to execute when no other options are available: the password cracking with dictionary attack or bruteforce attack. This is the way that a pentester uses to generate an own wordlist for password cracking. One of the most used tools out there for this task is CRUNCH. It is included in Kali Linux of course. In Kali Linux you can easily get crunch by exploring Application \u0026gt; Password Attacks \u0026gt; Crunch\nCrunch can generate a wordlist subject to the conditions you specify and its output file can be used in any other another program or file.\nInstalling crunch from scratch If you are not using Kali, you can install it with just a single pip command.\n1 2 3 4 5 pip install virtualenv virtualenv venv chmod +x ./venv/bin/activate source ./venv/bin/activate pip install crunch Now test crunch installation with\n1 crunch It should print something like\n1 2 3 4 5 6 7 8 crunch version 3.6 Crunch can create a wordlist based on criteria you specify. The output from crunch can be sent to the screen, file, or to another program. Usage: crunch \u0026lt;min\u0026gt; \u0026lt;max\u0026gt; [options] where min and max are numbers Please refer to the man page for instructions and examples on how to use crunch. Create a dictionary wordlist with crunch We are using crunch version 3.6 for this tutorial and followed given below parameters for generating a wordlist.\ncrunch command syntax: \u0026lt;min\u0026gt; \u0026lt;max\u0026gt; [character-string] [options]\nmin: This parameter specify minimum length string required for crunch to start generating wordlist.\nmax: This parameter specifies maximum length string required for crunch to end.\ncharset: This parameter specifies character sets for crunch to use for generating wordlist from that string, if you have not specified any string then crunch will default characters string.\noptions: crunch serves you a list of options which increase its functionality for generating wordlist as per your requirement.\ncrunch wordlist generation examples Create a dictionary wordlist with crunch and charset numeric and length between 1 and 4 1 crunch 1 4 0123456789 -o dict.txt 1 2 3 4 5 6 7 8 Crunch will now generate the following amount of data: 54320 bytes 0 MB 0 GB 0 TB 0 PB Crunch will now generate the following number of lines: 11110 crunch: 100% completed generating output Time to compute using crunch:\n1 time crunch 1 4 0123456789 -o dict.txt 1 0,01s user 0,00s system 0% cpu 3,006 total crunch command result Time to execute: 3 second Dictionary word size: 11110 Dictionary size: 54kb Create a dictionary wordlist with crunch and charset lower_alpha_numeric and length between 1 and 5 1 crunch 1 5 abcdefghijlkmnñopqrstuvwxyz0123456789 -o alpha_numeric_1_5.txt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Notice: Detected unicode characters. If you are piping crunch output to another program such as john or aircrack please make sure that program can handle unicode input. Do you want to continue? [Y/n] y Crunch will now generate the following amount of data: 435218939 bytes 415 MB 0 GB 0 TB 0 PB Crunch will now generate the following number of lines: 71270177 crunch: 55% completed generating output crunch: 100% completed generating output Time to compute using crunch:\n1 time crunch 1 5 abcdefghijlkmnñopqrstuvwxyz0123456789 -o alpha_numeric_1_5.txt 1 17,12s user 0,74s system 64% cpu 27,679 total crunch command result Time to execute: 28 second Dictionary word size: 71270177 Dictionary size: 415 Mb Now you can use created wordlist files for any purpose you need. Take into account, the bigger the password length or the charset, the more computation time and disk space will take.\nSubscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2021-04-17T00:00:00Z","image":"https://curiousstuff.eu/post/password-cracking-and-how-to-create-a-bruteforce-dictionary-with-crunch/h-heyerlein-ndja2LJ4IcM-unsplash_huddd7a53f90401313e5ddbb908c4fbeb5_459694_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/password-cracking-and-how-to-create-a-bruteforce-dictionary-with-crunch/","title":"Password cracking and how to create a bruteforce dictionary with crunch"},{"content":" A short analysis of different alternatives to check IPv4 validity comparing complexity vs performance of their implementations.\nIn this post, we will analyze how Go can be used to squeeze computer performance at maximum, with a tiny example of how to parse and validate content. In this case, we will be using IPv4 detection methods in order to make different approaches, and to benchmark \u0026amp; compare how Go behaves in each of them. We will be testing:\nnet package. regular expressions. custom implementation. All tests are executed with latest available version of Go at the time of writing this article which is go version go1.14.4 linux/amd64.\n1 go version 1 go version go1.14.4 linux/amd64 Introducing different implementations Method 1: net package This method will use go net package to check if given string contains a valid IPv4 or not.\n1 2 3 func IsIpv4Net(host string) bool { return net.ParseIP(host) != nil } Method 2: regex implementation This method will use go regex package to check if given string contains a valid IPv4 or not. The selected regular expression for this purpose is:\n1 ^(([0–9]|[1–9][0–9]|1[0–9]{2}|2[0–4][0–9]|25[0–5])\\.){3}([0–9]|[1–9][0–9]|1[0–9]{2}|2[0–4][0–9]|25[0–5])$ And this is how we use it:\n1 2 3 4 5 6 7 8 var ( ipRegex, _ = regexp.Compile(`^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`) ) func IsIpv4Regex(ipAddress string) bool { ipAddress = strings.Trim(ipAddress, \u0026#34; \u0026#34;) return ipRegex.MatchString(ipAddress) } Note: it is important to compile regex once, and call it multiple times.\nMethod 3: custom implementation Our custom approach will be based on net.Parse method as implemented in standard Go package.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 func IsIpv4(s string) bool { for i := 0; i \u0026lt; IPv4len; i++ { if len(s) == 0 { // Missing octets. return false } if i \u0026gt; 0 { if s[0] != \u0026#39;.\u0026#39; { return false } s = s[1:] } var n int var i int for i = 0; i \u0026lt; len(s) \u0026amp;\u0026amp; \u0026#39;0\u0026#39; \u0026lt;= s[i] \u0026amp;\u0026amp; s[i] \u0026lt;= \u0026#39;9\u0026#39;; i++ { n = n*10 + int(s[i]-\u0026#39;0\u0026#39;) if n \u0026gt;= big { n = big } } if i == 0 { n = 0; i = 0 } if n \u0026gt; 0xFF { return false } s = s[i:] } return len(s) == 0 } Benchmarking our implementations Let’s prepare a simple benchmark tests in where we receive IP value as string and we need to determine if it is a valid IPv4 or not just returning a boolean value with the result.\nAll test will have following configuration:\nMeasure allocations per operation Measure ns per operation Measure bytes per operation All benchmarking test will be executed of course, with testing machine in idle state with no other workloads being executed at same time to avoid bias results.\nMethod 1 Benchmarking: net package 1 2 3 4 5 6 7 8 b.Run(\u0026#34;is-valid-ipv4-net-pkg\u0026#34;, func(b *testing.B) { b.ReportAllocs() b.SetBytes(1) b.ResetTimer() for n := 0; n \u0026lt; b.N; n++ { _ = IsIpv4Net(\u0026#34;10.41.132.6\u0026#34;) } }) 1 2 3 4 5 6 7 8 goos: linux goarch: amd64 BenchmarkIpv4 BenchmarkIpv4/is-valid-ipv4-net-pkg BenchmarkIpv4/is-valid-ipv4-net-pkg-4 14063838 81.1 ns/op\t12.33 MB/s 16 B/op 1 allocs/op PASS Process finished with exit code 0 Method 2 Benchmarking: regex package 1 2 3 4 5 6 7 8 b.Run(\u0026#34;is-valid-ipv4-method-regex\u0026#34;, func(b *testing.B) { b.ReportAllocs() b.SetBytes(1) b.ResetTimer() for n := 0; n \u0026lt; b.N; n++ { _ = IsIpv4Regex(\u0026#34;10.41.132.6\u0026#34;) } }) 1 2 3 4 5 6 7 8 goos: linux goarch: amd64 BenchmarkIpv4 BenchmarkIpv4/is-valid-ipv4-method-regex BenchmarkIpv4/is-valid-ipv4-method-regex-4 1899319 604 ns/op 1.65 MB/s 0 B/op 0 allocs/op PASS Process finished with exit code 0 Method 3 Benchmarking: custom method 1 2 3 4 5 6 7 8 b.Run(\u0026#34;is-valid-ipv4-custom-method\u0026#34;, func(b *testing.B) { b.ReportAllocs() b.SetBytes(1) b.ResetTimer() for n := 0; n \u0026lt; b.N; n++ { _ = IsIpv4(\u0026#34;10.41.132.6\u0026#34;) } }) 1 2 3 4 5 6 7 8 goos: linux goarch: amd64 BenchmarkIpv4 BenchmarkIpv4/is-valid-ipv4-custom-method BenchmarkIpv4/is-valid-ipv4-custom-method-4 41939558\t29.6 ns/op\t33.78 MB/s\t0 B/op\t0 allocs/op PASS Process finished with exit code 0 Final Results Once tested and benchmarking all different methods, and having solid results, let’s compare the performance gain between our different options. But first, lets take a look at final results!!\n1 2 3 4 5 6 7 8 9 goos: linux goarch: amd64 BenchmarkIpv4 is-valid-ipv4-net-pkg-4 14063838 81.1 ns/op 12.33 MB/s 16 B/op 1 allocs/op is-valid-ipv4-method-regex-4 1899319 604 ns/op 1.65 MB/s 0 B/op 0 allocs/op is-valid-ipv4-custom-method-4 41939558 29.6 ns/op 33.78 MB/s 0 B/op 0 allocs/op PASS Process finished with exit code 0 \u0026hellip;and plotting results, we get:\nFinal result comparison You can check and run performance test by yourself. Get the code at Github\nConclusions Obviously this optimizations was quite a tiny one, and it was used in order to show you the relationship between readable code and optimized code. Just take into account the huge impact that can have writing good code vs writing code when we scale our software. For a http server, this means that for each validation it will require to make one allocations while the optimized version is zero-alloc! And compared to regex version, the optimized code is x20 times faster. Thanks for checking this out and I hope you found the info useful! This is a basic introduction to how to optimize stuff for performance.\nSubscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2021-04-14T00:00:00Z","image":"https://curiousstuff.eu/post/detecting-a-valid-ipv4-in-go-like-a-boss/server-rack-tcp_hu749f92f238beb41ab905f710d2cfae4e_253242_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/detecting-a-valid-ipv4-in-go-like-a-boss/","title":"Detecting a valid IPv4 in Go like a boss"},{"content":" How to run native Go code In Android and bench results!\nI was wondering today about how Android faces some of the cryptographic challenges of current Blockchain implementations. In order to solve this question, I just tried the best way I know: code, benchmark and plot it.\nHow a single Ethereum address is created? Following the official Geth Ethereum implementation, an account creation is defined as follows in Go:\n1 2 3 func GenerateKey() (*ecdsa.PrivateKey, error) { return ecdsa.GenerateKey(S256(), rand.Reader) } To generate the so typical Ethereum address and private key encoded as hexadecimal string, we just need to call following methods over previously created ECDSA struct:\nTo get the public address string\n1 2 // Get the address address := crypto.PubkeyToAddress(key.PublicKey).Hex() To get the private key string\n1 2 // Get the private key privateKey := hex.EncodeToString(key.D.Bytes()) How single core benchmark is designed? Since we are going to run benchmarks at runtime, we cannot make use of go benchmarking tools and we need to implement our own benchmarking method. For this purpose, we will design a wrapper function that takes two time snapshots and computes the difference, returning metrics results.\nThe data we are going to collect is wrapped in BenchResponse struct\n1 2 3 4 5 6 type BenchResponse struct { Ms int `json:\u0026#34;micros\u0026#34;` Millis int `json:\u0026#34;millis\u0026#34;` Size int `json:\u0026#34;size\u0026#34;` Created int `json:\u0026#34;created\u0026#34;` } To measure the single core runtime execution time, we will make use of following wrapper function:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 func measureFunc(size int, f func() bool) BenchResponse { ts := time.Now() i := 0 for i \u0026lt; size { if f() { break } i++ } duration := time.Since(ts) return BenchResponse{ Ms: int(duration.Microseconds()), Millis: int(duration.Milliseconds()), Size: size, Created: i, } } Our example test, will generate 1000 Ethereum addresses sequentially by running:\n1 2 3 4 5 6 func AccountBenchSingleCore(size int) BenchResponse { return measureFunc(size, func() bool { pk, genErr := crypto.GenerateKey() return genErr != nil || pk == nil }) } Prior executing this test in Android, we run a simple unit test to make sure it works as expected:\n1 2 3 4 5 6 7 8 9 10 t.Run(\u0026#34;single-core\u0026#34;, func(t *testing.T) { r := AccountBenchSingleCore(1000) assert.NotNil(t, r) assert.Equal(t, r.Created, 1000) t.Log(r) t.Log(\u0026#34;time micros:\u0026#34;, r.Ms) t.Log(\u0026#34;time millis: \u0026#34;, r.Millis) }) How multi-core benchmark is designed? In order to allow parallel creations of Ethereum accounts over multiple cores, we will modify previous code and implement both channels and wait groups to create the same amount of accounts.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 func AccountBenchMultiCore(size int) BenchResponse { var wg sync.WaitGroup wg.Add(size) ts := time.Now() for i := 0; i \u0026lt; size; i++ { go func() { _,_ = crypto.GenerateKey() wg.Done() }() } wg.Wait() duration := time.Since(ts) return BenchResponse{ Ms: int(duration.Microseconds()), Millis: int(duration.Milliseconds()), Size: size, Created: size, } } Prior executing this test in Android, we run a simple unit test to make sure it works as expected with no data race conditions.\n1 2 3 4 5 6 7 8 t.Run(\u0026#34;multi-core\u0026#34;, func(t *testing.T) { r := AccountBenchMultiCore(1000) assert.NotNil(t, r) assert.Equal(t, r.Created, 1000) t.Log(r) t.Log(\u0026#34;time micros:\u0026#34;, r.Ms) t.Log(\u0026#34;time millis: \u0026#34;, r.Millis) }) Running unit test using go test give us an initial result and difference between single core version and concurrent version\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 go test -c -o /tmp/test go tool test2json -t /tmp/test -test.v -test.run ^TestAccountBench$ === RUN TestAccountBench --- PASS: TestAccountBench (0.32s) === RUN TestAccountBench/single-core --- PASS: TestAccountBench/single-core (0.21s) api_bench_test.go:15: \u0026amp;{208782 208 1000 1000} api_bench_test.go:16: time micros: 208782 api_bench_test.go:17: time millis: 208 === RUN TestAccountBench/multi-core --- PASS: TestAccountBench/multi-core (0.11s) api_bench_test.go:23: \u0026amp;{114739 114 1000 1000} api_bench_test.go:24: time micros: 114739 api_bench_test.go:25: time millis: 114 PASSProcess finished with exit code 0 After plotting results, we can view the huge difference that we can get by running the same code in single core or multi-core.\nBenchmarking results: Concurrent vs Parallel Compiling for Android device To test our Go code in Android, it is necessary to compile it to a shared object library (*.aar) using Gomobile. In this case, the command that triggers the compilation of our Go code is:\n1 gomobile bind -o ./benchtest.aar -a -target=android projects/benchtest The result is a pair of files: *aar library and source code:\n1 2 rw-rw-r — 1 root root 9,5M dic 2 20:23 benchtest.aar rw-rw-r — 1 root root 11K dic 2 20:23 benchtest-sources.jar Testing on real Android device! We created a demo application, include the shared library and its sources and create a dummy trigger from Activity setting view as shown below.\nLet’s execute or Benchmarking function from AppCompatActivity The \u0026ldquo;Run Benchmarking\u0026rdquo; button will call native Go code inside of the *.so file and return our benchmark data result to the user as Dialog popup.\nBenchmark results running on Android Emulator. Subscribe, donate or become premium You like it? Help making this blog better and subscribe to get advantages or make a one-time donation.\nBuy me a coffee 💬 Share this post in social media Thanks for checking this out and I hope you found the info useful! If you have any questions, don't hesitate to write me a comment below. And remember that if you like to see more content on, just let me know it and share this post with your colleges, co-workers, FFF, etc. Share via LinkedIn Share via Telegram Share via Twitter Share via Email Share via Whatsapp ","date":"2021-04-13T00:00:00Z","image":"https://curiousstuff.eu/post/benchmarking-go-ethereum-account-creation-in-android/ethereum-header_hu58c8d0f497bb5c1dd81938f5225ead7c_52240_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/benchmarking-go-ethereum-account-creation-in-android/","title":"Benchmarking Go Ethereum account creation in Android"},{"content":" Breve introducción al concepto de SSI o Self Sovereign Identity.\n¿Qué es una Identidad Digital? Si bien la definición puede parecer un concepto sencillo, aún así no es tan fácil como parece.\nConsideremos el hecho de que todos sabemos quiénes somos, pero cuando se trata de otros, necesitarán algún tipo de parámetro para identificarnos. Puede ser nuestro nombre o nuestra cara o cualquier otro tipo de información. En realidad, esta información les es suministrada por otras fuentes.\nPor lo tanto, cuando se trata de la identidad digital, cualquier forma de información discreta adjunta a ti sería un “atributo de identidad”. Por lo tanto, verás que prácticamente no hay límites en la cantidad de atributos que pueden definirte.\nPor ejemplo, hay muchos atributos de identidad digital biométricos, como el aspecto de nuestra cara, nuestro género, nuestras huellas digitales o patrones de voz, etc. Además de estos otros atributos de identidad digital, como nuestros nombres, fecha de nacimiento, estado civil, o la dirección actual también puede definirnos socialmente.\nOtros atributos gubernamentales son obviamente importantes también. En resumen, una identidad digital es un tipo de formato de identidad donde la identidad de un individuo se representa a través de medios digitales.\n¿Identidad Digital Descentralizada? La identidad digital no es un reto nuevo. Desde los inicios de la revolución online, validar con total confianza la identidad real de personas/máquinas/servicios y cosas en un entorno digital ha sido un problema tanto para usuarios, que han visto eliminada su privacidad y el control sobre sus datos personales, como para empresas, que han sufrido el coste de la identificación ineficiente y constantes fallos de seguridad.\nLa solución de verificación de identidades digitales y atributos, basándose en un esquema SSI, bien implementada, cumple con la legislación GDPR e incluso con las políticas KYC y AML requeridas en algunas situaciones.\nVentajas Para las personas, tu identidad y tus datos siempre estarán bajo tu control.\nSin contraseñas débiles ni hiper complicadas: los usuarios pasan por la “fatiga de la contraseña” y usan la misma contraseña para múltiples aplicaciones. En muchos casos, incluso repiten las utilizadas anteriormente, lo que aumenta el riesgo de seguridad para sus identidades. Más seguro: La criptografía y Blockchain permiten que tu identidad esté siempre bajo tu control y no desperdigada en diferentes servidores o empresas TI. Más sencillo: Validas tu identidad digital con quien quieras de manera más privada, haciendo pública sólo aquella información estrictamente necesaria. Más universal: Basado en estándares que eliminan la necesidad de tener cientos de credenciales. Para las empresas,\nMás eficiente: Mejora procesos y reduce los costes de verificación de identidad Pero sobre todo olvídate de guardar miles de nombres de usuario, contraseña, hashes, etc y de cómo hacerlo acorde a la legislación vigente. Más seguro: Implementa procesos seguros de identificación y mejora las medidas anti-fraude en cumplimiento con eIDAS y GDPR. Desventajas Desventajas frente al sistema \u0026rsquo;tradicional\u0026rsquo; u otros mecanismos o implementaciones.\nNo existe un único registro centralizado de identidades, ni de entidades certificadoras, ni de usuarios…más allá de los datos almacenados en Blockchain. Las empresas que estaban acostumbradas a hacer acopio de datos de usuarios para venderlos a terceros, estarán totalmente en contra de este sistema Diferentes DIDs no serán interoperables con otros DIDs, de la misma manera que las URIs que usen un esquema diferente no lo son entre sí. Al tratarse de un sistema de identificación con base en Blockchain, no existe actualmente ningún procedimiento para hacer una purga de la información almacenada e inutil/obsoleta. Ejemplo de un DID Para los que nunca han trabajado con DIDs, se trata simplemente de un String con una sintaxis determinada, de forma que el resultado sea el siguiente y cumpla con el estándar en el que esta trabajando la W3C [1]:\n1 did:example:123456789abcdefghi El DID anterior, se resuelve en un documento DID.\nUn documento DID contiene información asociada con el DID, tales como las formas de autenticar criptográficamente, la entidad en control del DID, así como servicios que pueden ser usados para interactuar con la entidad.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \u0026#34;@context\u0026#34;: \u0026#34;https://www.w3.org/ns/did/v1\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;did:example:123456789abcdefghi\u0026#34;, \u0026#34;authentication\u0026#34;: [{ \u0026#34;id\u0026#34;: \u0026#34;did:example:123456789abcdefghi#keys-1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;RsaVerificationKey2018\u0026#34;, \u0026#34;controller\u0026#34;: \u0026#34;did:example:123456789abcdefghi\u0026#34;, \u0026#34;publicKeyPem\u0026#34;: \u0026#34;-----BEGIN PUBLIC KEY...END PUBLIC KEY-----\\r\\n\u0026#34; }], \u0026#34;service\u0026#34;: [{ \u0026#34;id\u0026#34;: \u0026#34;did:example:123456789abcdefghi#vcs\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;VerifiableCredentialService\u0026#34;, \u0026#34;serviceEndpoint\u0026#34;: \u0026#34;https://example.com/vc/\u0026#34; }] } Referencias [1] https://www.w3.org/TR/did-core/\nSuscríbete, haz una donación o hazte premium ¿Te resulto de ayuda? Ayuda con tu granito de arena a mejorar este blog y obten ventajas exclusivas siendo miembro premium!\nSuscríbete 💬 Comparte!! ¡Gracias por leer esto y espero que hayas encontrado la información útil! Si tienes alguna duda no tardes en escribirme un comentario más abajo. Y si quieres ver más contenido, sólo házmelo saber y comparte este post con tus colegas, compañeros de trabajo, amigos, etc. Compartir por LinkedIn Compartir por Telegram Compartir por Twitter Compartir por Email Compartir por Whatsapp ","date":"2021-01-21T00:00:00Z","image":"https://curiousstuff.eu/post/introducci%C3%B3n-al-concepto-self-sovereign-identity/ben-sweet-2LowviVHZ-E-unsplash_hu82c25fa98cd4e9a8103220017be4b8cb_109373_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/introducci%C3%B3n-al-concepto-self-sovereign-identity/","title":"Introducción al concepto Self Sovereign Identity"},{"content":" Estamos inmersos en pleno siglo XXI y al igual que sufrimos una revolución con Internet desde la mano de DARPA y la creación de la web gracias a Tim Berners Lee y compañía, es hora de asimilar que está volviendo a pasar. Y lo queramos o no, los datos son el nuevo petróleo.\nHacen ricos a unos cuantos, a costa de todas las personas que sin interés y con desgana, aceptan las condiciones de uso de cualquier aplicación. Unas veces movidos por la indiferencia de aceptar o no las condiciones de uso y la política de privacidad. Otras, movidas por la necesidad de seguir el comportamiento del grupo para no quedar excluidas.\nSea cual fuere la razón, hoy más que nunca tenemos que proteger la privacidad de los usuarios. Por suerte, hoy ya podemos decir, que tenemos los metodos suficientes para poder hacerle frente!\nUno de esos métodos, o concretamente tecnologías, es la conocida como SSI. Quizás la habras podido conocer como:\nSelf Sovereign Identity Identidad Digital Autocontenida Identidad Digital Auto Soberana Atestamiento de credenciales En este post sin embargo veremos los fundamentos de este sistema: la wallet.\nPilar principal de SSI: La wallet Es importante no confundir el concepto de wallet orientada a criptomonedas con una wallet SSI. Aunque ambas cumplen con el mismo propósito, la custodia de tu clave privada entre otras cosas existe una diferencia vital:\nWallet crypto Wallet SSI Generalmente almacenan la información asociada a la clave privada, la semilla o el mecanismo de recuperación de la cuenta. El valor de Bitcoins o tokens, que esa wallet tiene se almacena en la red Blockchain. Almacenan la clave privada, la información sensible del usuario, sus credenciales, sus registros de revocación, datos descargados de la red blockchain, etc. Sin embargo, en la red Blockchain solo se registra información pública conocida por todos los participantes. Recuerda: Cuando hablamos de tener una wallet, hablamos de tener una aplicación móvil instalada en nuestro dispositivo que nos de soporte a todas las funciones que se necesiten.\n¿Porque tener una wallet? La wallet es la aplicación principal que los usuarios deben tener para poder interactuar. Es como ir a pagar con tarjeta en un TPV y no tener la cartera. Sería una catástrofe. En este sentido, en SSI, la wallet (cartera en castellano), es donde se guardan y almacenan a buen recaudo toda nuestra información personal. Por ejemplo:\nNúmero de identificación. Ejemplo: DNI Número de abonado. Ejemplo: carnet del gimnasio Propiedad de una cuenta bancaria, sus datos de acceso y saldo actual. Etc Como veis, es el elemento donde se almacena todo. Si esta cartera se pierde, al igual que ocurriría en la vida real, se pierde toda nuestra información, tarjetas, etc. Tendríamos que iniciar un proceso de dar de baja y volver a solicitar todo aquello que tuviéramos expedido.\n¿Se puede hacer un proyecto SSI sin wallet de usuarios? Como todo en esta vida, por poderse se puede hacer. Otra cosa es que sea correcto y técnicamente elegante. Dicho de otra forma, es algo bastante chapucero, aunque existe una única excepción.\nLa excepción: es posible que se requiera hacer un proyecto o aplicación SSI que en determinado caso de uso se necesite el acceso a una wallet por parte de múltiples usuarios de una misma organización. En ese caso, y aunque rompa con los pilares de SSI, esa wallet podría llegar a consumirse como un servicio, sin tener que disponer de ella físicamente.\nLo ideal es que sean los usuarios finales, o dispositivos finales, los que gestionen su propia wallet. Porque, ¿de que nos sirve la tecnología SSI si no le damos a los usuarios el control de sus datos?\nTecnologías y tipos de wallets que existen Todo depende de la tecnología usada para llevar a cabo el proyecto SSI. Actualmente las tecnologías y aproximaciones más usadas son:\nUport (Ethereum), ahora conocida tambien como Serto. Hyperledger Indy: donde existe la red en producción llamada Sovrin; usada mor multiples empresas y organizaciones. Credenciales en formato W3C soportados en cualquier tipo de registro de datos descentralizado, ya sea Ethereum, Bitcoin o cualquier otra Blockchain. Alastria: consorcio Blockchain que intenta tener una plataforma de identidad digital basada en esquemas SSI con formato W3C. Cualquier otra implementación realizada por terceros que cumpla con los pilares y conceptos de SSI. ¿Como me creo una wallet? Siento comunicarte que cada tecnología dispone de sus propios mecanismos, frameworks y librerías que hay que implementar para poder usarlas. Echa un vistazo a lo que publican en sus Github\u0026rsquo;s para saber más.\nUport: https://www.uport.me/ Serto: https://www.serto.id/ Hyperledger Indy: https://www.hyperledger.org/use/hyperledger-indy Alastria: https://alastria.io/ Suscríbete, haz una donación o hazte premium ¿Te resulto de ayuda? Ayuda con tu granito de arena a mejorar este blog y obten ventajas exclusivas siendo miembro premium!\nSuscríbete 💬 Comparte!! ¡Gracias por leer esto y espero que hayas encontrado la información útil! Si tienes alguna duda no tardes en escribirme un comentario más abajo. Y si quieres ver más contenido, sólo házmelo saber y comparte este post con tus colegas, compañeros de trabajo, amigos, etc. Compartir por LinkedIn Compartir por Telegram Compartir por Twitter Compartir por Email Compartir por Whatsapp ","date":"2020-11-08T00:00:00Z","image":"https://curiousstuff.eu/post/tu-primera-wallet-personal/andrea-natali-ZVdLF-IBftE-unsplash_huadbe569b8468ea2126086d62707899b0_197095_120x120_fill_q75_box_smart1.jpg","permalink":"https://curiousstuff.eu/post/tu-primera-wallet-personal/","title":"Tu primera wallet personal"}]