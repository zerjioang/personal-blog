<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Curious Stuff Blog by Sergio Anguita</title><link>https://curiousstuff.eu/post/</link><description>Recent content in Posts on Curious Stuff Blog by Sergio Anguita</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Fri, 18 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://curiousstuff.eu/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a tiny Ethereum EVM in Go</title><link>https://curiousstuff.eu/post/creating-a-tiny-ethereum-evm-in-go/</link><pubDate>Fri, 18 Nov 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/creating-a-tiny-ethereum-evm-in-go/</guid><description>The Ethereum Virtual Machine (EVM) The Ethereum Virtual Machine (EVM) is a vital component of the Ethereum blockchain ecosystem. It is responsible for executing smart contracts on the Ethereum network. Smart contracts are self-executing contracts with the terms of the agreement between the buyer and the seller being directly written into code.
The EVM can be thought of as a decentralized virtual computer, as it is distributed across the Ethereum network and run by all participating nodes.</description></item><item><title>Autodetecting Unlocked Compiler Versions in Solidity</title><link>https://curiousstuff.eu/post/autodetecting-unlocked-compiler-versions-in-solidity/</link><pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/autodetecting-unlocked-compiler-versions-in-solidity/</guid><description>I want to show you how source code analyzers works with a simple example. Let&amp;rsquo;s build an analyzer that will check if Solidity source files contains a floating pragma declaration or not. There are some steps we need to follow, such as finding or building a good Solidity grammar file, parse the input content, build a parse tree, process the tree, and finally, find issues. All the process is explained below.</description></item><item><title>EVM bytecode to Graph using Crytic CFG Builder</title><link>https://curiousstuff.eu/post/evm-bytecode-to-graph-using-crytic-cfg-builder/</link><pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/evm-bytecode-to-graph-using-crytic-cfg-builder/</guid><description>For this experiment, I choose to test the Crytic tool called evm_cfg_builder which is opensource and is available at https://github.com/crytic/evm_cfg_builder.
The next step, is to find a contract to analyze and see how it works. What a better way to try it out than using their own example contracts.
Finding a contract to analyze The source code is extracted from evm-cfg-builder at https://github.com/crytic/evm_cfg_builder/blob/master/examples/token.sol
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 // from https://github.</description></item><item><title>Part 2: Building Ethereum EVM decompiler from scratch. Getting Code Blocks</title><link>https://curiousstuff.eu/post/part-2-building-ethereum-evm-decompiler-from-scratch.-getting-code-blocks/</link><pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/part-2-building-ethereum-evm-decompiler-from-scratch.-getting-code-blocks/</guid><description>In a previous post, Part 1: Building Ethereum EVM decompiler from scratch. Getting OPCODEs, I basically explained how EVM bytecode could be decoded from hexadecimal (0x...) format to some sort of assembly instructions. To make a little recap, we were able to convert input data from
1 0x363d3d373d3d3d363d73e38f942db7a1b4213d6213f70c499b59287b01f15af43d82803e903d91602b57fd5bf3 to EVM assembly instructions like
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 0x0000 CALLDATASIZE 0x0001 RETURNDATASIZE 0x0002 RETURNDATASIZE 0x0003 CALLDATACOPY 0x0004 RETURNDATASIZE 0x0005 RETURNDATASIZE 0x0006 RETURNDATASIZE 0x0007 CALLDATASIZE 0x0008 RETURNDATASIZE 0x0009 PUSH20 0xE38F942DB7A1B4213D6213F70C499B59287B01F1 0x001E GAS 0x001F DELEGATECALL 0x0020 RETURNDATASIZE 0x0021 DUP3 0x0022 DUP1 0x0023 RETURNDATACOPY 0x0024 SWAP1 0x0025 RETURNDATASIZE 0x0026 SWAP2 0x0027 PUSH1 0x2B 0x0029 JUMPI 0x002A REVERT 0x002B JUMPDEST 0x002C RETURN Example: Proxy contract taken from Ethereum Mainnet at address 0x3cdd26204e114c17823d82180e5ca3f299f18d22.</description></item><item><title>Part 1: Building Ethereum EVM decompiler from scratch. Getting OPCODEs</title><link>https://curiousstuff.eu/post/part-1-building-ethereum-evm-decompiler-from-scratch.-getting-opcodes/</link><pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/part-1-building-ethereum-evm-decompiler-from-scratch.-getting-opcodes/</guid><description>What is the decompilation process? The decompilation process involves going back to the original source code from compiled source code so that security engineers might have a better understanding of the programs instead of working directly with machine code; in this context of EVM, the goal is to convert EVM bytecode into solidity like code.
The challenge Compilation back to the original source code is impossible because all variable names, type names and even function names are removed.</description></item><item><title>Hunting RUG PULLs in Binance Smart Chain by code reviewing</title><link>https://curiousstuff.eu/post/hunting-rug-pulls-in-binance-smart-chain-by-code-reviewing/</link><pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/hunting-rug-pulls-in-binance-smart-chain-by-code-reviewing/</guid><description>What is a rug pull? We could define a rug pull as:
&amp;ldquo;Rug pulls are a lucrative scam in which a crypto developer promotes a new project—usually a new token—to investors, and then disappears with tens of millions or even hundreds of millions of dollars.&amp;rdquo;
Source: https://fortune.com/2022/03/02/crypto-scam-rug-pull-what-is-it Introducing POKELON: another scam According to creator description:
$POKELON is a BEP20 token that parodies wildly popular trends in DeFi and Gaming culture and brings them to life as an interactive, NFT Collectible Card Game.</description></item><item><title>Dec2hex: optimizing decimal to hexadecimal conversion algorithms for speed</title><link>https://curiousstuff.eu/post/dec2hex-optimizing-decimal-to-hexadecimal-conversion-algorithms-for-speed/</link><pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/dec2hex-optimizing-decimal-to-hexadecimal-conversion-algorithms-for-speed/</guid><description>Hexadecimal format Hexadecimal is the name of the numbering system that is base 16. This system, therefore, has numerals 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, and 15. That means that two-digit decimal numbers 10, 11, 12, 13, 14, and 15 must be represented by a single numeral to exist in this numbering system. To address the two-digit decimal values, the alphabetic characters A, B, C, D, E, and F are used to represent these values in hexadecimal and are treated as valid numerals.</description></item><item><title>Converting EVM bytecode to OPCODES in microseconds</title><link>https://curiousstuff.eu/post/converting-evm-bytecode-to-opcodes-in-microseconds/</link><pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/converting-evm-bytecode-to-opcodes-in-microseconds/</guid><description>Decompiling EVM Bytecode The process of decompiling an ethereum application can be very expensive. When you start an analysis process, you can take as a basis the network bytecode or the source code in Solidity. Doing a white box analysis is generally less expensive and requires programming knowledge in Solidity only. A bytecode analysis, however, requires low-level knowledge, understanding the operation of opcodes, EVM instructions, the stack, memory and storage modules, etc.</description></item><item><title>Improve your sound and Enable Noise cancellation in Ubuntu</title><link>https://curiousstuff.eu/post/improve-your-sound-and-enable-noise-cancellation-in-ubuntu/</link><pubDate>Fri, 18 Mar 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/improve-your-sound-and-enable-noise-cancellation-in-ubuntu/</guid><description>There is a hidden feature in Ubuntu which will allow you to enable noise cancellation and enhance quality of your online conversations. Here is a short tutorial on how to do it.
Create a backup First, backup of the important stuff.
1 sudo cp /etc/pulse/default.pa /etc/pulse/default.pa.bak Edit your configuration file Now edit default.pa file manually by entering following
1 sudo vi /etc/pulse/default.pa Now, at the end of the file add following configuration</description></item><item><title>Crawling Ethereum Blockchain for automated Smart Contract Extraction</title><link>https://curiousstuff.eu/post/crawling-ethereum-blockchain-for-automated-smart-contract-extraction/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/crawling-ethereum-blockchain-for-automated-smart-contract-extraction/</guid><description>In this article I&amp;rsquo;m going to show you how an automated data extraction can be dome for massive data analysis processes. The goal is to download all interesting Blockchain information as a processable file like a CSV. I&amp;rsquo;ll guide you throw the process of making it possible.
Requirements To be able to crawl the Blockchain data, we must have first a ledger peer syncronized and running. If you dont have one, you can check this guide about how to setup one.</description></item><item><title>How to install truffle, compile and run our first smart contract with Solidity</title><link>https://curiousstuff.eu/post/how-to-install-truffle-compile-and-run-our-first-smart-contract-with-solidity/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/how-to-install-truffle-compile-and-run-our-first-smart-contract-with-solidity/</guid><description>In this article I will guide you through a complete step by step guide about how to configure your machine and setup to have your first smart contract running and installed on a Blockchain.
Warning
This article was developed using Truffle v5.5.3 (core: 5.5.3), Ganache v7.0.1, Solidity - 0.8.12 (solc-js), Node v17.7.0 and Web3.js v1.5.3 Steps The steps we are going to make are listed below
Configure our environment and install required tools: truffle, ganache.</description></item><item><title>Running an Ethereum Rinkeby full node in 2022</title><link>https://curiousstuff.eu/post/running-an-ethereum-rinkeby-full-node-in-2022/</link><pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/running-an-ethereum-rinkeby-full-node-in-2022/</guid><description>What is Rinkeby Testnet Rinkeby is an Ethereum test network that allows for blockchain development testing before deployment on Mainnet, the main Ethereum network.
The Proof-of-Authority test network was established in April 2017. It uses the Clique PoA consensus protocol, and is maintained by the Geth developer team.
The network is supported by Geth, Nethermind and Hyperledger Besu.
Some features of the network are:
Testnet / Live: Test Chain ID: 4 Network ID: 4 Live Since: April 2017 Block time: 15 seconds Consensus / block proposer: PoA – Proof-of-Authority Permissioned: Yes Governance / Authorities: Known developers who sign the blocks Meaning of PoA:</description></item><item><title>Understanding EVM: an introduction to Ethereum OPCODES</title><link>https://curiousstuff.eu/post/understanding-evm-an-introduction-to-ethereum-opcodes/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/understanding-evm-an-introduction-to-ethereum-opcodes/</guid><description>The Ethereum Virtual Machine or EVM The Ethereum Virtual Machine is the software platform that developers can use to create decentralized applications (DApps) on Ethereum. At any given block in the chain, Ethereum has one and only one &amp;lsquo;canonical&amp;rsquo; state, and the EVM is what defines the rules for computing a new valid state from block to block.
The EVM design simplified The EVM behaves as a mathematical function would: Given an input, it produces a deterministic output.</description></item><item><title>Installing Rust n Cargo</title><link>https://curiousstuff.eu/post/installing-rust-n-cargo/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/installing-rust-n-cargo/</guid><description>The easiest way to get Cargo is to install the current stable release of Rust by using rustup. Installing Rust using rustup will also install cargo.
Rust Installation On Linux and macOS systems, this is done as follows:
1 curl https://sh.rustup.rs -sSf | sh After request the installation, you should see the script downloading all required tools
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 info: downloading installer Welcome to Rust!</description></item><item><title>Using Go Modules with private repositories at Github</title><link>https://curiousstuff.eu/post/using-go-modules-with-private-repositories-at-github/</link><pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/using-go-modules-with-private-repositories-at-github/</guid><description>Unlike many programming languages, Go distributes modules from repositories instead of a central package server. One benefit of this approach is that publishing a private module is very similar to publishing a public one. Instead of requiring a completely separate private package server, a Go private module is distributed via a private source code repository. Since most source code hosting options support this out of the box, there’s no need to set up an additional private server.</description></item><item><title>Conociendo el mundo del opendata con un caso real: Bilbobus</title><link>https://curiousstuff.eu/post/conociendo-el-mundo-del-opendata-con-un-caso-real-bilbobus/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/conociendo-el-mundo-del-opendata-con-un-caso-real-bilbobus/</guid><description>Que son los datos abiertos u opendata? Los datos abiertos son datos que pueden ser utilizados, reutilizados y redistribuidos libremente por cualquier persona, y que se encuentran sujetos, cuando más, al requerimiento de atribución y de compartirse de la misma manera en que aparecen.
Dicha atribución, normalmente esta ligada a una licencia de uso o explotación que define que cosas puedes hacer con ellos y si tienes que dar algun tipo de autoria.</description></item><item><title>Installing Latex and Texmaker in Ubuntu 20.04</title><link>https://curiousstuff.eu/post/installing-latex-and-texmaker-in-ubuntu-20.04/</link><pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/installing-latex-and-texmaker-in-ubuntu-20.04/</guid><description>Introducing LaTeX LaTeX is a text composition system, oriented to the creation of written documents with high typographic quality. Due to its characteristics and possibilities, it is used especially intensively in the generation of scientific articles and books that include, among other elements, mathematical expressions.
LaTeX consists of a large set of TeX macros, written by Leslie Lamport in 1984, with the intention of facilitating the use of the typesetting language, TEX, created by Donald Knuth.</description></item><item><title>Expose the Raspberry Pi to Internet with Cloudflare</title><link>https://curiousstuff.eu/post/expose-the-raspberry-pi-to-internet-with-cloudflare/</link><pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/expose-the-raspberry-pi-to-internet-with-cloudflare/</guid><description>Many of us who have a Raspberry Pi want to have access to it even from outside our network. Some use it to publish their blog or personal web page, others want to access a torrent server from which they can add downloads when they are not at home so that they are available when they arrive, and for others it could be a gateway to their entire home automation system, being able to control and monitor the status of their home when they are not at home.</description></item><item><title>Installing CUDA Toolkit v11.4.2 on Ubuntu</title><link>https://curiousstuff.eu/post/installing-cuda-toolkit-v11.4.2-on-ubuntu/</link><pubDate>Thu, 07 Oct 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/installing-cuda-toolkit-v11.4.2-on-ubuntu/</guid><description>This guide covers the basic instructions needed to install CUDA and verify that a CUDA application can run on Linux.
CUDA on Linux can be installed using an RPM, Debian, Runfile, or Conda package, depending on the platform being installed on.
Installing CUDA Toolkit on Ubuntu When installing CUDA on Ubuntu, you can choose between the Runfile Installer and the Debian Installer. The Runfile Installer is only available as a Local Installer.</description></item><item><title>Building a word counter efficiently</title><link>https://curiousstuff.eu/post/building-a-word-counter-efficiently/</link><pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/building-a-word-counter-efficiently/</guid><description>In this small article, I dig into some caveats that make your software development better when working with files. We talk about, how file reading can be done in Go using buffered readings to speedup data access and improve our overall programm experience.
I will show you a basic example of file reading based on real example.
A real example of file reading Most unix based systems, contains a small utility called wc with stands for word count and according to man documentation, states:</description></item><item><title>Should you care about LEDs usage? Consequences of using them</title><link>https://curiousstuff.eu/post/should-you-care-about-leds-usage-consequences-of-using-them/</link><pubDate>Fri, 24 Sep 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/should-you-care-about-leds-usage-consequences-of-using-them/</guid><description>Should you care about LEDs usage? Have you ever wondered if you should start using LED lights? And you&amp;rsquo;ve never found the time to find out if they&amp;rsquo;re really worth it. Let me show a couple of examples of the consequences of using LED bulbs or lights in your projects, home or even vehicles.
What a LED light really is A light-emitting diode or LED, is a light source consisting of a semiconductor material with two terminals.</description></item><item><title>How to build a markov chain in Python</title><link>https://curiousstuff.eu/post/how-to-build-a-markov-chain-in-python/</link><pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/how-to-build-a-markov-chain-in-python/</guid><description>Introducing markov chains in Python So far, we read about how a Markov Chain works, the concept of transition matrix and how we can calculate a future state probability. However, we need to be able to create our own Markov Chains from our input data. This post will show you, how you can create your own markov chain using Python 3+
Working with Markov Chains, our first approach So, what markov chain implementation should I use to build my own chain?</description></item><item><title>Introduction to Markov chains</title><link>https://curiousstuff.eu/post/introduction-to-markov-chains/</link><pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/introduction-to-markov-chains/</guid><description>What is a markov chain A Markov chain is a stochastic model describing a sequence of possible events in which the probability of each event depends only on the state attained in the previous event. A countably infinite sequence, in which the chain moves state at discrete time steps, gives a discrete-time Markov chain (DTMC). It is named after the Russian mathematician Andrei Markov (1856-1922), who introduced it in 1906.</description></item><item><title>A pure Go Blazinly fast PRNG 64 bit ID generator</title><link>https://curiousstuff.eu/post/a-pure-go-blazinly-fast-prng-64-bit-id-generator/</link><pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/a-pure-go-blazinly-fast-prng-64-bit-id-generator/</guid><description>Blazinly fast PRNG 64 bit are here Sometimes, we require to have an identifier in order to store things, track behaviours etc. In this scenario, I was required to rapidly generate ID strings in order to be used as Request ID for an HTTP service. Those IDs would be included in HTTP service response X-Request-ID header and tracked in Opentracing. I did some initial implementation and saw a performance degradation that I did not like it.</description></item><item><title>Go released 1.17</title><link>https://curiousstuff.eu/post/go-released-1.17/</link><pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/go-released-1.17/</guid><description>Go 1.17 is released The 16 of August 2021, the Go Team releases the version 1.17 of Go
This release brings additional improvements to the compiler, namely a new way of passing function arguments and results. This change has shown about a 5% performance improvement in Go programs and reduction in binary sizes of around 2% for amd64 platforms. Support for more platforms will come in future releases.
Go 1.17 also adds support for the 64-bit ARM architecture on Windows, letting gophers run Go natively on more devices.</description></item><item><title>How to blink the damn ESP32 built-in led</title><link>https://curiousstuff.eu/post/how-to-blink-the-damn-esp32-built-in-led/</link><pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/how-to-blink-the-damn-esp32-built-in-led/</guid><description>Requirements Install Arduino IDE. Visit their site for instructions. Add permission to use the serial connection and operate with it. Make sure your board is recognized properly. Add permission for serial operations In case your current user is not added to dialout group, you have to add it.
1 2 sudo adduser $USER dialout sudo usermod -a -G dialout $USER Check if ESP32 board is connected to your computer The fastest way to check whether the board is connected to the computer or not is using lsusb command</description></item><item><title>Fast hash decryption with rtgen and Rainbow Tables</title><link>https://curiousstuff.eu/post/fast-hash-decryption-with-rtgen-and-rainbow-tables/</link><pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/fast-hash-decryption-with-rtgen-and-rainbow-tables/</guid><description>Cracking systems Breaking any encryption system can be done with unlimited time and unlimited computing power, both of which do not exist. Anything less than that unlimited power and time will require chance and good investigative skills. Several methods to break encryption include dictionary attacks, brute-force attacks, and rainbow tables.
Rainbow Tables A note on rainbow tables first:
They do not have rainbow colors
A rainbow table is a precomputed compilation of plaintexts and matching ciphertexts (typically passwords and their matching hashes).</description></item><item><title>Easy solution to how to fix CUPS unauthorized error</title><link>https://curiousstuff.eu/post/easy-solution-to-how-to-fix-cups-unauthorized-error/</link><pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/easy-solution-to-how-to-fix-cups-unauthorized-error/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>Easy to fix solution to common Ubuntu printing CUPS error:&lt;/p></description></item><item><title>Lightning fast stock market data parsing. Get a boost of 70%</title><link>https://curiousstuff.eu/post/lightning-fast-stock-market-data-parsing.-get-a-boost-of-70/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/lightning-fast-stock-market-data-parsing.-get-a-boost-of-70/</guid><description>Con el confinamiento por el Coronavirus y esta situación tan caótica, uno tiene más tiempo para estar delante del ordenador y hacer cosas locas; o frikadas como me gusta llamarlas! Una de ellas es procesar datos de la Bolsa, y como esta es mi primera experiencia con ello, he empezado con la Bolsa española: BME, que es la que más cerca tengo, aunque técnicamente da igual cual elegir porque lo importante son los datos en sí.</description></item><item><title>¿Porque considerar Hyperledger Indy para un proyecto SSI?</title><link>https://curiousstuff.eu/post/porque-considerar-hyperledger-indy-para-un-proyecto-ssi/</link><pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/porque-considerar-hyperledger-indy-para-un-proyecto-ssi/</guid><description>Vamos a analizar algunos de los principales problemas de la infraestructura existente. Esto le ayudará a entender por qué este proyecto es realmente importante.
Gestión de identidades centralizada En primer lugar, veamos qué ha hecho la gestión centralizada de identidades durante todos estos años. En realidad, Internet se construyó para conectar a las personas sin depender de un intermediario. Sin embargo, a medida que Internet comenzó a privatizarse, empezaron a surgir intermediarios de terceros.</description></item><item><title>¿Que es Hyperledger Indy?</title><link>https://curiousstuff.eu/post/que-es-hyperledger-indy/</link><pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/que-es-hyperledger-indy/</guid><description>¿Por qué Hyperledger Indy es importante para las identidades digitales? Hyperledger Indy puede devolverle el control sobre su propia identidad y sus datos. ¿Te sientes intrigado? Analicemos la plataforma desde su núcleo para entender cómo funciona este proyecto.
Con la evolución del mundo digital, todos queremos estar siempre conectados. Sin embargo, al realizar diversas tareas, es posible que tengas que revelar tu información personal en múltiples plataformas. Especialmente cuando compras en línea, tienes que dar tu información financiera para comprar cualquier cosa.</description></item><item><title>Instalando Indy SDK para Node.js por primera vez en Ubuntu 21.04</title><link>https://curiousstuff.eu/post/instalando-indy-sdk-para-node.js-por-primera-vez-en-ubuntu-21.04/</link><pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/instalando-indy-sdk-para-node.js-por-primera-vez-en-ubuntu-21.04/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>Guía completa que explica paso a paso cómo instalar y configurar el SDK de Indy por primera vez.&lt;/p></description></item><item><title>Building a WASM application from scratch</title><link>https://curiousstuff.eu/post/building-a-wasm-application-from-scratch/</link><pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/building-a-wasm-application-from-scratch/</guid><description>What is WASM WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.
The official documentation of WASM can be found at https://webassembly.org/
How fast WASM is? The Wasm stack machine is designed to be encoded in a size- and load-time-efficient binary format. WebAssembly aims to execute at native speed by taking advantage of common hardware capabilities available on a wide range of platforms.</description></item><item><title>Adios Medium.com, Hola Hugo</title><link>https://curiousstuff.eu/post/adios-medium.com-hola-hugo/</link><pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/adios-medium.com-hola-hugo/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>Una vez inaugurado oficialmente el blog y migrados los artículos que tenía escritos en
&lt;a href="https://medium.com/" target="_blank">Medium&lt;/a>, es hora de cerrar la cuenta de Medium para siempre (y ejercer mi derecho al olvido) y centrar todos los esfuerzos en este nuevo proyecto.&lt;/p></description></item><item><title>Password cracking and how to create a bruteforce dictionary with crunch</title><link>https://curiousstuff.eu/post/password-cracking-and-how-to-create-a-bruteforce-dictionary-with-crunch/</link><pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/password-cracking-and-how-to-create-a-bruteforce-dictionary-with-crunch/</guid><description>Today I will show you the most basic password cracking attack that pentesters needs to execute when no other options are available: the password cracking with dictionary attack or bruteforce attack. This is the way that a pentester uses to generate an own wordlist for password cracking. One of the most used tools out there for this task is CRUNCH. It is included in Kali Linux of course. In Kali Linux you can easily get crunch by exploring Application &amp;gt; Password Attacks &amp;gt; Crunch</description></item><item><title>Detecting a valid IPv4 in Go like a boss</title><link>https://curiousstuff.eu/post/detecting-a-valid-ipv4-in-go-like-a-boss/</link><pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/detecting-a-valid-ipv4-in-go-like-a-boss/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>A short analysis of different alternatives to check IPv4 validity comparing complexity vs performance of their implementations.&lt;/p></description></item><item><title>Benchmarking Go Ethereum account creation in Android</title><link>https://curiousstuff.eu/post/benchmarking-go-ethereum-account-creation-in-android/</link><pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/benchmarking-go-ethereum-account-creation-in-android/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>How to run native Go code In Android and bench results!&lt;/p></description></item><item><title>Introducción al concepto Self Sovereign Identity</title><link>https://curiousstuff.eu/post/introducci%C3%B3n-al-concepto-self-sovereign-identity/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/introducci%C3%B3n-al-concepto-self-sovereign-identity/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>Breve introducción al concepto de SSI o Self Sovereign Identity.&lt;/p></description></item><item><title>Tu primera wallet personal</title><link>https://curiousstuff.eu/post/tu-primera-wallet-personal/</link><pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate><guid>https://curiousstuff.eu/post/tu-primera-wallet-personal/</guid><description>Estamos inmersos en pleno siglo XXI y al igual que sufrimos una revolución con Internet desde la mano de DARPA y la creación de la web gracias a Tim Berners Lee y compañía, es hora de asimilar que está volviendo a pasar. Y lo queramos o no, los datos son el nuevo petróleo.
Hacen ricos a unos cuantos, a costa de todas las personas que sin interés y con desgana, aceptan las condiciones de uso de cualquier aplicación.</description></item></channel></rss>